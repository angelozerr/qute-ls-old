/* Generated by: JavaCC 21 Parser Generator. Token.java */
package qute;

import java.util.*;
/**
 * Describes the input token stream.
 */
public class Token implements QUTEConstants,Node {
    // The token does not correspond to actual characters in the input.
    // It was inserted to (tolerantly) complete some grammatical production.
    boolean virtual;
    // The token was not consumed legitimately by any grammatical 
    // production.
    boolean ignored;
    public void setVirtual(boolean virtual) {
        this.virtual=virtual;
    }

    public boolean isDirty() {
        return this.virtual||invalidToken!=null||this.ignored;
    }

    // The lexically invalid input that precedes this token (if any)
    InvalidToken invalidToken;
    // The unparsed tokens that precede this token (if any)
    List<Token>precedingUnparsedTokens;
    void addUnparsedToken(Token tok) {
        if (precedingUnparsedTokens==null) precedingUnparsedTokens=new ArrayList<Token>();
        precedingUnparsedTokens.add(tok);
    }

    private String inputSource="";
    /**
     * An integer that describes the kind of this token.  This numbering
     * system is determined by JavaCCParser, and a table of these numbers is
     * stored in the file ...Constants.java.
     */
    int kind;
    /**
     * beginLine and beginColumn describe the position of the first character
     * of this token; endLine and endColumn describe the position of the
     * last character of this token.
     */
    int beginLine,beginColumn,endLine,endColumn;
    /**
     * The string image of the token.
     */
    String image;
    /**
     * A reference to the next regular (non-special) token from the input
     * stream.  If this is the last token from the input stream, or if the
     * token manager has not read tokens beyond this one, this field is
     * set to null.  This is true only if this token is also a regular
     * token.  Otherwise, see below for a description of the contents of
     * this field.
     */
    private Token next;
    Token getNext() {
        return next;
    }

    void setNext(Token next) {
        this.next=next;
    }

    /**
     * This field is used to access special tokens that occur prior to this
     * token, but after the immediately preceding regular (non-special) token.
     * If there are no such special tokens, this field is set to null.
     * When there are more than one such special token, this field refers
     * to the last of these special tokens, which in turn refers to the next
     * previous special token through its specialToken field, and so on
     * until the first special token (whose specialToken field is null).
     * The next fields of special tokens refer to other special tokens that
     * immediately follow it (without an intervening regular token).  If there
     * is no such token, this field is null.
     */
    Token specialToken;
    boolean unparsed;
    public Token() {
    }

    /**
     * Constructs a new token for the specified Image.
     */
    public Token(int kind) {
        this(kind,null);
    }

    /**
     * Constructs a new token for the specified Image and Kind.
     */
    public Token(int kind,String image) {
        this.kind=kind;
        this.image=image;
    }

    public int getId() {
        return kind;
    }

    public boolean isUnparsed() {
        return unparsed;
    }

    public void setUnparsed(boolean unparsed) {
        this.unparsed=unparsed;
    }

    public void clearChildren() {
    }

    public String getNormalizedText() {
        if (virtual) {
            return"Virtual Token";
        }
        if (invalidToken!=null) {
            return"invalid input: "+invalidToken.image+" followed by: "+image;
        }
        return image;
    }

    public String getRawText() {
        return image;
    }

    public String toString() {
        return getNormalizedText();
    }

    public static Token newToken(int ofKind,String image) {
        switch(ofKind) {
            //              case -1 : return new InvalidToken(image);
            case COMMA:
            return new COMMA(ofKind,image);
            case IN:
            return new IN(ofKind,image);
            case AS:
            return new AS(ofKind,image);
            case OR:
            return new OR(ofKind,image);
            case OR2:
            return new OR2(ofKind,image);
            case AND:
            return new AND(ofKind,image);
            case AND2:
            return new AND2(ofKind,image);
            case SIMPLE_EQUALS:
            return new SIMPLE_EQUALS(ofKind,image);
            case EQUALS:
            return new EQUALS(ofKind,image);
            case EQUALS2:
            return new EQUALS2(ofKind,image);
            case EQUALS3:
            return new EQUALS3(ofKind,image);
            case GT:
            return new GT(ofKind,image);
            case ALT_GT:
            return new ALT_GT(ofKind,image);
            case GE:
            return new GE(ofKind,image);
            case ALT_GE:
            return new ALT_GE(ofKind,image);
            case LT:
            return new LT(ofKind,image);
            case ALT_LT:
            return new ALT_LT(ofKind,image);
            case LE:
            return new LE(ofKind,image);
            case ALT_LE:
            return new ALT_LE(ofKind,image);
            case DOT_DOT:
            return new DOT_DOT(ofKind,image);
            case PLUS:
            return new PLUS(ofKind,image);
            case MINUS:
            return new MINUS(ofKind,image);
            case TIMES:
            return new TIMES(ofKind,image);
            case DIVIDE:
            return new DIVIDE(ofKind,image);
            case DOT:
            return new DOT(ofKind,image);
            case EXCLAM:
            return new EXCLAM(ofKind,image);
            case OPEN_BRACKET:
            return new OPEN_BRACKET(ofKind,image);
            case CLOSE_BRACKET:
            return new CLOSE_BRACKET(ofKind,image);
            case NULL:
            return new NULL(ofKind,image);
            case TRUE:
            return new TRUE(ofKind,image);
            case FALSE:
            return new FALSE(ofKind,image);
            case INTEGER:
            return new INTEGER(ofKind,image);
            case DECIMAL:
            return new DECIMAL(ofKind,image);
            case STRING_LITERAL:
            return new STRING_LITERAL(ofKind,image);
            case RAW_STRING:
            return new RAW_STRING(ofKind,image);
            case C_IDENTIFIER:
            return new C_IDENTIFIER(ofKind,image);
            case NUMBER:
            return new NumberLiteral2(ofKind,image);
            case OPEN_PAREN:
            return new Delimiter(ofKind,image);
            case CLOSE_PAREN:
            return new Delimiter(ofKind,image);
            case TEXT:
            return new Text(ofKind,image);
            case OPEN_CURLY:
            return new OPEN_CURLY(ofKind,image);
            case ABBREVIATED_END:
            return new ABBREVIATED_END(ofKind,image);
            case EACH:
            return new EACH(ofKind,image);
            case ENDEACH:
            return new ENDEACH(ofKind,image);
            case FOR:
            return new FOR(ofKind,image);
            case ENDFOR:
            return new ENDFOR(ofKind,image);
            case IF:
            return new IF(ofKind,image);
            case ELSEIF:
            return new ELSEIF(ofKind,image);
            case ELSE:
            return new ELSE(ofKind,image);
            case ENDIF:
            return new ENDIF(ofKind,image);
            case QUTE_INCLUDE:
            return new QUTE_INCLUDE(ofKind,image);
            case ENDINCLUDE:
            return new ENDINCLUDE(ofKind,image);
            case INSERT:
            return new INSERT(ofKind,image);
            case ENDINSERT:
            return new ENDINSERT(ofKind,image);
            case WITH:
            return new WITH(ofKind,image);
            case ENDWITH:
            return new ENDWITH(ofKind,image);
            case START_SECTION:
            return new START_SECTION(ofKind,image);
            case END_SECTION:
            return new END_SECTION(ofKind,image);
            case START_PARAMETER_DECL:
            return new START_PARAMETER_DECL(ofKind,image);
            case OPEN_COMMENT:
            return new OPEN_COMMENT(ofKind,image);
            case CLOSE_COMMENT:
            return new Comment(ofKind,image);
            case CLOSE_CURLY:
            return new CLOSE_CURLY(ofKind,image);
            case CLOSE_EMPTY:
            return new CLOSE_EMPTY(ofKind,image);
        }
        return new Token(ofKind,image);
    }

    public void setInputSource(String inputSource) {
        this.inputSource=inputSource;
    }

    public String getInputSource() {
        return inputSource;
    }

    public void setBeginColumn(int beginColumn) {
        this.beginColumn=beginColumn;
    }

    public void setEndColumn(int endColumn) {
        this.endColumn=endColumn;
    }

    public void setBeginLine(int beginLine) {
        this.beginLine=beginLine;
    }

    public void setEndLine(int endLine) {
        this.endLine=endLine;
    }

    public int getBeginLine() {
        return beginLine;
    }

    public int getBeginColumn() {
        return beginColumn;
    }

    public int getEndLine() {
        return endLine;
    }

    public int getEndColumn() {
        return endColumn;
    }

    private Node parent;
    private Map<String,Object>attributes;
    public void setChild(int i,Node n) {
        throw new UnsupportedOperationException();
    }

    public void addChild(Node n) {
        throw new UnsupportedOperationException();
    }

    public void addChild(int i,Node n) {
        throw new UnsupportedOperationException();
    }

    public Node removeChild(int i) {
        throw new UnsupportedOperationException();
    }

    public boolean removeChild(Node n) {
        return false;
    }

    public int indexOf(Node n) {
        return-1;
    }

    public Node getParent() {
        return parent;
    }

    public void setParent(Node parent) {
        this.parent=parent;
    }

    public int getChildCount() {
        return 0;
    }

    public Node getChild(int i) {
        return null;
    }

    public List<Node>children() {
        return Collections.emptyList();
    }

    public void open() {
    }

    public void close() {
    }

    public Object getAttribute(String name) {
        return attributes==null?null:
        attributes.get(name);
    }

    public void setAttribute(String name,Object value) {
        if (attributes==null) {
            attributes=new HashMap<String,Object>();
        }
        attributes.put(name,value);
    }

    public boolean hasAttribute(String name) {
        return attributes==null?false:
        attributes.containsKey(name);
    }

    public Set<String>getAttributeNames() {
        if (attributes==null) return Collections.emptySet();
        return attributes.keySet();
    }

}
