/* Generated by: JavaCC 21 Parser Generator. QUTELexer.java */
package qute;

/** Token Manager */
@SuppressWarnings("unused")
public class QUTELexer implements QUTEConstants {
    /** Debug output. */
    java.io.PrintStream debugStream=System.out;
    /** Set debug output. */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream=ds;
    }

    int[] jjemptyLineNo=new int[3];
    int[] jjemptyColNo=new int[3];
    boolean[] jjbeenHere=new boolean[3];
    int curLexState;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;
    private String inputSource="input";
    public String getInputSource() {
        return inputSource;
    }

    public void setInputSource(String inputSource) {
        this.inputSource=inputSource;
    }

    static final String[] lexStateNames={"QUTE_TEXT","QUTE_EXPRESSION","IN_COMMENT",};
    /** Lex State array. */
    public static final int[] jjnewLexState={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,1,-1,1,-1,2,-1,0,0,0,};
    // Bit vector for TOKEN
    static final long[] jjtoToken={0x18ff8e111L,};
    // Bit vector for SKIP
    static final long[] jjtoSkip={0x40000002L,};
    // Bit vector for SPECIAL
    static final long[] jjtoSpecial={0x40000000L,};
    // Bit vector for MORE
    static final long[] jjtoMore={0x30000000L,};
    SimpleCharStream input_stream;
    private final int[] jjrounds=new int[30];
    private final int[] jjstateSet=new int[60];
    private final StringBuilder jjimage=new StringBuilder();
    private StringBuilder image=jjimage;
    private int jjimageLen;
    char curChar;
    /** Constructor. */
    public QUTELexer(SimpleCharStream stream) {
        input_stream=stream;
    }

    /** Constructor. */
    public QUTELexer(SimpleCharStream stream,int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    // Method to reinitialize the jjrounds array.
    private void ReInitRounds() {
        int i;
        jjround=0x80000001;
        for(i=30; 
        i-->0; 
        ) jjrounds[i]=0x80000000; 
    }

    /** Switch to specified lex state. */
    // TODO: Switch this to using enums
    public void SwitchTo(int lexState) {
        if (lexState>=3||lexState<0) {
            throw new RuntimeException("Switch to invalid lexical state: "+lexState);
        }
        this.curLexState=lexState;
    }

    /** Get the next Token. */
    public Token getNextToken() {
        Token specialToken=null;
        Token matchedToken;
        int curPos=0;
        EOFLoop:
        while (true) {
            try {
                curChar=input_stream.BeginToken();
            }
            catch(java.io.IOException e) {
                jjmatchedKind=0;
                matchedToken=jjFillToken();
                matchedToken.specialToken=specialToken;
                return matchedToken;
            }
            image=jjimage;
            image.setLength(0);
            jjimageLen=0;
            while (true) {
                switch(curLexState) {
                    case 0:
                    jjmatchedKind=0x7FFFFFFF;
                    jjmatchedPos=0;
                    curPos=jjMoveStringLiteralDfa0_QUTE_TEXT();
                    break;
                    case 1:
                    jjmatchedKind=0x7FFFFFFF;
                    jjmatchedPos=0;
                    curPos=jjMoveStringLiteralDfa0_QUTE_EXPRESSION();
                    break;
                    case 2:
                    jjmatchedKind=0x7FFFFFFF;
                    jjmatchedPos=0;
                    curPos=jjMoveStringLiteralDfa0_IN_COMMENT();
                    break;
                }
                if (jjmatchedKind!=0x7FFFFFFF) {
                    if (jjmatchedPos+1<curPos) input_stream.backup(curPos-jjmatchedPos-1);
                    if ((jjtoToken[jjmatchedKind>>6]&(1L<<(jjmatchedKind&077)))!=0L) {
                        matchedToken=jjFillToken();
                        matchedToken.specialToken=specialToken;
                        TokenLexicalActions(matchedToken);
                        jjmatchedKind=matchedToken.kind;
                        if (jjnewLexState[jjmatchedKind]!=-1) {
                            curLexState=jjnewLexState[jjmatchedKind];
                        }
                        return matchedToken;
                    }
                    else if ((jjtoSkip[jjmatchedKind>>6]&(1L<<(jjmatchedKind&077)))!=0L) {
                        if ((jjtoSpecial[jjmatchedKind>>6]&(1L<<(jjmatchedKind&077)))!=0L) {
                            matchedToken=jjFillToken();
                            matchedToken.setUnparsed(true);
                            if (specialToken==null) {
                                specialToken=matchedToken;
                            }
                            else {
                                matchedToken.specialToken=specialToken;
                                specialToken=(specialToken.next=matchedToken);
                            }
                            TokenLexicalActions(matchedToken);
                        }
                        else TokenLexicalActions(null);
                        if (jjnewLexState[jjmatchedKind]!=-1) curLexState=jjnewLexState[jjmatchedKind];
                        continue EOFLoop;
                    }
                    jjimageLen+=jjmatchedPos+1;
                    if (jjnewLexState[jjmatchedKind]!=-1) curLexState=jjnewLexState[jjmatchedKind];
                    curPos=0;
                    jjmatchedKind=0x7FFFFFFF;
                    try {
                        curChar=input_stream.readChar();
                        continue;
                    }
                    catch(java.io.IOException e1) {
                    }
                }
                int error_line=input_stream.getEndLine();
                int error_column=input_stream.getEndColumn();
                String error_after=null;
                boolean EOFSeen=false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                }
                catch(java.io.IOException e1) {
                    EOFSeen=true;
                    error_after=curPos<=1?"":
                    input_stream.GetImage();
                    if (curChar=='\n'||curChar=='\r') {
                        error_line++;
                        error_column=0;
                    }
                    else error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after=curPos<=1?"":
                    input_stream.GetImage();
                }
                throw new LexicalException(EOFSeen,curLexState,error_line,error_column,error_after,curChar,inputSource,LexicalException.LEXICAL_ERROR);
            }
        }
    }

    void TokenLexicalActions(Token matchedToken) {
        switch(jjmatchedKind) {
            default:
            break;
        }
    }

    Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        curTokenImage=input_stream.GetImage();
        beginLine=input_stream.getBeginLine();
        beginColumn=input_stream.getBeginColumn();
        endLine=input_stream.getEndLine();
        endColumn=input_stream.getEndColumn();
        t=Token.newToken(jjmatchedKind,curTokenImage);
        t.beginLine=beginLine;
        t.endLine=endLine;
        t.beginColumn=beginColumn;
        t.endColumn=endColumn;
        t.setInputSource(this.inputSource);
        return t;
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state]!=jjround) {
            jjstateSet[jjnewStateCnt++]=state;
            jjrounds[state]=jjround;
        }
    }

    private void jjAddStates(int start,int end) {
        do {
            jjstateSet[jjnewStateCnt++]=jjnextStates[start];
        }
        while (start++!=end);
    }

    private void jjCheckNAddTwoStates(int state1,int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start,int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        }
        while (start++!=end);
    }

    private void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start+1]);
    }

    private static boolean jjCanMove_0(int hiByte,int i1,int i2,long l1,long l2) {
        switch(hiByte) {
            case 0:
            return(jjbitVec2[i2]&l2)!=0L;
            default:
            if ((jjbitVec0[i1]&l1)!=0L) {
                return(jjbitVec1[i2]&l2)!=0L;
            }
            return false;
        }
    }

    private int jjStopAtPos(int pos,int kind) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        return pos+1;
    }

    static final long[] jjbitVec0={0xfffffffffffffffeL,0xffffffffffffffffL,0xffffffffffffffffL,0xffffffffffffffffL};
    static final long[] jjbitVec1={0xffffffffffffffffL,0xffffffffffffffffL,0xffffffffffffffffL,0xffffffffffffffffL};
    static final long[] jjbitVec2={0x0L,0x0L,0xffffffffffffffffL,0xffffffffffffffffL};
    private int jjStartNfa_QUTE_TEXT(int pos,long active0) {
        return jjMoveNfa_QUTE_TEXT(jjStopStringLiteralDfa_QUTE_TEXT(pos,active0),pos+1);
    }

    private final int jjStopStringLiteralDfa_QUTE_TEXT(int pos,long active0) {
        switch(pos) {
            case 0:
            if ((active0&0x10d00000L)!=0L) return 7;
            return-1;
            case 1:
            if ((active0&0xc00000L)!=0L) return 27;
            return-1;
            case 2:
            if ((active0&0x400000L)!=0L) return 30;
            return-1;
            case 3:
            if ((active0&0x400000L)!=0L) return 31;
            return-1;
            default:
            return-1;
        }
    }

    private int jjStartNfaWithStates_QUTE_TEXT(int pos,int kind,int state) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            return pos+1;
        }
        return jjMoveNfa_QUTE_TEXT(state,pos+1);
    }

    private int jjMoveStringLiteralDfa0_QUTE_TEXT() {
        switch(curChar) {
            case 123:
            jjmatchedKind=20;
            return jjMoveStringLiteralDfa1_QUTE_TEXT(0x10c00000L);
            default:
            return jjMoveNfa_QUTE_TEXT(3,0);
        }
    }

    private int jjMoveStringLiteralDfa1_QUTE_TEXT(long active0) {
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_QUTE_TEXT(0,active0);
            return 1;
        }
        switch(curChar) {
            case 33:
            if ((active0&0x10000000L)!=0L) return jjStopAtPos(1,28);
            break;
            case 47:
            return jjMoveStringLiteralDfa2_QUTE_TEXT(active0,0xc00000L);
            default:
            break;
        }
        return jjStartNfa_QUTE_TEXT(0,active0);
    }

    private int jjMoveStringLiteralDfa2_QUTE_TEXT(long old0,long active0) {
        active0=active0&old0;
        if ((active0)==0L) return jjStartNfa_QUTE_TEXT(0,old0);
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_QUTE_TEXT(1,active0);
            return 2;
        }
        switch(curChar) {
            case 105:
            return jjMoveStringLiteralDfa3_QUTE_TEXT(active0,0x400000L);
            case 125:
            if ((active0&0x800000L)!=0L) return jjStopAtPos(2,23);
            break;
            default:
            break;
        }
        return jjStartNfa_QUTE_TEXT(1,active0);
    }

    private int jjMoveStringLiteralDfa3_QUTE_TEXT(long old0,long active0) {
        active0=active0&old0;
        if ((active0)==0L) return jjStartNfa_QUTE_TEXT(1,old0);
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_QUTE_TEXT(2,active0);
            return 3;
        }
        switch(curChar) {
            case 102:
            return jjMoveStringLiteralDfa4_QUTE_TEXT(active0,0x400000L);
            default:
            break;
        }
        return jjStartNfa_QUTE_TEXT(2,active0);
    }

    private int jjMoveStringLiteralDfa4_QUTE_TEXT(long old0,long active0) {
        active0=active0&old0;
        if ((active0)==0L) return jjStartNfa_QUTE_TEXT(2,old0);
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_QUTE_TEXT(3,active0);
            return 4;
        }
        switch(curChar) {
            case 125:
            if ((active0&0x400000L)!=0L) return jjStopAtPos(4,22);
            break;
            default:
            break;
        }
        return jjStartNfa_QUTE_TEXT(3,active0);
    }

    private int jjMoveNfa_QUTE_TEXT(int startState,int curPos) {
        int startsAt=0;
        jjnewStateCnt=30;
        int i=1;
        jjstateSet[0]=startState;
        int kind=0x7fffffff;
        while (true) {
            if (++jjround==0x7fffffff) {
                ReInitRounds();
            }
            if (curChar<64) {
                long l=1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 7:
                        if (curChar==47) jjstateSet[jjnewStateCnt++]=27;
                        else if (curChar==35) jjstateSet[jjnewStateCnt++]=25;
                        if (curChar==35) jjstateSet[jjnewStateCnt++]=22;
                        if (curChar==35) jjstateSet[jjnewStateCnt++]=15;
                        if (curChar==35) jjstateSet[jjnewStateCnt++]=6;
                        break;
                        case 3:
                        case 2:
                        if (kind>19) kind=19;
                        jjCheckNAddTwoStates(1,2);
                        break;
                        case 31:
                        case 28:
                        if ((0x100002600L&l)!=0L) jjCheckNAddTwoStates(28,29);
                        break;
                        case 5:
                        if ((0x100002600L&l)==0L) break;
                        if (kind>21) kind=21;
                        jjCheckNAdd(5);
                        break;
                        case 9:
                        if ((0x100002600L&l)!=0L) jjCheckNAddTwoStates(9,12);
                        break;
                        case 11:
                        if ((0x100002600L&l)==0L) break;
                        if (kind>24) kind=24;
                        jjCheckNAdd(11);
                        break;
                        case 16:
                        if (curChar==35) jjCheckNAdd(15);
                        break;
                        case 18:
                        if ((0x100002600L&l)!=0L) jjCheckNAddTwoStates(18,19);
                        break;
                        case 23:
                        if (curChar==35) jjCheckNAdd(22);
                        break;
                        case 24:
                        if (curChar==35) jjCheckNAdd(25);
                        break;
                        case 26:
                        if (curChar==47) jjCheckNAdd(27);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 3:
                        if ((0xf7ffffffffffffffL&l)!=0L) {
                            if (kind>19) kind=19;
                            jjCheckNAddTwoStates(1,2);
                        }
                        else if (curChar==123) jjAddStates(0,4);
                        if (curChar==92) jjstateSet[jjnewStateCnt++]=0;
                        break;
                        case 31:
                        if ((0x7fffffe07fffffeL&l)!=0L) jjCheckNAddStates(5,7);
                        else if (curChar==125) {
                            if (kind>27) kind=27;
                        }
                        break;
                        case 0:
                        if (curChar!=123) break;
                        if (kind>19) kind=19;
                        jjCheckNAddTwoStates(1,2);
                        break;
                        case 1:
                        if (curChar==92) jjCheckNAdd(0);
                        break;
                        case 2:
                        if ((0xf7ffffffffffffffL&l)==0L) break;
                        if (kind>19) kind=19;
                        jjCheckNAddTwoStates(1,2);
                        break;
                        case 4:
                        if (curChar==102) jjstateSet[jjnewStateCnt++]=5;
                        break;
                        case 6:
                        if (curChar==105) jjstateSet[jjnewStateCnt++]=4;
                        break;
                        case 8:
                        if (curChar==101) jjstateSet[jjnewStateCnt++]=9;
                        break;
                        case 10:
                        if (curChar==102) jjstateSet[jjnewStateCnt++]=11;
                        break;
                        case 12:
                        if (curChar==105) jjstateSet[jjnewStateCnt++]=10;
                        break;
                        case 13:
                        if (curChar==115) jjstateSet[jjnewStateCnt++]=8;
                        break;
                        case 14:
                        if (curChar==108) jjstateSet[jjnewStateCnt++]=13;
                        break;
                        case 15:
                        if (curChar==101) jjstateSet[jjnewStateCnt++]=14;
                        break;
                        case 17:
                        if (curChar==101) jjAddStates(8,9);
                        break;
                        case 19:
                        if (curChar==125&&kind>25) kind=25;
                        break;
                        case 20:
                        if (curChar==115) jjstateSet[jjnewStateCnt++]=17;
                        break;
                        case 21:
                        if (curChar==108) jjstateSet[jjnewStateCnt++]=20;
                        break;
                        case 22:
                        if (curChar==101) jjstateSet[jjnewStateCnt++]=21;
                        break;
                        case 25:
                        if ((0x7fffffe07fffffeL&l)==0L) break;
                        if (kind>26) kind=26;
                        jjCheckNAdd(25);
                        break;
                        case 27:
                        if ((0x7fffffe07fffffeL&l)!=0L) jjCheckNAddStates(5,7);
                        break;
                        case 29:
                        if (curChar==125&&kind>27) kind=27;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte=(int)(curChar>>8);
                int i1=hiByte>>6;
                long l1=1L<<(hiByte&077);
                int i2=(curChar&0xff)>>6;
                long l2=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 3:
                        case 2:
                        if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
                        if (kind>19) kind=19;
                        jjCheckNAddTwoStates(1,2);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind=kind;
                jjmatchedPos=curPos;
                kind=0x7fffffff;
            }
            ++curPos;
            if ((i=jjnewStateCnt)==(startsAt=30-(jjnewStateCnt=startsAt))) return curPos;
            try {
                curChar=input_stream.readChar();
            }
            catch(java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjStartNfa_QUTE_EXPRESSION(int pos,long active0) {
        return jjMoveNfa_QUTE_EXPRESSION(jjStopStringLiteralDfa_QUTE_EXPRESSION(pos,active0),pos+1);
    }

    private final int jjStopStringLiteralDfa_QUTE_EXPRESSION(int pos,long active0) {
        switch(pos) {
            default:
            return-1;
        }
    }

    private int jjStartNfaWithStates_QUTE_EXPRESSION(int pos,int kind,int state) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            return pos+1;
        }
        return jjMoveNfa_QUTE_EXPRESSION(state,pos+1);
    }

    private int jjMoveStringLiteralDfa0_QUTE_EXPRESSION() {
        switch(curChar) {
            case 40:
            return jjStopAtPos(0,14);
            case 41:
            return jjStopAtPos(0,15);
            case 47:
            return jjMoveStringLiteralDfa1_QUTE_EXPRESSION(0x100000000L);
            case 125:
            return jjStopAtPos(0,31);
            default:
            return jjMoveNfa_QUTE_EXPRESSION(1,0);
        }
    }

    private int jjMoveStringLiteralDfa1_QUTE_EXPRESSION(long active0) {
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_QUTE_EXPRESSION(0,active0);
            return 1;
        }
        switch(curChar) {
            case 125:
            if ((active0&0x100000000L)!=0L) return jjStopAtPos(1,32);
            break;
            default:
            break;
        }
        return jjStartNfa_QUTE_EXPRESSION(0,active0);
    }

    private int jjMoveNfa_QUTE_EXPRESSION(int startState,int curPos) {
        int startsAt=0;
        jjnewStateCnt=23;
        int i=1;
        jjstateSet[0]=startState;
        int kind=0x7fffffff;
        while (true) {
            if (++jjround==0x7fffffff) {
                ReInitRounds();
            }
            if (curChar<64) {
                long l=1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 1:
                        if ((0x3fe000000000000L&l)!=0L) {
                            if (kind>13) kind=13;
                            jjAddStates(10,12);
                        }
                        else if ((0x100002600L&l)!=0L) {
                            if (kind>1) kind=1;
                            jjCheckNAdd(0);
                        }
                        else if (curChar==48) {
                            if (kind>13) kind=13;
                            jjAddStates(13,14);
                        }
                        else if (curChar==45) jjAddStates(15,16);
                        else if (curChar==34) jjCheckNAddStates(17,20);
                        break;
                        case 0:
                        if ((0x100002600L&l)==0L) break;
                        if (kind>1) kind=1;
                        jjCheckNAdd(0);
                        break;
                        case 2:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>4) kind=4;
                        jjCheckNAdd(2);
                        break;
                        case 3:
                        if (curChar==34) jjCheckNAddStates(17,20);
                        break;
                        case 5:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=6;
                        break;
                        case 6:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=7;
                        break;
                        case 7:
                        if ((0x3ff000000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=8;
                        break;
                        case 8:
                        if ((0x3ff000000000000L&l)!=0L) jjCheckNAddStates(17,20);
                        break;
                        case 11:
                        if ((0x800400000000L&l)!=0L) jjCheckNAddStates(17,20);
                        break;
                        case 12:
                        if ((0xfffffffb00000000L&l)!=0L) jjCheckNAddStates(17,20);
                        break;
                        case 13:
                        if (curChar==34&&kind>8) kind=8;
                        break;
                        case 14:
                        if (curChar==45) jjCheckNAddTwoStates(15,22);
                        break;
                        case 15:
                        if ((0x3fe000000000000L&l)==0L) break;
                        if (kind>13) kind=13;
                        jjCheckNAddStates(10,12);
                        break;
                        case 16:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>13) kind=13;
                        jjCheckNAddStates(10,12);
                        break;
                        case 17:
                        if (curChar==46) jjstateSet[jjnewStateCnt++]=18;
                        break;
                        case 18:
                        if ((0x3ff000000000000L&l)==0L) break;
                        if (kind>13) kind=13;
                        jjCheckNAddTwoStates(18,19);
                        break;
                        case 20:
                        if ((0x280000000000L&l)!=0L) jjstateSet[jjnewStateCnt++]=21;
                        break;
                        case 21:
                        if ((0x3fe000000000000L&l)==0L) break;
                        if (kind>13) kind=13;
                        jjCheckNAdd(21);
                        break;
                        case 22:
                        if (curChar!=48) break;
                        if (kind>13) kind=13;
                        jjCheckNAddTwoStates(17,19);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 1:
                        if ((0x7fffffe87fffffeL&l)==0L) break;
                        if (kind>4) kind=4;
                        jjCheckNAdd(2);
                        break;
                        case 2:
                        if ((0x7fffffe87fffffeL&l)==0L) break;
                        if (kind>4) kind=4;
                        jjCheckNAdd(2);
                        break;
                        case 4:
                        if (curChar==117) jjstateSet[jjnewStateCnt++]=5;
                        break;
                        case 5:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]=6;
                        break;
                        case 6:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]=7;
                        break;
                        case 7:
                        if ((0x7e0000007eL&l)!=0L) jjstateSet[jjnewStateCnt++]=8;
                        break;
                        case 8:
                        if ((0x7e0000007eL&l)!=0L) jjCheckNAddStates(17,20);
                        break;
                        case 9:
                        if (curChar==92) jjstateSet[jjnewStateCnt++]=4;
                        break;
                        case 10:
                        if (curChar==92) jjstateSet[jjnewStateCnt++]=11;
                        break;
                        case 11:
                        if ((0x14404410000000L&l)!=0L) jjCheckNAddStates(17,20);
                        break;
                        case 12:
                        if ((0xffffffffefffffffL&l)!=0L) jjCheckNAddStates(17,20);
                        break;
                        case 19:
                        if ((0x2000000020L&l)!=0L) jjstateSet[jjnewStateCnt++]=20;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte=(int)(curChar>>8);
                int i1=hiByte>>6;
                long l1=1L<<(hiByte&077);
                int i2=(curChar&0xff)>>6;
                long l2=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 12:
                        if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjCheckNAddStates(17,20);
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind=kind;
                jjmatchedPos=curPos;
                kind=0x7fffffff;
            }
            ++curPos;
            if ((i=jjnewStateCnt)==(startsAt=23-(jjnewStateCnt=startsAt))) return curPos;
            try {
                curChar=input_stream.readChar();
            }
            catch(java.io.IOException e) {
                return curPos;
            }
        }
    }

    private int jjStartNfa_IN_COMMENT(int pos,long active0) {
        return jjMoveNfa_IN_COMMENT(jjStopStringLiteralDfa_IN_COMMENT(pos,active0),pos+1);
    }

    private final int jjStopStringLiteralDfa_IN_COMMENT(int pos,long active0) {
        switch(pos) {
            case 0:
            if ((active0&0x40000000L)!=0L) {
                jjmatchedKind=29;
                return-1;
            }
            return-1;
            case 1:
            if ((active0&0x40000000L)!=0L) {
                if (jjmatchedPos==0) {
                    jjmatchedKind=29;
                    jjmatchedPos=0;
                }
                return-1;
            }
            return-1;
            default:
            return-1;
        }
    }

    private int jjStartNfaWithStates_IN_COMMENT(int pos,int kind,int state) {
        jjmatchedKind=kind;
        jjmatchedPos=pos;
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            return pos+1;
        }
        return jjMoveNfa_IN_COMMENT(state,pos+1);
    }

    private int jjMoveStringLiteralDfa0_IN_COMMENT() {
        switch(curChar) {
            case 33:
            return jjMoveStringLiteralDfa1_IN_COMMENT(0x40000000L);
            default:
            return jjMoveNfa_IN_COMMENT(0,0);
        }
    }

    private int jjMoveStringLiteralDfa1_IN_COMMENT(long active0) {
        try {
            curChar=input_stream.readChar();
        }
        catch(java.io.IOException e) {
            jjStopStringLiteralDfa_IN_COMMENT(0,active0);
            return 1;
        }
        switch(curChar) {
            case 125:
            if ((active0&0x40000000L)!=0L) return jjStopAtPos(1,30);
            break;
            default:
            break;
        }
        return jjStartNfa_IN_COMMENT(0,active0);
    }

    private int jjMoveNfa_IN_COMMENT(int startState,int curPos) {
        int startsAt=0;
        jjnewStateCnt=1;
        int i=1;
        jjstateSet[0]=startState;
        int kind=0x7fffffff;
        while (true) {
            if (++jjround==0x7fffffff) {
                ReInitRounds();
            }
            if (curChar<64) {
                long l=1L<<curChar;
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        kind=29;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else if (curChar<128) {
                long l=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        kind=29;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            else {
                int hiByte=(int)(curChar>>8);
                int i1=hiByte>>6;
                long l1=1L<<(hiByte&077);
                int i2=(curChar&0xff)>>6;
                long l2=1L<<(curChar&077);
                do {
                    switch(jjstateSet[--i]) {
                        case 0:
                        if (jjCanMove_0(hiByte,i1,i2,l1,l2)&&kind>29) kind=29;
                        break;
                        default:
                        break;
                    }
                }
                while (i!=startsAt);
            }
            if (kind!=0x7fffffff) {
                jjmatchedKind=kind;
                jjmatchedPos=curPos;
                kind=0x7fffffff;
            }
            ++curPos;
            if ((i=jjnewStateCnt)==(startsAt=1-(jjnewStateCnt=startsAt))) return curPos;
            try {
                curChar=input_stream.readChar();
            }
            catch(java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates={7,16,23,24,26,27,28,29,18,19,16,17,19,17,19,15,22,9,10,12,13};
}
