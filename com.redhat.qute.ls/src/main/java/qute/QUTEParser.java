/* Generated by: JavaCC 21 Parser Generator. QUTEParser.java */
package qute;

import qute.ast.*;
import java.util.*;
import java.util.concurrent.CancellationException;
import java.util.logging.*;
import java.io.*;
@SuppressWarnings("unused")
public class QUTEParser implements QUTEConstants {
    private static final java.util.logging.Logger LOGGER=Logger.getLogger(QUTEParser.class.getName());
    public static void setLogLevel(Level level) {
        LOGGER.setLevel(level);
        Logger.getGlobal().getParent().getHandlers()[0].setLevel(level);
    }

    Token current_token;
    private Token lastParsedToken;
    //private Token nextToken;
    private boolean cancelled;
    public void cancel() {
        cancelled=true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public QUTELexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public QUTEParser(String inputSource, CharSequence content) {
        this(new QUTELexer(inputSource, content));
    }

    public QUTEParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    public QUTEParser(Reader reader) {
        this(new QUTELexer(reader));
    }

    /** Constructor with user supplied Lexer. */
    public QUTEParser(QUTELexer lexer) {
        token_source=lexer;
        current_token=new Token();
    }

    final public Token getNextToken() {
        if (current_token.getNext()!=null) current_token=current_token.getNext();
        else {
            Token nextToken=token_source.getNextToken();
            current_token.setNext(nextToken);
            current_token=nextToken;
        }
        return current_token;
    }

    /** Get the specific Token index ahead in the stream. */
    final public Token getToken(int index) {
        Token t=current_token;
        for (int i=0; i<index; i++) {
            if (t.getNext()!=null) t=t.getNext();
            else {
                Token nextToken=token_source.getNextToken();
                t.setNext(nextToken);
                t=nextToken;
            }
        }
        return t;
    }

    private TokenType nextTokenType() {
        if (current_token.getNext()==null) {
            Token nextToken=token_source.getNextToken();
            current_token.setNext(nextToken);
        }
        return current_token.getNext().getType();
    }

    //=================================
    // Start of methods for BNF Productions
    //This code is generated by the ParserProductions.java.ftl template. 
    //=================================
    static private final EnumSet<TokenType>first_set$QEL_javacc$line_132$column_5=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>final_set$QEL_javacc$line_132$column_5=EnumSet.of(TokenType.DOT_DOT, TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 130
    final public void Expression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 130 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 132 of QEL.javacc
        boolean Expression1forced=this.tolerantParsing&&currentNTForced;
        Expression Expression1=null;
        if (buildTree) {
            Expression1=new Expression();
            Token start=getToken(1);
            Expression1.setBeginLine(start.beginLine);
            Expression1.setBeginColumn(start.beginColumn);
            Expression1.setInputSource(this.getInputSource());
            openNodeScope(Expression1);
        }
        ParseException parseException1=null;
        int callStackSize1=callStack.size();
        try {
            // Code for OrExpression specified on line 132 of QEL.javacc
            pushOntoCallStack("Expression", "QEL.javacc", 132);
            boolean boolean2=currentNTForced;
            currentNTForced=false;
            try {
                OrExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean2;
            }
            if (trace_enabled) LOGGER.info("Exiting normally from Expression");
        }
        catch(ParseException e) {
            parseException1=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException1==null) {
                restoreCallStack(callStackSize1);
            }
            if (buildTree) {
                if (parseException1==null) {
                    Expression1.setEndLine(current_token.getEndLine());
                    Expression1.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Expression1, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException1: "+parseException1.getMessage());
                    Expression1.setParseException(parseException1);
                    if (Expression1forced) {
                        restoreCallStack(callStackSize1);
                        Token virtualToken=insertVirtualToken(TokenType.DOT_DOT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in Expression\n";
                        message+=parseException1.getMessage();
                        addParsingProblem(new ParsingProblem(message, Expression1));
                        closeNodeScope(Expression1, true);
                    }
                    else {
                        closeNodeScope(Expression1, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException1");
                        throw parseException1;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>OrExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>OrExpression_FINAL_SET=EnumSet.of(TokenType.DOT_DOT, TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 135
    final public void OrExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 135 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 137 of QEL.javacc
        boolean OrExpression2forced=this.tolerantParsing&&currentNTForced;
        OrExpression OrExpression2=null;
        if (buildTree) {
            OrExpression2=new OrExpression();
            Token start=getToken(1);
            OrExpression2.setBeginLine(start.beginLine);
            OrExpression2.setBeginColumn(start.beginColumn);
            OrExpression2.setInputSource(this.getInputSource());
            openNodeScope(OrExpression2);
        }
        ParseException parseException2=null;
        int callStackSize3=callStack.size();
        try {
            // Code for AndExpression specified on line 137 of QEL.javacc
            pushOntoCallStack("OrExpression", "QEL.javacc", 137);
            boolean boolean4=currentNTForced;
            currentNTForced=false;
            try {
                AndExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean4;
            }
            // Code for expansion specified on line 140 of QEL.javacc
            ZeroOrMore$QEL_javacc$line_140$column_6:
            while (true) {
                TokenType tokentype5=nextTokenType();
                if (!(tokentype5==TokenType.OR||tokentype5==TokenType.OR2)) {
                    break ZeroOrMore$QEL_javacc$line_140$column_6;
                }
                // Code for expansion specified on line 139 of QEL.javacc
                // Code for expansion specified on line 139 of QEL.javacc
                switch(nextTokenType()) {
                    case OR:
                    // Code for expansion specified on line 139 of QEL.javacc
                    // Code for expansion specified on line 139 of QEL.javacc
                    consumeToken(TokenType.OR, false);
                    break;
                    case OR2:
                    // Code for expansion specified on line 139 of QEL.javacc
                    // Code for expansion specified on line 139 of QEL.javacc
                    consumeToken(TokenType.OR2, false);
                    break;
                    default:
                    pushOntoCallStack("OrExpression", "QEL.javacc", 139);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.OR, TokenType.OR2), callStack);
                }
                // Code for AndExpression specified on line 139 of QEL.javacc
                pushOntoCallStack("OrExpression", "QEL.javacc", 139);
                boolean boolean6=currentNTForced;
                currentNTForced=false;
                try {
                    AndExpression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean6;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from OrExpression");
        }
        catch(ParseException e) {
            parseException2=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException2==null) {
                restoreCallStack(callStackSize3);
            }
            if (buildTree) {
                if (parseException2==null) {
                    OrExpression2.setEndLine(current_token.getEndLine());
                    OrExpression2.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(OrExpression2, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException2: "+parseException2.getMessage());
                    OrExpression2.setParseException(parseException2);
                    if (OrExpression2forced) {
                        restoreCallStack(callStackSize3);
                        Token virtualToken=insertVirtualToken(TokenType.DOT_DOT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in OrExpression\n";
                        message+=parseException2.getMessage();
                        addParsingProblem(new ParsingProblem(message, OrExpression2));
                        closeNodeScope(OrExpression2, true);
                    }
                    else {
                        closeNodeScope(OrExpression2, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException2");
                        throw parseException2;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>AndExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>AndExpression_FINAL_SET=EnumSet.of(TokenType.DOT_DOT, TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 143
    final public void AndExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 143 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 145 of QEL.javacc
        boolean AndExpression3forced=this.tolerantParsing&&currentNTForced;
        AndExpression AndExpression3=null;
        if (buildTree) {
            AndExpression3=new AndExpression();
            Token start=getToken(1);
            AndExpression3.setBeginLine(start.beginLine);
            AndExpression3.setBeginColumn(start.beginColumn);
            AndExpression3.setInputSource(this.getInputSource());
            openNodeScope(AndExpression3);
        }
        ParseException parseException3=null;
        int callStackSize7=callStack.size();
        try {
            // Code for EqualityExpression specified on line 145 of QEL.javacc
            pushOntoCallStack("AndExpression", "QEL.javacc", 145);
            boolean boolean8=currentNTForced;
            currentNTForced=false;
            try {
                EqualityExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean8;
            }
            // Code for expansion specified on line 148 of QEL.javacc
            ZeroOrMore$QEL_javacc$line_148$column_6:
            while (true) {
                TokenType tokentype9=nextTokenType();
                if (!(tokentype9==TokenType.AND||tokentype9==TokenType.AND2)) {
                    break ZeroOrMore$QEL_javacc$line_148$column_6;
                }
                // Code for expansion specified on line 147 of QEL.javacc
                // Code for expansion specified on line 147 of QEL.javacc
                switch(nextTokenType()) {
                    case AND:
                    // Code for expansion specified on line 147 of QEL.javacc
                    // Code for expansion specified on line 147 of QEL.javacc
                    consumeToken(TokenType.AND, false);
                    break;
                    case AND2:
                    // Code for expansion specified on line 147 of QEL.javacc
                    // Code for expansion specified on line 147 of QEL.javacc
                    consumeToken(TokenType.AND2, false);
                    break;
                    default:
                    pushOntoCallStack("AndExpression", "QEL.javacc", 147);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.AND, TokenType.AND2), callStack);
                }
                // Code for EqualityExpression specified on line 147 of QEL.javacc
                pushOntoCallStack("AndExpression", "QEL.javacc", 147);
                boolean boolean10=currentNTForced;
                currentNTForced=false;
                try {
                    EqualityExpression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean10;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AndExpression");
        }
        catch(ParseException e) {
            parseException3=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException3==null) {
                restoreCallStack(callStackSize7);
            }
            if (buildTree) {
                if (parseException3==null) {
                    AndExpression3.setEndLine(current_token.getEndLine());
                    AndExpression3.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AndExpression3, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException3: "+parseException3.getMessage());
                    AndExpression3.setParseException(parseException3);
                    if (AndExpression3forced) {
                        restoreCallStack(callStackSize7);
                        Token virtualToken=insertVirtualToken(TokenType.DOT_DOT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in AndExpression\n";
                        message+=parseException3.getMessage();
                        addParsingProblem(new ParsingProblem(message, AndExpression3));
                        closeNodeScope(AndExpression3, true);
                    }
                    else {
                        closeNodeScope(AndExpression3, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException3");
                        throw parseException3;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>EqualityExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>EqualityExpression_FINAL_SET=EnumSet.of(TokenType.DOT_DOT, TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 151
    final public void EqualityExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 151 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 153 of QEL.javacc
        boolean EqualityExpression4forced=this.tolerantParsing&&currentNTForced;
        EqualityExpression EqualityExpression4=null;
        if (buildTree) {
            EqualityExpression4=new EqualityExpression();
            Token start=getToken(1);
            EqualityExpression4.setBeginLine(start.beginLine);
            EqualityExpression4.setBeginColumn(start.beginColumn);
            EqualityExpression4.setInputSource(this.getInputSource());
            openNodeScope(EqualityExpression4);
        }
        ParseException parseException4=null;
        int callStackSize11=callStack.size();
        try {
            // Code for RelationalExpression specified on line 153 of QEL.javacc
            pushOntoCallStack("EqualityExpression", "QEL.javacc", 153);
            boolean boolean12=currentNTForced;
            currentNTForced=false;
            try {
                RelationalExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean12;
            }
            // Code for expansion specified on line 154 of QEL.javacc
            TokenType tokentype14=nextTokenType();
            if (tokentype14==TokenType.EQUALS||tokentype14==TokenType.EQUALS2||tokentype14==TokenType.EQUALS3) {
                // Code for expansion specified on line 155 of QEL.javacc
                // Code for expansion specified on line 155 of QEL.javacc
                switch(nextTokenType()) {
                    case EQUALS:
                    // Code for expansion specified on line 155 of QEL.javacc
                    // Code for expansion specified on line 155 of QEL.javacc
                    consumeToken(TokenType.EQUALS, false);
                    break;
                    case EQUALS2:
                    // Code for expansion specified on line 155 of QEL.javacc
                    // Code for expansion specified on line 155 of QEL.javacc
                    consumeToken(TokenType.EQUALS2, false);
                    break;
                    case EQUALS3:
                    // Code for expansion specified on line 155 of QEL.javacc
                    // Code for expansion specified on line 155 of QEL.javacc
                    consumeToken(TokenType.EQUALS3, false);
                    break;
                    default:
                    pushOntoCallStack("EqualityExpression", "QEL.javacc", 155);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.EQUALS, TokenType.EQUALS2, TokenType.EQUALS3), callStack);
                }
                // Code for RelationalExpression specified on line 156 of QEL.javacc
                pushOntoCallStack("EqualityExpression", "QEL.javacc", 156);
                boolean boolean13=currentNTForced;
                currentNTForced=false;
                try {
                    RelationalExpression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean13;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from EqualityExpression");
        }
        catch(ParseException e) {
            parseException4=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException4==null) {
                restoreCallStack(callStackSize11);
            }
            if (buildTree) {
                if (parseException4==null) {
                    EqualityExpression4.setEndLine(current_token.getEndLine());
                    EqualityExpression4.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EqualityExpression4, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException4: "+parseException4.getMessage());
                    EqualityExpression4.setParseException(parseException4);
                    if (EqualityExpression4forced) {
                        restoreCallStack(callStackSize11);
                        Token virtualToken=insertVirtualToken(TokenType.DOT_DOT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in EqualityExpression\n";
                        message+=parseException4.getMessage();
                        addParsingProblem(new ParsingProblem(message, EqualityExpression4));
                        closeNodeScope(EqualityExpression4, true);
                    }
                    else {
                        closeNodeScope(EqualityExpression4, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException4");
                        throw parseException4;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>RelationalExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>RelationalExpression_FINAL_SET=EnumSet.of(TokenType.DOT_DOT, TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 160
    final public void RelationalExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 160 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 162 of QEL.javacc
        boolean RelationalExpression5forced=this.tolerantParsing&&currentNTForced;
        RelationalExpression RelationalExpression5=null;
        if (buildTree) {
            RelationalExpression5=new RelationalExpression();
            Token start=getToken(1);
            RelationalExpression5.setBeginLine(start.beginLine);
            RelationalExpression5.setBeginColumn(start.beginColumn);
            RelationalExpression5.setInputSource(this.getInputSource());
            openNodeScope(RelationalExpression5);
        }
        ParseException parseException5=null;
        int callStackSize15=callStack.size();
        try {
            // Code for RangeExpression specified on line 162 of QEL.javacc
            pushOntoCallStack("RelationalExpression", "QEL.javacc", 162);
            boolean boolean16=currentNTForced;
            currentNTForced=false;
            try {
                RangeExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean16;
            }
            // Code for expansion specified on line 163 of QEL.javacc
            TokenType tokentype18=nextTokenType();
            if (tokentype18==TokenType.GT||tokentype18==TokenType.ALT_GT||tokentype18==TokenType.GE||tokentype18==TokenType.ALT_GE||tokentype18==TokenType.LT||tokentype18==TokenType.ALT_LT||tokentype18==TokenType.LE||tokentype18==TokenType.ALT_LE) {
                // Code for expansion specified on line 164 of QEL.javacc
                // Code for expansion specified on line 164 of QEL.javacc
                switch(nextTokenType()) {
                    case GT:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(TokenType.GT, false);
                    break;
                    case GE:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(TokenType.GE, false);
                    break;
                    case LT:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(TokenType.LT, false);
                    break;
                    case LE:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(TokenType.LE, false);
                    break;
                    case ALT_GT:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(TokenType.ALT_GT, false);
                    break;
                    case ALT_GE:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(TokenType.ALT_GE, false);
                    break;
                    case ALT_LE:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(TokenType.ALT_LE, false);
                    break;
                    case ALT_LT:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(TokenType.ALT_LT, false);
                    break;
                    default:
                    pushOntoCallStack("RelationalExpression", "QEL.javacc", 164);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.GT, TokenType.ALT_GT, TokenType.GE, TokenType.ALT_GE, TokenType.LT, TokenType.ALT_LT, TokenType.LE, TokenType.ALT_LE), callStack);
                }
                // Code for RangeExpression specified on line 165 of QEL.javacc
                pushOntoCallStack("RelationalExpression", "QEL.javacc", 165);
                boolean boolean17=currentNTForced;
                currentNTForced=false;
                try {
                    RangeExpression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean17;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from RelationalExpression");
        }
        catch(ParseException e) {
            parseException5=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException5==null) {
                restoreCallStack(callStackSize15);
            }
            if (buildTree) {
                if (parseException5==null) {
                    RelationalExpression5.setEndLine(current_token.getEndLine());
                    RelationalExpression5.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RelationalExpression5, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException5: "+parseException5.getMessage());
                    RelationalExpression5.setParseException(parseException5);
                    if (RelationalExpression5forced) {
                        restoreCallStack(callStackSize15);
                        Token virtualToken=insertVirtualToken(TokenType.DOT_DOT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in RelationalExpression\n";
                        message+=parseException5.getMessage();
                        addParsingProblem(new ParsingProblem(message, RelationalExpression5));
                        closeNodeScope(RelationalExpression5, true);
                    }
                    else {
                        closeNodeScope(RelationalExpression5, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException5");
                        throw parseException5;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>RangeExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>RangeExpression_FINAL_SET=EnumSet.of(TokenType.DOT_DOT, TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 169
    final public void RangeExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 169 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 171 of QEL.javacc
        boolean RangeExpression6forced=this.tolerantParsing&&currentNTForced;
        RangeExpression RangeExpression6=null;
        if (buildTree) {
            RangeExpression6=new RangeExpression();
            Token start=getToken(1);
            RangeExpression6.setBeginLine(start.beginLine);
            RangeExpression6.setBeginColumn(start.beginColumn);
            RangeExpression6.setInputSource(this.getInputSource());
            openNodeScope(RangeExpression6);
        }
        ParseException parseException6=null;
        int callStackSize19=callStack.size();
        try {
            // Code for AdditiveExpression specified on line 171 of QEL.javacc
            pushOntoCallStack("RangeExpression", "QEL.javacc", 171);
            boolean boolean20=currentNTForced;
            currentNTForced=false;
            try {
                AdditiveExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean20;
            }
            // Code for expansion specified on line 172 of QEL.javacc
            TokenType tokentype22=nextTokenType();
            if (tokentype22==TokenType.DOT_DOT) {
                // Code for expansion specified on line 173 of QEL.javacc
                // Code for expansion specified on line 173 of QEL.javacc
                consumeToken(TokenType.DOT_DOT, false);
                // Code for expansion specified on line 174 of QEL.javacc
                if (lookahead$QEL_javacc$line_175$column_20(INDEFINITE)) {
                    // Code for expansion specified on line 175 of QEL.javacc
                    // Code for AdditiveExpression specified on line 176 of QEL.javacc
                    pushOntoCallStack("RangeExpression", "QEL.javacc", 176);
                    boolean boolean21=currentNTForced;
                    currentNTForced=false;
                    try {
                        AdditiveExpression();
                    }
                    finally {
                        popCallStack();
                        currentNTForced=boolean21;
                    }
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from RangeExpression");
        }
        catch(ParseException e) {
            parseException6=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException6==null) {
                restoreCallStack(callStackSize19);
            }
            if (buildTree) {
                if (parseException6==null) {
                    RangeExpression6.setEndLine(current_token.getEndLine());
                    RangeExpression6.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RangeExpression6, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException6: "+parseException6.getMessage());
                    RangeExpression6.setParseException(parseException6);
                    if (RangeExpression6forced) {
                        restoreCallStack(callStackSize19);
                        Token virtualToken=insertVirtualToken(TokenType.DOT_DOT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in RangeExpression\n";
                        message+=parseException6.getMessage();
                        addParsingProblem(new ParsingProblem(message, RangeExpression6));
                        closeNodeScope(RangeExpression6, true);
                    }
                    else {
                        closeNodeScope(RangeExpression6, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException6");
                        throw parseException6;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>AdditiveExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>AdditiveExpression_FINAL_SET=EnumSet.of(TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 181
    final public void AdditiveExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 181 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 183 of QEL.javacc
        boolean AdditiveExpression7forced=this.tolerantParsing&&currentNTForced;
        AdditiveExpression AdditiveExpression7=null;
        if (buildTree) {
            AdditiveExpression7=new AdditiveExpression();
            Token start=getToken(1);
            AdditiveExpression7.setBeginLine(start.beginLine);
            AdditiveExpression7.setBeginColumn(start.beginColumn);
            AdditiveExpression7.setInputSource(this.getInputSource());
            openNodeScope(AdditiveExpression7);
        }
        ParseException parseException7=null;
        int callStackSize23=callStack.size();
        try {
            // Code for MultiplicativeExpression specified on line 183 of QEL.javacc
            pushOntoCallStack("AdditiveExpression", "QEL.javacc", 183);
            boolean boolean24=currentNTForced;
            currentNTForced=false;
            try {
                MultiplicativeExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean24;
            }
            // Code for expansion specified on line 188 of QEL.javacc
            ZeroOrMore$QEL_javacc$line_188$column_6:
            while (true) {
                if (!(lookahead$QEL_javacc$line_185$column_19(INDEFINITE))) {
                    break ZeroOrMore$QEL_javacc$line_188$column_6;
                }
                // Code for expansion specified on line 185 of QEL.javacc
                // Code for expansion specified on line 186 of QEL.javacc
                switch(nextTokenType()) {
                    case PLUS:
                    // Code for expansion specified on line 186 of QEL.javacc
                    // Code for expansion specified on line 186 of QEL.javacc
                    consumeToken(TokenType.PLUS, false);
                    break;
                    case MINUS:
                    // Code for expansion specified on line 186 of QEL.javacc
                    // Code for expansion specified on line 186 of QEL.javacc
                    consumeToken(TokenType.MINUS, false);
                    break;
                    default:
                    pushOntoCallStack("AdditiveExpression", "QEL.javacc", 186);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.PLUS, TokenType.MINUS), callStack);
                }
                // Code for MultiplicativeExpression specified on line 187 of QEL.javacc
                pushOntoCallStack("AdditiveExpression", "QEL.javacc", 187);
                boolean boolean25=currentNTForced;
                currentNTForced=false;
                try {
                    MultiplicativeExpression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean25;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AdditiveExpression");
        }
        catch(ParseException e) {
            parseException7=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException7==null) {
                restoreCallStack(callStackSize23);
            }
            if (buildTree) {
                if (parseException7==null) {
                    AdditiveExpression7.setEndLine(current_token.getEndLine());
                    AdditiveExpression7.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AdditiveExpression7, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException7: "+parseException7.getMessage());
                    AdditiveExpression7.setParseException(parseException7);
                    if (AdditiveExpression7forced) {
                        restoreCallStack(callStackSize23);
                        Token virtualToken=insertVirtualToken(TokenType.TIMES);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in AdditiveExpression\n";
                        message+=parseException7.getMessage();
                        addParsingProblem(new ParsingProblem(message, AdditiveExpression7));
                        closeNodeScope(AdditiveExpression7, true);
                    }
                    else {
                        closeNodeScope(AdditiveExpression7, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException7");
                        throw parseException7;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>MultiplicativeExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>MultiplicativeExpression_FINAL_SET=EnumSet.of(TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 191
    final public void MultiplicativeExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 191 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 193 of QEL.javacc
        boolean MultiplicativeExpression8forced=this.tolerantParsing&&currentNTForced;
        MultiplicativeExpression MultiplicativeExpression8=null;
        if (buildTree) {
            MultiplicativeExpression8=new MultiplicativeExpression();
            Token start=getToken(1);
            MultiplicativeExpression8.setBeginLine(start.beginLine);
            MultiplicativeExpression8.setBeginColumn(start.beginColumn);
            MultiplicativeExpression8.setInputSource(this.getInputSource());
            openNodeScope(MultiplicativeExpression8);
        }
        ParseException parseException8=null;
        int callStackSize26=callStack.size();
        try {
            // Code for UnaryExpression specified on line 193 of QEL.javacc
            pushOntoCallStack("MultiplicativeExpression", "QEL.javacc", 193);
            boolean boolean27=currentNTForced;
            currentNTForced=false;
            try {
                UnaryExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean27;
            }
            // Code for expansion specified on line 197 of QEL.javacc
            ZeroOrMore$QEL_javacc$line_197$column_6:
            while (true) {
                TokenType tokentype28=nextTokenType();
                if (!(tokentype28==TokenType.TIMES||tokentype28==TokenType.DIVIDE)) {
                    break ZeroOrMore$QEL_javacc$line_197$column_6;
                }
                // Code for expansion specified on line 195 of QEL.javacc
                // Code for expansion specified on line 195 of QEL.javacc
                switch(nextTokenType()) {
                    case TIMES:
                    // Code for expansion specified on line 195 of QEL.javacc
                    // Code for expansion specified on line 195 of QEL.javacc
                    consumeToken(TokenType.TIMES, false);
                    break;
                    case DIVIDE:
                    // Code for expansion specified on line 195 of QEL.javacc
                    // Code for expansion specified on line 195 of QEL.javacc
                    consumeToken(TokenType.DIVIDE, false);
                    break;
                    default:
                    pushOntoCallStack("MultiplicativeExpression", "QEL.javacc", 195);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.TIMES, TokenType.DIVIDE), callStack);
                }
                // Code for UnaryExpression specified on line 196 of QEL.javacc
                pushOntoCallStack("MultiplicativeExpression", "QEL.javacc", 196);
                boolean boolean29=currentNTForced;
                currentNTForced=false;
                try {
                    UnaryExpression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean29;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MultiplicativeExpression");
        }
        catch(ParseException e) {
            parseException8=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException8==null) {
                restoreCallStack(callStackSize26);
            }
            if (buildTree) {
                if (parseException8==null) {
                    MultiplicativeExpression8.setEndLine(current_token.getEndLine());
                    MultiplicativeExpression8.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MultiplicativeExpression8, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException8: "+parseException8.getMessage());
                    MultiplicativeExpression8.setParseException(parseException8);
                    if (MultiplicativeExpression8forced) {
                        restoreCallStack(callStackSize26);
                        Token virtualToken=insertVirtualToken(TokenType.TIMES);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in MultiplicativeExpression\n";
                        message+=parseException8.getMessage();
                        addParsingProblem(new ParsingProblem(message, MultiplicativeExpression8));
                        closeNodeScope(MultiplicativeExpression8, true);
                    }
                    else {
                        closeNodeScope(MultiplicativeExpression8, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException8");
                        throw parseException8;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>UnaryExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>UnaryExpression_FINAL_SET=EnumSet.of(TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 200
    final public void UnaryExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 200 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 202 of QEL.javacc
        switch(nextTokenType()) {
            case PLUS:
            case MINUS:
            // Code for expansion specified on line 202 of QEL.javacc
            // Code for UnaryPlusMinusExpression specified on line 202 of QEL.javacc
            pushOntoCallStack("UnaryExpression", "QEL.javacc", 202);
            boolean boolean30=currentNTForced;
            currentNTForced=false;
            try {
                UnaryPlusMinusExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean30;
            }
            break;
            case EXCLAM:
            // Code for expansion specified on line 204 of QEL.javacc
            // Code for NotExpression specified on line 204 of QEL.javacc
            pushOntoCallStack("UnaryExpression", "QEL.javacc", 204);
            boolean boolean31=currentNTForced;
            currentNTForced=false;
            try {
                NotExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean31;
            }
            break;
            case NULL:
            case TRUE:
            case FALSE:
            case INTEGER:
            case DECIMAL:
            case STRING_LITERAL:
            case RAW_STRING:
            case C_IDENTIFIER:
            case OPEN_PAREN:
            // Code for expansion specified on line 206 of QEL.javacc
            // Code for DefaultToExpression specified on line 206 of QEL.javacc
            pushOntoCallStack("UnaryExpression", "QEL.javacc", 206);
            boolean boolean32=currentNTForced;
            currentNTForced=false;
            try {
                DefaultToExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean32;
            }
            break;
            default:
            pushOntoCallStack("UnaryExpression", "QEL.javacc", 202);
            throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN), callStack);
        }
        if (trace_enabled) LOGGER.info("Exiting normally from UnaryExpression");
    }

    static private final EnumSet<TokenType>UnaryPlusMinusExpression_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS);
    static private final EnumSet<TokenType>UnaryPlusMinusExpression_FINAL_SET=EnumSet.of(TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 209
    final public void UnaryPlusMinusExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 209 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 211 of QEL.javacc
        boolean UnaryPlusMinusExpression9forced=this.tolerantParsing&&currentNTForced;
        UnaryPlusMinusExpression UnaryPlusMinusExpression9=null;
        if (buildTree) {
            UnaryPlusMinusExpression9=new UnaryPlusMinusExpression();
            Token start=getToken(1);
            UnaryPlusMinusExpression9.setBeginLine(start.beginLine);
            UnaryPlusMinusExpression9.setBeginColumn(start.beginColumn);
            UnaryPlusMinusExpression9.setInputSource(this.getInputSource());
            openNodeScope(UnaryPlusMinusExpression9);
        }
        ParseException parseException9=null;
        int callStackSize33=callStack.size();
        try {
            // Code for expansion specified on line 211 of QEL.javacc
            switch(nextTokenType()) {
                case PLUS:
                // Code for expansion specified on line 211 of QEL.javacc
                // Code for expansion specified on line 211 of QEL.javacc
                consumeToken(TokenType.PLUS, false);
                break;
                case MINUS:
                // Code for expansion specified on line 211 of QEL.javacc
                // Code for expansion specified on line 211 of QEL.javacc
                consumeToken(TokenType.MINUS, false);
                break;
                default:
                pushOntoCallStack("UnaryPlusMinusExpression", "QEL.javacc", 211);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.PLUS, TokenType.MINUS), callStack);
            }
            // Code for DefaultToExpression specified on line 211 of QEL.javacc
            pushOntoCallStack("UnaryPlusMinusExpression", "QEL.javacc", 211);
            boolean boolean34=currentNTForced;
            currentNTForced=false;
            try {
                DefaultToExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean34;
            }
            if (trace_enabled) LOGGER.info("Exiting normally from UnaryPlusMinusExpression");
        }
        catch(ParseException e) {
            parseException9=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException9==null) {
                restoreCallStack(callStackSize33);
            }
            if (buildTree) {
                if (parseException9==null) {
                    UnaryPlusMinusExpression9.setEndLine(current_token.getEndLine());
                    UnaryPlusMinusExpression9.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(UnaryPlusMinusExpression9, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException9: "+parseException9.getMessage());
                    UnaryPlusMinusExpression9.setParseException(parseException9);
                    if (UnaryPlusMinusExpression9forced) {
                        restoreCallStack(callStackSize33);
                        Token virtualToken=insertVirtualToken(TokenType.TIMES);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in UnaryPlusMinusExpression\n";
                        message+=parseException9.getMessage();
                        addParsingProblem(new ParsingProblem(message, UnaryPlusMinusExpression9));
                        closeNodeScope(UnaryPlusMinusExpression9, true);
                    }
                    else {
                        closeNodeScope(UnaryPlusMinusExpression9, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException9");
                        throw parseException9;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>NotExpression_FIRST_SET=EnumSet.of(TokenType.EXCLAM);
    static private final EnumSet<TokenType>NotExpression_FINAL_SET=EnumSet.of(TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 214
    final public void NotExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 214 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 216 of QEL.javacc
        boolean NotExpression10forced=this.tolerantParsing&&currentNTForced;
        NotExpression NotExpression10=null;
        if (buildTree) {
            NotExpression10=new NotExpression();
            Token start=getToken(1);
            NotExpression10.setBeginLine(start.beginLine);
            NotExpression10.setBeginColumn(start.beginColumn);
            NotExpression10.setInputSource(this.getInputSource());
            openNodeScope(NotExpression10);
        }
        ParseException parseException10=null;
        int callStackSize35=callStack.size();
        try {
            // Code for expansion specified on line 216 of QEL.javacc
            consumeToken(TokenType.EXCLAM, false);
            // Code for DefaultToExpression specified on line 217 of QEL.javacc
            pushOntoCallStack("NotExpression", "QEL.javacc", 217);
            boolean boolean36=currentNTForced;
            currentNTForced=false;
            try {
                DefaultToExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean36;
            }
            if (trace_enabled) LOGGER.info("Exiting normally from NotExpression");
        }
        catch(ParseException e) {
            parseException10=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException10==null) {
                restoreCallStack(callStackSize35);
            }
            if (buildTree) {
                if (parseException10==null) {
                    NotExpression10.setEndLine(current_token.getEndLine());
                    NotExpression10.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(NotExpression10, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException10: "+parseException10.getMessage());
                    NotExpression10.setParseException(parseException10);
                    if (NotExpression10forced) {
                        restoreCallStack(callStackSize35);
                        Token virtualToken=insertVirtualToken(TokenType.TIMES);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in NotExpression\n";
                        message+=parseException10.getMessage();
                        addParsingProblem(new ParsingProblem(message, NotExpression10));
                        closeNodeScope(NotExpression10, true);
                    }
                    else {
                        closeNodeScope(NotExpression10, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException10");
                        throw parseException10;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>DefaultToExpression_FIRST_SET=EnumSet.of(TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>DefaultToExpression_FINAL_SET=EnumSet.of(TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 220
    final public void DefaultToExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 220 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 222 of QEL.javacc
        boolean DefaultToExpression11forced=this.tolerantParsing&&currentNTForced;
        DefaultToExpression DefaultToExpression11=null;
        if (buildTree) {
            DefaultToExpression11=new DefaultToExpression();
            Token start=getToken(1);
            DefaultToExpression11.setBeginLine(start.beginLine);
            DefaultToExpression11.setBeginColumn(start.beginColumn);
            DefaultToExpression11.setInputSource(this.getInputSource());
            openNodeScope(DefaultToExpression11);
        }
        ParseException parseException11=null;
        int callStackSize37=callStack.size();
        try {
            // Code for PrimaryExpression specified on line 222 of QEL.javacc
            pushOntoCallStack("DefaultToExpression", "QEL.javacc", 222);
            boolean boolean38=currentNTForced;
            currentNTForced=false;
            try {
                PrimaryExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean38;
            }
            // Code for expansion specified on line 226 of QEL.javacc
            ZeroOrMore$QEL_javacc$line_226$column_6:
            while (true) {
                if (!(lookahead$QEL_javacc$line_224$column_19(INDEFINITE)&&(getToken(2).getType()!=TokenType.C_IDENTIFIER||getToken(3).getType()!=TokenType.SIMPLE_EQUALS))) {
                    break ZeroOrMore$QEL_javacc$line_226$column_6;
                }
                // Code for expansion specified on line 224 of QEL.javacc
                // Code for expansion specified on line 225 of QEL.javacc
                consumeToken(TokenType.EXCLAM, false);
                // Code for PrimaryExpression specified on line 225 of QEL.javacc
                pushOntoCallStack("DefaultToExpression", "QEL.javacc", 225);
                boolean boolean39=currentNTForced;
                currentNTForced=false;
                try {
                    PrimaryExpression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean39;
                }
            }
            // Code for expansion specified on line 227 of QEL.javacc
            TokenType tokentype40=nextTokenType();
            if (tokentype40==TokenType.EXCLAM) {
                // Code for expansion specified on line 228 of QEL.javacc
                // Code for expansion specified on line 229 of QEL.javacc
                consumeToken(TokenType.EXCLAM, false);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from DefaultToExpression");
        }
        catch(ParseException e) {
            parseException11=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException11==null) {
                restoreCallStack(callStackSize37);
            }
            if (buildTree) {
                if (parseException11==null) {
                    DefaultToExpression11.setEndLine(current_token.getEndLine());
                    DefaultToExpression11.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(DefaultToExpression11, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException11: "+parseException11.getMessage());
                    DefaultToExpression11.setParseException(parseException11);
                    if (DefaultToExpression11forced) {
                        restoreCallStack(callStackSize37);
                        Token virtualToken=insertVirtualToken(TokenType.TIMES);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in DefaultToExpression\n";
                        message+=parseException11.getMessage();
                        addParsingProblem(new ParsingProblem(message, DefaultToExpression11));
                        closeNodeScope(DefaultToExpression11, true);
                    }
                    else {
                        closeNodeScope(DefaultToExpression11, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException11");
                        throw parseException11;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>PrimaryExpression_FIRST_SET=EnumSet.of(TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>PrimaryExpression_FINAL_SET=EnumSet.of(TokenType.TIMES, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 233
    final public void PrimaryExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 233 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 235 of QEL.javacc
        boolean PrimaryExpression12forced=this.tolerantParsing&&currentNTForced;
        PrimaryExpression PrimaryExpression12=null;
        if (buildTree) {
            PrimaryExpression12=new PrimaryExpression();
            Token start=getToken(1);
            PrimaryExpression12.setBeginLine(start.beginLine);
            PrimaryExpression12.setBeginColumn(start.beginColumn);
            PrimaryExpression12.setInputSource(this.getInputSource());
            openNodeScope(PrimaryExpression12);
        }
        ParseException parseException12=null;
        int callStackSize41=callStack.size();
        try {
            // Code for BaseExpression specified on line 235 of QEL.javacc
            pushOntoCallStack("PrimaryExpression", "QEL.javacc", 235);
            boolean boolean42=currentNTForced;
            currentNTForced=false;
            try {
                BaseExpression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean42;
            }
            // Code for expansion specified on line 245 of QEL.javacc
            ZeroOrMore$QEL_javacc$line_245$column_4:
            while (true) {
                if (!(lookahead$QEL_javacc$line_237$column_15(INDEFINITE))) {
                    break ZeroOrMore$QEL_javacc$line_245$column_4;
                }
                // Code for expansion specified on line 237 of QEL.javacc
                // Code for expansion specified on line 239 of QEL.javacc
                switch(nextTokenType()) {
                    case DOT:
                    // Code for expansion specified on line 239 of QEL.javacc
                    // Code for DotKey specified on line 239 of QEL.javacc
                    pushOntoCallStack("PrimaryExpression", "QEL.javacc", 239);
                    boolean boolean43=currentNTForced;
                    currentNTForced=false;
                    try {
                        DotKey();
                    }
                    finally {
                        popCallStack();
                        currentNTForced=boolean43;
                    }
                    break;
                    case OPEN_BRACKET:
                    // Code for expansion specified on line 241 of QEL.javacc
                    // Code for DynamicKey specified on line 241 of QEL.javacc
                    pushOntoCallStack("PrimaryExpression", "QEL.javacc", 241);
                    boolean boolean44=currentNTForced;
                    currentNTForced=false;
                    try {
                        DynamicKey();
                    }
                    finally {
                        popCallStack();
                        currentNTForced=boolean44;
                    }
                    break;
                    case OPEN_PAREN:
                    // Code for expansion specified on line 243 of QEL.javacc
                    // Code for MethodInvoke specified on line 243 of QEL.javacc
                    pushOntoCallStack("PrimaryExpression", "QEL.javacc", 243);
                    boolean boolean45=currentNTForced;
                    currentNTForced=false;
                    try {
                        MethodInvoke();
                    }
                    finally {
                        popCallStack();
                        currentNTForced=boolean45;
                    }
                    break;
                    default:
                    pushOntoCallStack("PrimaryExpression", "QEL.javacc", 239);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.DOT, TokenType.OPEN_BRACKET, TokenType.OPEN_PAREN), callStack);
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from PrimaryExpression");
        }
        catch(ParseException e) {
            parseException12=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException12==null) {
                restoreCallStack(callStackSize41);
            }
            if (buildTree) {
                if (parseException12==null) {
                    PrimaryExpression12.setEndLine(current_token.getEndLine());
                    PrimaryExpression12.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PrimaryExpression12, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException12: "+parseException12.getMessage());
                    PrimaryExpression12.setParseException(parseException12);
                    if (PrimaryExpression12forced) {
                        restoreCallStack(callStackSize41);
                        Token virtualToken=insertVirtualToken(TokenType.TIMES);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in PrimaryExpression\n";
                        message+=parseException12.getMessage();
                        addParsingProblem(new ParsingProblem(message, PrimaryExpression12));
                        closeNodeScope(PrimaryExpression12, true);
                    }
                    else {
                        closeNodeScope(PrimaryExpression12, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException12");
                        throw parseException12;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>BaseExpression_FIRST_SET=EnumSet.of(TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>BaseExpression_FINAL_SET=EnumSet.of(TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 248
    final public void BaseExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 248 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 250 of QEL.javacc
        boolean BaseExpression13forced=this.tolerantParsing&&currentNTForced;
        BaseExpression BaseExpression13=null;
        if (buildTree) {
            BaseExpression13=new BaseExpression();
            Token start=getToken(1);
            BaseExpression13.setBeginLine(start.beginLine);
            BaseExpression13.setBeginColumn(start.beginColumn);
            BaseExpression13.setInputSource(this.getInputSource());
            openNodeScope(BaseExpression13);
        }
        ParseException parseException13=null;
        int callStackSize46=callStack.size();
        try {
            switch(nextTokenType()) {
                case C_IDENTIFIER:
                // Code for expansion specified on line 250 of QEL.javacc
                // Code for expansion specified on line 250 of QEL.javacc
                consumeToken(TokenType.C_IDENTIFIER, false);
                break;
                case INTEGER:
                case DECIMAL:
                // Code for expansion specified on line 252 of QEL.javacc
                // Code for NumberLiteral specified on line 252 of QEL.javacc
                pushOntoCallStack("BaseExpression", "QEL.javacc", 252);
                boolean boolean47=currentNTForced;
                currentNTForced=false;
                try {
                    NumberLiteral();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean47;
                }
                break;
                case STRING_LITERAL:
                case RAW_STRING:
                // Code for expansion specified on line 254 of QEL.javacc
                // Code for StringLiteral specified on line 254 of QEL.javacc
                pushOntoCallStack("BaseExpression", "QEL.javacc", 254);
                boolean boolean48=currentNTForced;
                currentNTForced=false;
                try {
                    StringLiteral();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean48;
                }
                break;
                case TRUE:
                case FALSE:
                // Code for expansion specified on line 256 of QEL.javacc
                // Code for BooleanLiteral specified on line 256 of QEL.javacc
                pushOntoCallStack("BaseExpression", "QEL.javacc", 256);
                boolean boolean49=currentNTForced;
                currentNTForced=false;
                try {
                    BooleanLiteral();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean49;
                }
                break;
                case NULL:
                // Code for expansion specified on line 258 of QEL.javacc
                // Code for NullLiteral specified on line 258 of QEL.javacc
                pushOntoCallStack("BaseExpression", "QEL.javacc", 258);
                boolean boolean50=currentNTForced;
                currentNTForced=false;
                try {
                    NullLiteral();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean50;
                }
                break;
                case OPEN_PAREN:
                // Code for expansion specified on line 260 of QEL.javacc
                // Code for Parenthesis specified on line 260 of QEL.javacc
                pushOntoCallStack("BaseExpression", "QEL.javacc", 260);
                boolean boolean51=currentNTForced;
                currentNTForced=false;
                try {
                    Parenthesis();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean51;
                }
                break;
                default:
                pushOntoCallStack("BaseExpression", "QEL.javacc", 250);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from BaseExpression");
        }
        catch(ParseException e) {
            parseException13=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException13==null) {
                restoreCallStack(callStackSize46);
            }
            if (buildTree) {
                if (parseException13==null) {
                    BaseExpression13.setEndLine(current_token.getEndLine());
                    BaseExpression13.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(BaseExpression13, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException13: "+parseException13.getMessage());
                    BaseExpression13.setParseException(parseException13);
                    if (BaseExpression13forced) {
                        restoreCallStack(callStackSize46);
                        Token virtualToken=insertVirtualToken(TokenType.NULL);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in BaseExpression\n";
                        message+=parseException13.getMessage();
                        addParsingProblem(new ParsingProblem(message, BaseExpression13));
                        closeNodeScope(BaseExpression13, true);
                    }
                    else {
                        closeNodeScope(BaseExpression13, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException13");
                        throw parseException13;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>DotKey_FIRST_SET=EnumSet.of(TokenType.DOT);
    static private final EnumSet<TokenType>DotKey_FINAL_SET=EnumSet.of(TokenType.TIMES, TokenType.C_IDENTIFIER);
    // QEL.javacc, line 264
    final public void DotKey() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 264 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 266 of QEL.javacc
        // Code for expansion specified on line 266 of QEL.javacc
        consumeToken(TokenType.DOT, false);
        // Code for expansion specified on line 267 of QEL.javacc
        switch(nextTokenType()) {
            case C_IDENTIFIER:
            // Code for expansion specified on line 267 of QEL.javacc
            // Code for expansion specified on line 267 of QEL.javacc
            consumeToken(TokenType.C_IDENTIFIER, false);
            break;
            case TIMES:
            // Code for expansion specified on line 267 of QEL.javacc
            // Code for expansion specified on line 267 of QEL.javacc
            consumeToken(TokenType.TIMES, false);
            break;
            default:
            pushOntoCallStack("DotKey", "QEL.javacc", 267);
            throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.TIMES, TokenType.C_IDENTIFIER), callStack);
        }
        if (trace_enabled) LOGGER.info("Exiting normally from DotKey");
    }

    static private final EnumSet<TokenType>DynamicKey_FIRST_SET=EnumSet.of(TokenType.OPEN_BRACKET);
    static private final EnumSet<TokenType>DynamicKey_FINAL_SET=EnumSet.of(TokenType.CLOSE_BRACKET);
    // QEL.javacc, line 270
    final public void DynamicKey() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 270 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 272 of QEL.javacc
        // Code for expansion specified on line 272 of QEL.javacc
        consumeToken(TokenType.OPEN_BRACKET, false);
        // Code for Expression specified on line 272 of QEL.javacc
        pushOntoCallStack("DynamicKey", "QEL.javacc", 272);
        boolean boolean52=currentNTForced;
        currentNTForced=false;
        try {
            Expression();
        }
        finally {
            popCallStack();
            currentNTForced=boolean52;
        }
        // Code for expansion specified on line 272 of QEL.javacc
        consumeToken(TokenType.CLOSE_BRACKET, false);
        if (trace_enabled) LOGGER.info("Exiting normally from DynamicKey");
    }

    static private final EnumSet<TokenType>MethodInvoke_FIRST_SET=EnumSet.of(TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>MethodInvoke_FINAL_SET=EnumSet.of(TokenType.CLOSE_PAREN);
    // QEL.javacc, line 275
    final public void MethodInvoke() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 275 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 277 of QEL.javacc
        // Code for expansion specified on line 277 of QEL.javacc
        consumeToken(TokenType.OPEN_PAREN, false);
        // Code for expansion specified on line 277 of QEL.javacc
        TokenType tokentype54=nextTokenType();
        if (tokentype54==TokenType.PLUS||tokentype54==TokenType.MINUS||tokentype54==TokenType.EXCLAM||tokentype54==TokenType.NULL||tokentype54==TokenType.TRUE||tokentype54==TokenType.FALSE||tokentype54==TokenType.INTEGER||tokentype54==TokenType.DECIMAL||tokentype54==TokenType.STRING_LITERAL||tokentype54==TokenType.RAW_STRING||tokentype54==TokenType.C_IDENTIFIER||tokentype54==TokenType.OPEN_PAREN) {
            // Code for expansion specified on line 277 of QEL.javacc
            // Code for ArgsList specified on line 277 of QEL.javacc
            pushOntoCallStack("MethodInvoke", "QEL.javacc", 277);
            boolean boolean53=currentNTForced;
            currentNTForced=false;
            try {
                ArgsList();
            }
            finally {
                popCallStack();
                currentNTForced=boolean53;
            }
        }
        // Code for expansion specified on line 277 of QEL.javacc
        consumeToken(TokenType.CLOSE_PAREN, false);
        if (trace_enabled) LOGGER.info("Exiting normally from MethodInvoke");
    }

    static private final EnumSet<TokenType>ArgsList_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>ArgsList_FINAL_SET=EnumSet.of(TokenType.DOT_DOT, TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 280
    final public void ArgsList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 280 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 282 of QEL.javacc
        // Code for expansion specified on line 283 of QEL.javacc
        // Code for PositionalArgsList specified on line 283 of QEL.javacc
        pushOntoCallStack("ArgsList", "QEL.javacc", 283);
        boolean boolean55=currentNTForced;
        currentNTForced=true;
        try {
            PositionalArgsList();
        }
        finally {
            popCallStack();
            currentNTForced=boolean55;
        }
        if (trace_enabled) LOGGER.info("Exiting normally from ArgsList");
    }

    static private final EnumSet<TokenType>PositionalArgsList_FIRST_SET=EnumSet.of(TokenType.PLUS, TokenType.MINUS, TokenType.EXCLAM, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>PositionalArgsList_FINAL_SET=EnumSet.of(TokenType.DOT_DOT, TokenType.TIMES, TokenType.EXCLAM, TokenType.CLOSE_BRACKET, TokenType.NULL, TokenType.TRUE, TokenType.FALSE, TokenType.INTEGER, TokenType.DECIMAL, TokenType.STRING_LITERAL, TokenType.RAW_STRING, TokenType.C_IDENTIFIER, TokenType.CLOSE_PAREN);
    // QEL.javacc, line 287
    final public void PositionalArgsList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 287 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 289 of QEL.javacc
        boolean PositionalArgsList14forced=this.tolerantParsing&&currentNTForced;
        PositionalArgsList PositionalArgsList14=null;
        if (buildTree) {
            PositionalArgsList14=new PositionalArgsList();
            Token start=getToken(1);
            PositionalArgsList14.setBeginLine(start.beginLine);
            PositionalArgsList14.setBeginColumn(start.beginColumn);
            PositionalArgsList14.setInputSource(this.getInputSource());
            openNodeScope(PositionalArgsList14);
        }
        ParseException parseException14=null;
        int callStackSize56=callStack.size();
        try {
            // Code for Expression specified on line 289 of QEL.javacc
            pushOntoCallStack("PositionalArgsList", "QEL.javacc", 289);
            boolean boolean57=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean57;
            }
            // Code for expansion specified on line 293 of QEL.javacc
            ZeroOrMore$QEL_javacc$line_293$column_6:
            while (true) {
                TokenType tokentype58=nextTokenType();
                if (!(tokentype58==TokenType.COMMA||tokentype58==TokenType.PLUS||tokentype58==TokenType.MINUS||tokentype58==TokenType.EXCLAM||tokentype58==TokenType.NULL||tokentype58==TokenType.TRUE||tokentype58==TokenType.FALSE||tokentype58==TokenType.INTEGER||tokentype58==TokenType.DECIMAL||tokentype58==TokenType.STRING_LITERAL||tokentype58==TokenType.RAW_STRING||tokentype58==TokenType.C_IDENTIFIER||tokentype58==TokenType.OPEN_PAREN)) {
                    break ZeroOrMore$QEL_javacc$line_293$column_6;
                }
                // Code for expansion specified on line 291 of QEL.javacc
                // Code for expansion specified on line 291 of QEL.javacc
                TokenType tokentype59=nextTokenType();
                if (tokentype59==TokenType.COMMA) {
                    // Code for expansion specified on line 291 of QEL.javacc
                    // Code for expansion specified on line 291 of QEL.javacc
                    consumeToken(TokenType.COMMA, false);
                }
                // Code for Expression specified on line 292 of QEL.javacc
                pushOntoCallStack("PositionalArgsList", "QEL.javacc", 292);
                boolean boolean60=currentNTForced;
                currentNTForced=false;
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean60;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from PositionalArgsList");
        }
        catch(ParseException e) {
            parseException14=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException14==null) {
                restoreCallStack(callStackSize56);
            }
            if (buildTree) {
                if (parseException14==null) {
                    PositionalArgsList14.setEndLine(current_token.getEndLine());
                    PositionalArgsList14.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PositionalArgsList14, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException14: "+parseException14.getMessage());
                    PositionalArgsList14.setParseException(parseException14);
                    if (PositionalArgsList14forced) {
                        restoreCallStack(callStackSize56);
                        Token virtualToken=insertVirtualToken(TokenType.DOT_DOT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in PositionalArgsList\n";
                        message+=parseException14.getMessage();
                        addParsingProblem(new ParsingProblem(message, PositionalArgsList14));
                        closeNodeScope(PositionalArgsList14, true);
                    }
                    else {
                        closeNodeScope(PositionalArgsList14, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException14");
                        throw parseException14;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>StringLiteral_FIRST_SET=EnumSet.of(TokenType.STRING_LITERAL, TokenType.RAW_STRING);
    static private final EnumSet<TokenType>StringLiteral_FINAL_SET=EnumSet.of(TokenType.STRING_LITERAL, TokenType.RAW_STRING);
    // QEL.javacc, line 296
    final public void StringLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 296 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 298 of QEL.javacc
        boolean StringLiteral15forced=this.tolerantParsing&&currentNTForced;
        StringLiteral StringLiteral15=null;
        if (buildTree) {
            StringLiteral15=new StringLiteral();
            Token start=getToken(1);
            StringLiteral15.setBeginLine(start.beginLine);
            StringLiteral15.setBeginColumn(start.beginColumn);
            StringLiteral15.setInputSource(this.getInputSource());
            openNodeScope(StringLiteral15);
        }
        ParseException parseException15=null;
        int callStackSize61=callStack.size();
        try {
            switch(nextTokenType()) {
                case STRING_LITERAL:
                // Code for expansion specified on line 298 of QEL.javacc
                // Code for expansion specified on line 298 of QEL.javacc
                consumeToken(TokenType.STRING_LITERAL, false);
                break;
                case RAW_STRING:
                // Code for expansion specified on line 298 of QEL.javacc
                // Code for expansion specified on line 298 of QEL.javacc
                consumeToken(TokenType.RAW_STRING, false);
                break;
                default:
                pushOntoCallStack("StringLiteral", "QEL.javacc", 298);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.STRING_LITERAL, TokenType.RAW_STRING), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from StringLiteral");
        }
        catch(ParseException e) {
            parseException15=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException15==null) {
                restoreCallStack(callStackSize61);
            }
            if (buildTree) {
                if (parseException15==null) {
                    StringLiteral15.setEndLine(current_token.getEndLine());
                    StringLiteral15.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(StringLiteral15, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException15: "+parseException15.getMessage());
                    StringLiteral15.setParseException(parseException15);
                    if (StringLiteral15forced) {
                        restoreCallStack(callStackSize61);
                        Token virtualToken=insertVirtualToken(TokenType.STRING_LITERAL);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in StringLiteral\n";
                        message+=parseException15.getMessage();
                        addParsingProblem(new ParsingProblem(message, StringLiteral15));
                        closeNodeScope(StringLiteral15, true);
                    }
                    else {
                        closeNodeScope(StringLiteral15, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException15");
                        throw parseException15;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>Parenthesis_FIRST_SET=EnumSet.of(TokenType.OPEN_PAREN);
    static private final EnumSet<TokenType>Parenthesis_FINAL_SET=EnumSet.of(TokenType.CLOSE_PAREN);
    // QEL.javacc, line 301
    final public void Parenthesis() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 301 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 303 of QEL.javacc
        boolean Parenthesis16forced=this.tolerantParsing&&currentNTForced;
        Parenthesis Parenthesis16=null;
        if (buildTree) {
            Parenthesis16=new Parenthesis();
            Token start=getToken(1);
            Parenthesis16.setBeginLine(start.beginLine);
            Parenthesis16.setBeginColumn(start.beginColumn);
            Parenthesis16.setInputSource(this.getInputSource());
            openNodeScope(Parenthesis16);
        }
        ParseException parseException16=null;
        int callStackSize62=callStack.size();
        try {
            // Code for expansion specified on line 303 of QEL.javacc
            consumeToken(TokenType.OPEN_PAREN, false);
            // Code for Expression specified on line 304 of QEL.javacc
            pushOntoCallStack("Parenthesis", "QEL.javacc", 304);
            boolean boolean63=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean63;
            }
            // Code for expansion specified on line 305 of QEL.javacc
            consumeToken(TokenType.CLOSE_PAREN, true);
            if (trace_enabled) LOGGER.info("Exiting normally from Parenthesis");
        }
        catch(ParseException e) {
            parseException16=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException16==null) {
                restoreCallStack(callStackSize62);
            }
            if (buildTree) {
                if (parseException16==null) {
                    Parenthesis16.setEndLine(current_token.getEndLine());
                    Parenthesis16.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Parenthesis16, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException16: "+parseException16.getMessage());
                    Parenthesis16.setParseException(parseException16);
                    if (Parenthesis16forced) {
                        restoreCallStack(callStackSize62);
                        Token virtualToken=insertVirtualToken(TokenType.CLOSE_PAREN);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in Parenthesis\n";
                        message+=parseException16.getMessage();
                        addParsingProblem(new ParsingProblem(message, Parenthesis16));
                        closeNodeScope(Parenthesis16, true);
                    }
                    else {
                        closeNodeScope(Parenthesis16, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException16");
                        throw parseException16;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>NumberLiteral_FIRST_SET=EnumSet.of(TokenType.INTEGER, TokenType.DECIMAL);
    static private final EnumSet<TokenType>NumberLiteral_FINAL_SET=EnumSet.of(TokenType.INTEGER, TokenType.DECIMAL);
    // QEL.javacc, line 308
    final public void NumberLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 308 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 310 of QEL.javacc
        boolean NumberLiteral17forced=this.tolerantParsing&&currentNTForced;
        NumberLiteral NumberLiteral17=null;
        if (buildTree) {
            NumberLiteral17=new NumberLiteral();
            Token start=getToken(1);
            NumberLiteral17.setBeginLine(start.beginLine);
            NumberLiteral17.setBeginColumn(start.beginColumn);
            NumberLiteral17.setInputSource(this.getInputSource());
            openNodeScope(NumberLiteral17);
        }
        ParseException parseException17=null;
        int callStackSize64=callStack.size();
        try {
            switch(nextTokenType()) {
                case INTEGER:
                // Code for expansion specified on line 310 of QEL.javacc
                // Code for expansion specified on line 310 of QEL.javacc
                consumeToken(TokenType.INTEGER, false);
                break;
                case DECIMAL:
                // Code for expansion specified on line 310 of QEL.javacc
                // Code for expansion specified on line 310 of QEL.javacc
                consumeToken(TokenType.DECIMAL, false);
                break;
                default:
                pushOntoCallStack("NumberLiteral", "QEL.javacc", 310);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.INTEGER, TokenType.DECIMAL), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from NumberLiteral");
        }
        catch(ParseException e) {
            parseException17=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException17==null) {
                restoreCallStack(callStackSize64);
            }
            if (buildTree) {
                if (parseException17==null) {
                    NumberLiteral17.setEndLine(current_token.getEndLine());
                    NumberLiteral17.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(NumberLiteral17, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException17: "+parseException17.getMessage());
                    NumberLiteral17.setParseException(parseException17);
                    if (NumberLiteral17forced) {
                        restoreCallStack(callStackSize64);
                        Token virtualToken=insertVirtualToken(TokenType.INTEGER);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in NumberLiteral\n";
                        message+=parseException17.getMessage();
                        addParsingProblem(new ParsingProblem(message, NumberLiteral17));
                        closeNodeScope(NumberLiteral17, true);
                    }
                    else {
                        closeNodeScope(NumberLiteral17, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException17");
                        throw parseException17;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>BooleanLiteral_FIRST_SET=EnumSet.of(TokenType.TRUE, TokenType.FALSE);
    static private final EnumSet<TokenType>BooleanLiteral_FINAL_SET=EnumSet.of(TokenType.TRUE, TokenType.FALSE);
    // QEL.javacc, line 313
    final public void BooleanLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 313 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 315 of QEL.javacc
        boolean BooleanLiteral18forced=this.tolerantParsing&&currentNTForced;
        BooleanLiteral BooleanLiteral18=null;
        if (buildTree) {
            BooleanLiteral18=new BooleanLiteral();
            Token start=getToken(1);
            BooleanLiteral18.setBeginLine(start.beginLine);
            BooleanLiteral18.setBeginColumn(start.beginColumn);
            BooleanLiteral18.setInputSource(this.getInputSource());
            openNodeScope(BooleanLiteral18);
        }
        ParseException parseException18=null;
        int callStackSize65=callStack.size();
        try {
            switch(nextTokenType()) {
                case TRUE:
                // Code for expansion specified on line 315 of QEL.javacc
                // Code for expansion specified on line 315 of QEL.javacc
                consumeToken(TokenType.TRUE, false);
                break;
                case FALSE:
                // Code for expansion specified on line 315 of QEL.javacc
                // Code for expansion specified on line 315 of QEL.javacc
                consumeToken(TokenType.FALSE, false);
                break;
                default:
                pushOntoCallStack("BooleanLiteral", "QEL.javacc", 315);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.TRUE, TokenType.FALSE), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from BooleanLiteral");
        }
        catch(ParseException e) {
            parseException18=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException18==null) {
                restoreCallStack(callStackSize65);
            }
            if (buildTree) {
                if (parseException18==null) {
                    BooleanLiteral18.setEndLine(current_token.getEndLine());
                    BooleanLiteral18.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(BooleanLiteral18, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException18: "+parseException18.getMessage());
                    BooleanLiteral18.setParseException(parseException18);
                    if (BooleanLiteral18forced) {
                        restoreCallStack(callStackSize65);
                        Token virtualToken=insertVirtualToken(TokenType.TRUE);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in BooleanLiteral\n";
                        message+=parseException18.getMessage();
                        addParsingProblem(new ParsingProblem(message, BooleanLiteral18));
                        closeNodeScope(BooleanLiteral18, true);
                    }
                    else {
                        closeNodeScope(BooleanLiteral18, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException18");
                        throw parseException18;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>NullLiteral_FIRST_SET=EnumSet.of(TokenType.NULL);
    static private final EnumSet<TokenType>NullLiteral_FINAL_SET=EnumSet.of(TokenType.NULL);
    // QEL.javacc, line 318
    final public void NullLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 318 of QEL.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 320 of QEL.javacc
        boolean NullLiteral19forced=this.tolerantParsing&&currentNTForced;
        NullLiteral NullLiteral19=null;
        if (buildTree) {
            NullLiteral19=new NullLiteral();
            Token start=getToken(1);
            NullLiteral19.setBeginLine(start.beginLine);
            NullLiteral19.setBeginColumn(start.beginColumn);
            NullLiteral19.setInputSource(this.getInputSource());
            openNodeScope(NullLiteral19);
        }
        ParseException parseException19=null;
        int callStackSize66=callStack.size();
        try {
            // Code for expansion specified on line 320 of QEL.javacc
            consumeToken(TokenType.NULL, false);
            if (trace_enabled) LOGGER.info("Exiting normally from NullLiteral");
        }
        catch(ParseException e) {
            parseException19=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException19==null) {
                restoreCallStack(callStackSize66);
            }
            if (buildTree) {
                if (parseException19==null) {
                    NullLiteral19.setEndLine(current_token.getEndLine());
                    NullLiteral19.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(NullLiteral19, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException19: "+parseException19.getMessage());
                    NullLiteral19.setParseException(parseException19);
                    if (NullLiteral19forced) {
                        restoreCallStack(callStackSize66);
                        Token virtualToken=insertVirtualToken(TokenType.NULL);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in NullLiteral\n";
                        message+=parseException19.getMessage();
                        addParsingProblem(new ParsingProblem(message, NullLiteral19));
                        closeNodeScope(NullLiteral19, true);
                    }
                    else {
                        closeNodeScope(NullLiteral19, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException19");
                        throw parseException19;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>ParameterDeclaration_FIRST_SET=EnumSet.of(TokenType.START_PARAMETER_DECL);
    static private final EnumSet<TokenType>ParameterDeclaration_FINAL_SET=EnumSet.of(TokenType.CLOSE_CURLY);
    // QUTE.javacc, line 86
    final public void ParameterDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 86 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 88 of QUTE.javacc
        boolean ParameterDeclaration20forced=this.tolerantParsing;
        ParameterDeclaration ParameterDeclaration20=null;
        if (buildTree) {
            ParameterDeclaration20=new ParameterDeclaration();
            Token start=getToken(1);
            ParameterDeclaration20.setBeginLine(start.beginLine);
            ParameterDeclaration20.setBeginColumn(start.beginColumn);
            ParameterDeclaration20.setInputSource(this.getInputSource());
            openNodeScope(ParameterDeclaration20);
        }
        ParseException parseException20=null;
        int callStackSize67=callStack.size();
        try {
            // Code for expansion specified on line 88 of QUTE.javacc
            consumeToken(TokenType.START_PARAMETER_DECL, false);
            // Code for expansion specified on line 89 of QUTE.javacc
            consumeToken(TokenType.C_IDENTIFIER, false);
            // Code for expansion specified on line 90 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, false);
            if (trace_enabled) LOGGER.info("Exiting normally from ParameterDeclaration");
        }
        catch(ParseException e) {
            parseException20=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException20==null) {
                restoreCallStack(callStackSize67);
            }
            if (buildTree) {
                if (parseException20==null) {
                    ParameterDeclaration20.setEndLine(current_token.getEndLine());
                    ParameterDeclaration20.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ParameterDeclaration20, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException20: "+parseException20.getMessage());
                    ParameterDeclaration20.setParseException(parseException20);
                    if (ParameterDeclaration20forced) {
                        restoreCallStack(callStackSize67);
                        Token virtualToken=insertVirtualToken(TokenType.CLOSE_CURLY);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in ParameterDeclaration\n";
                        message+=parseException20.getMessage();
                        addParsingProblem(new ParsingProblem(message, ParameterDeclaration20));
                        closeNodeScope(ParameterDeclaration20, true);
                    }
                    else {
                        closeNodeScope(ParameterDeclaration20, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException20");
                        throw parseException20;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>Interpolation_FIRST_SET=EnumSet.of(TokenType.OPEN_CURLY);
    static private final EnumSet<TokenType>Interpolation_FINAL_SET=EnumSet.of(TokenType.CLOSE_CURLY);
    // QUTE.javacc, line 93
    final public void Interpolation() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 93 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 95 of QUTE.javacc
        boolean Interpolation21forced=this.tolerantParsing;
        Interpolation Interpolation21=null;
        if (buildTree) {
            Interpolation21=new Interpolation();
            Token start=getToken(1);
            Interpolation21.setBeginLine(start.beginLine);
            Interpolation21.setBeginColumn(start.beginColumn);
            Interpolation21.setInputSource(this.getInputSource());
            openNodeScope(Interpolation21);
        }
        ParseException parseException21=null;
        int callStackSize68=callStack.size();
        try {
            // Code for expansion specified on line 95 of QUTE.javacc
            consumeToken(TokenType.OPEN_CURLY, false);
            // Code for Expression specified on line 95 of QUTE.javacc
            pushOntoCallStack("Interpolation", "QUTE.javacc", 95);
            boolean boolean69=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean69;
            }
            // Code for expansion specified on line 95 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, false);
            if (trace_enabled) LOGGER.info("Exiting normally from Interpolation");
        }
        catch(ParseException e) {
            parseException21=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException21==null) {
                restoreCallStack(callStackSize68);
            }
            if (buildTree) {
                if (parseException21==null) {
                    Interpolation21.setEndLine(current_token.getEndLine());
                    Interpolation21.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Interpolation21, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException21: "+parseException21.getMessage());
                    Interpolation21.setParseException(parseException21);
                    if (Interpolation21forced) {
                        restoreCallStack(callStackSize68);
                        Token virtualToken=insertVirtualToken(TokenType.CLOSE_CURLY);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in Interpolation\n";
                        message+=parseException21.getMessage();
                        addParsingProblem(new ParsingProblem(message, Interpolation21));
                        closeNodeScope(Interpolation21, true);
                    }
                    else {
                        closeNodeScope(Interpolation21, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException21");
                        throw parseException21;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>EachSection_FIRST_SET=EnumSet.of(TokenType.EACH);
    static private final EnumSet<TokenType>EachSection_FINAL_SET=EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDEACH);
    // QUTE.javacc, line 98
    final public void EachSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 98 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 100 of QUTE.javacc
        boolean EachSection22forced=this.tolerantParsing;
        EachSection EachSection22=null;
        if (buildTree) {
            EachSection22=new EachSection();
            Token start=getToken(1);
            EachSection22.setBeginLine(start.beginLine);
            EachSection22.setBeginColumn(start.beginColumn);
            EachSection22.setInputSource(this.getInputSource());
            openNodeScope(EachSection22);
        }
        ParseException parseException22=null;
        int callStackSize70=callStack.size();
        try {
            // Code for expansion specified on line 100 of QUTE.javacc
            consumeToken(TokenType.EACH, false);
            // Code for Expression specified on line 101 of QUTE.javacc
            pushOntoCallStack("EachSection", "QUTE.javacc", 101);
            boolean boolean71=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean71;
            }
            // Code for expansion specified on line 102 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, false);
            // Code for Block specified on line 103 of QUTE.javacc
            pushOntoCallStack("EachSection", "QUTE.javacc", 103);
            boolean boolean72=currentNTForced;
            currentNTForced=false;
            try {
                Block();
            }
            finally {
                popCallStack();
                currentNTForced=boolean72;
            }
            // Code for expansion specified on line 104 of QUTE.javacc
            switch(nextTokenType()) {
                case ENDEACH:
                // Code for expansion specified on line 104 of QUTE.javacc
                // Code for expansion specified on line 104 of QUTE.javacc
                consumeToken(TokenType.ENDEACH, false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 104 of QUTE.javacc
                // Code for expansion specified on line 104 of QUTE.javacc
                consumeToken(TokenType.ABBREVIATED_END, false);
                break;
                default:
                pushOntoCallStack("EachSection", "QUTE.javacc", 104);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDEACH), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from EachSection");
        }
        catch(ParseException e) {
            parseException22=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException22==null) {
                restoreCallStack(callStackSize70);
            }
            if (buildTree) {
                if (parseException22==null) {
                    EachSection22.setEndLine(current_token.getEndLine());
                    EachSection22.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EachSection22, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException22: "+parseException22.getMessage());
                    EachSection22.setParseException(parseException22);
                    if (EachSection22forced) {
                        restoreCallStack(callStackSize70);
                        Token virtualToken=insertVirtualToken(TokenType.ABBREVIATED_END);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in EachSection\n";
                        message+=parseException22.getMessage();
                        addParsingProblem(new ParsingProblem(message, EachSection22));
                        closeNodeScope(EachSection22, true);
                    }
                    else {
                        closeNodeScope(EachSection22, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException22");
                        throw parseException22;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>ForSection_FIRST_SET=EnumSet.of(TokenType.FOR);
    static private final EnumSet<TokenType>ForSection_FINAL_SET=EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDFOR);
    // QUTE.javacc, line 107
    final public void ForSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 107 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 109 of QUTE.javacc
        boolean ForSection23forced=this.tolerantParsing;
        ForSection ForSection23=null;
        if (buildTree) {
            ForSection23=new ForSection();
            Token start=getToken(1);
            ForSection23.setBeginLine(start.beginLine);
            ForSection23.setBeginColumn(start.beginColumn);
            ForSection23.setInputSource(this.getInputSource());
            openNodeScope(ForSection23);
        }
        ParseException parseException23=null;
        int callStackSize73=callStack.size();
        try {
            // Code for expansion specified on line 109 of QUTE.javacc
            consumeToken(TokenType.FOR, false);
            // Code for expansion specified on line 110 of QUTE.javacc
            consumeToken(TokenType.C_IDENTIFIER, false);
            // Code for expansion specified on line 111 of QUTE.javacc
            consumeToken(TokenType.IN, false);
            // Code for Expression specified on line 112 of QUTE.javacc
            pushOntoCallStack("ForSection", "QUTE.javacc", 112);
            boolean boolean74=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean74;
            }
            // Code for expansion specified on line 113 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, false);
            // Code for expansion specified on line 114 of QUTE.javacc
            TokenType tokentype76=nextTokenType();
            if (tokentype76==TokenType.TEXT||tokentype76==TokenType.OPEN_CURLY||tokentype76==TokenType.EACH||tokentype76==TokenType.FOR||tokentype76==TokenType.IF||tokentype76==TokenType.QUTE_INCLUDE||tokentype76==TokenType.INSERT||tokentype76==TokenType.WITH||tokentype76==TokenType.START_SECTION||tokentype76==TokenType.START_PARAMETER_DECL) {
                // Code for expansion specified on line 114 of QUTE.javacc
                // Code for Block specified on line 114 of QUTE.javacc
                pushOntoCallStack("ForSection", "QUTE.javacc", 114);
                boolean boolean75=currentNTForced;
                currentNTForced=false;
                try {
                    Block();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean75;
                }
            }
            // Code for expansion specified on line 115 of QUTE.javacc
            switch(nextTokenType()) {
                case ENDFOR:
                // Code for expansion specified on line 115 of QUTE.javacc
                // Code for expansion specified on line 115 of QUTE.javacc
                consumeToken(TokenType.ENDFOR, false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 115 of QUTE.javacc
                // Code for expansion specified on line 115 of QUTE.javacc
                consumeToken(TokenType.ABBREVIATED_END, false);
                break;
                default:
                pushOntoCallStack("ForSection", "QUTE.javacc", 115);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDFOR), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ForSection");
        }
        catch(ParseException e) {
            parseException23=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException23==null) {
                restoreCallStack(callStackSize73);
            }
            if (buildTree) {
                if (parseException23==null) {
                    ForSection23.setEndLine(current_token.getEndLine());
                    ForSection23.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ForSection23, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException23: "+parseException23.getMessage());
                    ForSection23.setParseException(parseException23);
                    if (ForSection23forced) {
                        restoreCallStack(callStackSize73);
                        Token virtualToken=insertVirtualToken(TokenType.ABBREVIATED_END);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in ForSection\n";
                        message+=parseException23.getMessage();
                        addParsingProblem(new ParsingProblem(message, ForSection23));
                        closeNodeScope(ForSection23, true);
                    }
                    else {
                        closeNodeScope(ForSection23, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException23");
                        throw parseException23;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>IfSection_FIRST_SET=EnumSet.of(TokenType.IF);
    static private final EnumSet<TokenType>IfSection_FINAL_SET=EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDIF);
    // QUTE.javacc, line 118
    final public void IfSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 118 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 120 of QUTE.javacc
        boolean IfSection24forced=this.tolerantParsing;
        IfSection IfSection24=null;
        if (buildTree) {
            IfSection24=new IfSection();
            Token start=getToken(1);
            IfSection24.setBeginLine(start.beginLine);
            IfSection24.setBeginColumn(start.beginColumn);
            IfSection24.setInputSource(this.getInputSource());
            openNodeScope(IfSection24);
        }
        ParseException parseException24=null;
        int callStackSize77=callStack.size();
        try {
            // Code for expansion specified on line 120 of QUTE.javacc
            consumeToken(TokenType.IF, false);
            // Code for Expression specified on line 121 of QUTE.javacc
            pushOntoCallStack("IfSection", "QUTE.javacc", 121);
            boolean boolean78=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean78;
            }
            // Code for expansion specified on line 122 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, false);
            // Code for Block specified on line 123 of QUTE.javacc
            pushOntoCallStack("IfSection", "QUTE.javacc", 123);
            boolean boolean79=currentNTForced;
            currentNTForced=false;
            try {
                Block();
            }
            finally {
                popCallStack();
                currentNTForced=boolean79;
            }
            // Code for expansion specified on line 124 of QUTE.javacc
            ZeroOrMore$QUTE_javacc$line_124$column_21:
            while (true) {
                TokenType tokentype80=nextTokenType();
                if (!(tokentype80==TokenType.ELSEIF)) {
                    break ZeroOrMore$QUTE_javacc$line_124$column_21;
                }
                // Code for expansion specified on line 124 of QUTE.javacc
                // Code for ElseIfSection specified on line 124 of QUTE.javacc
                pushOntoCallStack("IfSection", "QUTE.javacc", 124);
                boolean boolean81=currentNTForced;
                currentNTForced=false;
                try {
                    ElseIfSection();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean81;
                }
            }
            // Code for expansion specified on line 125 of QUTE.javacc
            TokenType tokentype83=nextTokenType();
            if (tokentype83==TokenType.ELSE) {
                // Code for expansion specified on line 125 of QUTE.javacc
                // Code for ElseBlock specified on line 125 of QUTE.javacc
                pushOntoCallStack("IfSection", "QUTE.javacc", 125);
                boolean boolean82=currentNTForced;
                currentNTForced=false;
                try {
                    ElseBlock();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean82;
                }
            }
            // Code for expansion specified on line 126 of QUTE.javacc
            switch(nextTokenType()) {
                case ENDIF:
                // Code for expansion specified on line 126 of QUTE.javacc
                // Code for expansion specified on line 126 of QUTE.javacc
                consumeToken(TokenType.ENDIF, false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 126 of QUTE.javacc
                // Code for expansion specified on line 126 of QUTE.javacc
                consumeToken(TokenType.ABBREVIATED_END, false);
                break;
                default:
                pushOntoCallStack("IfSection", "QUTE.javacc", 126);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDIF), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from IfSection");
        }
        catch(ParseException e) {
            parseException24=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException24==null) {
                restoreCallStack(callStackSize77);
            }
            if (buildTree) {
                if (parseException24==null) {
                    IfSection24.setEndLine(current_token.getEndLine());
                    IfSection24.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(IfSection24, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException24: "+parseException24.getMessage());
                    IfSection24.setParseException(parseException24);
                    if (IfSection24forced) {
                        restoreCallStack(callStackSize77);
                        Token virtualToken=insertVirtualToken(TokenType.ABBREVIATED_END);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in IfSection\n";
                        message+=parseException24.getMessage();
                        addParsingProblem(new ParsingProblem(message, IfSection24));
                        closeNodeScope(IfSection24, true);
                    }
                    else {
                        closeNodeScope(IfSection24, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException24");
                        throw parseException24;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>ElseIfSection_FIRST_SET=EnumSet.of(TokenType.ELSEIF);
    static private final EnumSet<TokenType>ElseIfSection_FINAL_SET=EnumSet.of(TokenType.TEXT, TokenType.ABBREVIATED_END, TokenType.ENDEACH, TokenType.ENDFOR, TokenType.ENDIF, TokenType.ENDINCLUDE, TokenType.ENDINSERT, TokenType.ENDWITH, TokenType.END_SECTION, TokenType.CLOSE_CURLY, TokenType.CLOSE_EMPTY);
    // QUTE.javacc, line 129
    final public void ElseIfSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 129 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 131 of QUTE.javacc
        boolean ElseIfSection25forced=this.tolerantParsing&&currentNTForced;
        ElseIfSection ElseIfSection25=null;
        if (buildTree) {
            ElseIfSection25=new ElseIfSection();
            Token start=getToken(1);
            ElseIfSection25.setBeginLine(start.beginLine);
            ElseIfSection25.setBeginColumn(start.beginColumn);
            ElseIfSection25.setInputSource(this.getInputSource());
            openNodeScope(ElseIfSection25);
        }
        ParseException parseException25=null;
        int callStackSize84=callStack.size();
        try {
            // Code for expansion specified on line 131 of QUTE.javacc
            consumeToken(TokenType.ELSEIF, false);
            // Code for Expression specified on line 132 of QUTE.javacc
            pushOntoCallStack("ElseIfSection", "QUTE.javacc", 132);
            boolean boolean85=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean85;
            }
            // Code for expansion specified on line 133 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, true);
            // Code for Block specified on line 134 of QUTE.javacc
            pushOntoCallStack("ElseIfSection", "QUTE.javacc", 134);
            boolean boolean86=currentNTForced;
            currentNTForced=false;
            try {
                Block();
            }
            finally {
                popCallStack();
                currentNTForced=boolean86;
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ElseIfSection");
        }
        catch(ParseException e) {
            parseException25=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException25==null) {
                restoreCallStack(callStackSize84);
            }
            if (buildTree) {
                if (parseException25==null) {
                    ElseIfSection25.setEndLine(current_token.getEndLine());
                    ElseIfSection25.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ElseIfSection25, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException25: "+parseException25.getMessage());
                    ElseIfSection25.setParseException(parseException25);
                    if (ElseIfSection25forced) {
                        restoreCallStack(callStackSize84);
                        Token virtualToken=insertVirtualToken(TokenType.TEXT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in ElseIfSection\n";
                        message+=parseException25.getMessage();
                        addParsingProblem(new ParsingProblem(message, ElseIfSection25));
                        closeNodeScope(ElseIfSection25, true);
                    }
                    else {
                        closeNodeScope(ElseIfSection25, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException25");
                        throw parseException25;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>ElseBlock_FIRST_SET=EnumSet.of(TokenType.ELSE);
    static private final EnumSet<TokenType>ElseBlock_FINAL_SET=EnumSet.of(TokenType.TEXT, TokenType.ABBREVIATED_END, TokenType.ENDEACH, TokenType.ENDFOR, TokenType.ENDIF, TokenType.ENDINCLUDE, TokenType.ENDINSERT, TokenType.ENDWITH, TokenType.END_SECTION, TokenType.CLOSE_CURLY, TokenType.CLOSE_EMPTY);
    // QUTE.javacc, line 137
    final public void ElseBlock() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 137 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 139 of QUTE.javacc
        boolean ElseBlock26forced=this.tolerantParsing&&currentNTForced;
        ElseBlock ElseBlock26=null;
        if (buildTree) {
            ElseBlock26=new ElseBlock();
            Token start=getToken(1);
            ElseBlock26.setBeginLine(start.beginLine);
            ElseBlock26.setBeginColumn(start.beginColumn);
            ElseBlock26.setInputSource(this.getInputSource());
            openNodeScope(ElseBlock26);
        }
        ParseException parseException26=null;
        int callStackSize87=callStack.size();
        try {
            // Code for expansion specified on line 139 of QUTE.javacc
            consumeToken(TokenType.ELSE, false);
            // Code for Block specified on line 140 of QUTE.javacc
            pushOntoCallStack("ElseBlock", "QUTE.javacc", 140);
            boolean boolean88=currentNTForced;
            currentNTForced=false;
            try {
                Block();
            }
            finally {
                popCallStack();
                currentNTForced=boolean88;
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ElseBlock");
        }
        catch(ParseException e) {
            parseException26=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException26==null) {
                restoreCallStack(callStackSize87);
            }
            if (buildTree) {
                if (parseException26==null) {
                    ElseBlock26.setEndLine(current_token.getEndLine());
                    ElseBlock26.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ElseBlock26, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException26: "+parseException26.getMessage());
                    ElseBlock26.setParseException(parseException26);
                    if (ElseBlock26forced) {
                        restoreCallStack(callStackSize87);
                        Token virtualToken=insertVirtualToken(TokenType.TEXT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in ElseBlock\n";
                        message+=parseException26.getMessage();
                        addParsingProblem(new ParsingProblem(message, ElseBlock26));
                        closeNodeScope(ElseBlock26, true);
                    }
                    else {
                        closeNodeScope(ElseBlock26, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException26");
                        throw parseException26;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>IncludeSection_FIRST_SET=EnumSet.of(TokenType.QUTE_INCLUDE);
    static private final EnumSet<TokenType>IncludeSection_FINAL_SET=EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDINCLUDE);
    // QUTE.javacc, line 143
    final public void IncludeSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 143 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 145 of QUTE.javacc
        boolean IncludeSection27forced=this.tolerantParsing;
        IncludeSection IncludeSection27=null;
        if (buildTree) {
            IncludeSection27=new IncludeSection();
            Token start=getToken(1);
            IncludeSection27.setBeginLine(start.beginLine);
            IncludeSection27.setBeginColumn(start.beginColumn);
            IncludeSection27.setInputSource(this.getInputSource());
            openNodeScope(IncludeSection27);
        }
        ParseException parseException27=null;
        int callStackSize89=callStack.size();
        try {
            // Code for expansion specified on line 145 of QUTE.javacc
            consumeToken(TokenType.QUTE_INCLUDE, false);
            // Code for Expression specified on line 146 of QUTE.javacc
            pushOntoCallStack("IncludeSection", "QUTE.javacc", 146);
            boolean boolean90=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean90;
            }
            // Code for expansion specified on line 147 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, false);
            // Code for Block specified on line 148 of QUTE.javacc
            pushOntoCallStack("IncludeSection", "QUTE.javacc", 148);
            boolean boolean91=currentNTForced;
            currentNTForced=false;
            try {
                Block();
            }
            finally {
                popCallStack();
                currentNTForced=boolean91;
            }
            // Code for expansion specified on line 149 of QUTE.javacc
            switch(nextTokenType()) {
                case ENDINCLUDE:
                // Code for expansion specified on line 149 of QUTE.javacc
                // Code for expansion specified on line 149 of QUTE.javacc
                consumeToken(TokenType.ENDINCLUDE, false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 149 of QUTE.javacc
                // Code for expansion specified on line 149 of QUTE.javacc
                consumeToken(TokenType.ABBREVIATED_END, false);
                break;
                default:
                pushOntoCallStack("IncludeSection", "QUTE.javacc", 149);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDINCLUDE), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from IncludeSection");
        }
        catch(ParseException e) {
            parseException27=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException27==null) {
                restoreCallStack(callStackSize89);
            }
            if (buildTree) {
                if (parseException27==null) {
                    IncludeSection27.setEndLine(current_token.getEndLine());
                    IncludeSection27.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(IncludeSection27, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException27: "+parseException27.getMessage());
                    IncludeSection27.setParseException(parseException27);
                    if (IncludeSection27forced) {
                        restoreCallStack(callStackSize89);
                        Token virtualToken=insertVirtualToken(TokenType.ABBREVIATED_END);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in IncludeSection\n";
                        message+=parseException27.getMessage();
                        addParsingProblem(new ParsingProblem(message, IncludeSection27));
                        closeNodeScope(IncludeSection27, true);
                    }
                    else {
                        closeNodeScope(IncludeSection27, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException27");
                        throw parseException27;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>InsertSection_FIRST_SET=EnumSet.of(TokenType.INSERT);
    static private final EnumSet<TokenType>InsertSection_FINAL_SET=EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDINSERT);
    // QUTE.javacc, line 152
    final public void InsertSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 152 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 154 of QUTE.javacc
        boolean InsertSection28forced=this.tolerantParsing;
        InsertSection InsertSection28=null;
        if (buildTree) {
            InsertSection28=new InsertSection();
            Token start=getToken(1);
            InsertSection28.setBeginLine(start.beginLine);
            InsertSection28.setBeginColumn(start.beginColumn);
            InsertSection28.setInputSource(this.getInputSource());
            openNodeScope(InsertSection28);
        }
        ParseException parseException28=null;
        int callStackSize92=callStack.size();
        try {
            // Code for expansion specified on line 154 of QUTE.javacc
            consumeToken(TokenType.INSERT, false);
            // Code for Expression specified on line 155 of QUTE.javacc
            pushOntoCallStack("InsertSection", "QUTE.javacc", 155);
            boolean boolean93=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean93;
            }
            // Code for expansion specified on line 156 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, false);
            // Code for Block specified on line 157 of QUTE.javacc
            pushOntoCallStack("InsertSection", "QUTE.javacc", 157);
            boolean boolean94=currentNTForced;
            currentNTForced=false;
            try {
                Block();
            }
            finally {
                popCallStack();
                currentNTForced=boolean94;
            }
            // Code for expansion specified on line 158 of QUTE.javacc
            switch(nextTokenType()) {
                case ENDINSERT:
                // Code for expansion specified on line 158 of QUTE.javacc
                // Code for expansion specified on line 158 of QUTE.javacc
                consumeToken(TokenType.ENDINSERT, false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 158 of QUTE.javacc
                // Code for expansion specified on line 158 of QUTE.javacc
                consumeToken(TokenType.ABBREVIATED_END, false);
                break;
                default:
                pushOntoCallStack("InsertSection", "QUTE.javacc", 158);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDINSERT), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from InsertSection");
        }
        catch(ParseException e) {
            parseException28=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException28==null) {
                restoreCallStack(callStackSize92);
            }
            if (buildTree) {
                if (parseException28==null) {
                    InsertSection28.setEndLine(current_token.getEndLine());
                    InsertSection28.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(InsertSection28, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException28: "+parseException28.getMessage());
                    InsertSection28.setParseException(parseException28);
                    if (InsertSection28forced) {
                        restoreCallStack(callStackSize92);
                        Token virtualToken=insertVirtualToken(TokenType.ABBREVIATED_END);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in InsertSection\n";
                        message+=parseException28.getMessage();
                        addParsingProblem(new ParsingProblem(message, InsertSection28));
                        closeNodeScope(InsertSection28, true);
                    }
                    else {
                        closeNodeScope(InsertSection28, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException28");
                        throw parseException28;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>WithSection_FIRST_SET=EnumSet.of(TokenType.WITH);
    static private final EnumSet<TokenType>WithSection_FINAL_SET=EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDWITH);
    // QUTE.javacc, line 161
    final public void WithSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 161 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 163 of QUTE.javacc
        boolean WithSection29forced=this.tolerantParsing;
        WithSection WithSection29=null;
        if (buildTree) {
            WithSection29=new WithSection();
            Token start=getToken(1);
            WithSection29.setBeginLine(start.beginLine);
            WithSection29.setBeginColumn(start.beginColumn);
            WithSection29.setInputSource(this.getInputSource());
            openNodeScope(WithSection29);
        }
        ParseException parseException29=null;
        int callStackSize95=callStack.size();
        try {
            // Code for expansion specified on line 163 of QUTE.javacc
            consumeToken(TokenType.WITH, false);
            // Code for Expression specified on line 164 of QUTE.javacc
            pushOntoCallStack("WithSection", "QUTE.javacc", 164);
            boolean boolean96=currentNTForced;
            currentNTForced=false;
            try {
                Expression();
            }
            finally {
                popCallStack();
                currentNTForced=boolean96;
            }
            // Code for expansion specified on line 165 of QUTE.javacc
            consumeToken(TokenType.CLOSE_CURLY, false);
            // Code for Block specified on line 166 of QUTE.javacc
            pushOntoCallStack("WithSection", "QUTE.javacc", 166);
            boolean boolean97=currentNTForced;
            currentNTForced=false;
            try {
                Block();
            }
            finally {
                popCallStack();
                currentNTForced=boolean97;
            }
            // Code for expansion specified on line 167 of QUTE.javacc
            switch(nextTokenType()) {
                case ENDWITH:
                // Code for expansion specified on line 167 of QUTE.javacc
                // Code for expansion specified on line 167 of QUTE.javacc
                consumeToken(TokenType.ENDWITH, false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 167 of QUTE.javacc
                // Code for expansion specified on line 167 of QUTE.javacc
                consumeToken(TokenType.ABBREVIATED_END, false);
                break;
                default:
                pushOntoCallStack("WithSection", "QUTE.javacc", 167);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.ABBREVIATED_END, TokenType.ENDWITH), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from WithSection");
        }
        catch(ParseException e) {
            parseException29=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException29==null) {
                restoreCallStack(callStackSize95);
            }
            if (buildTree) {
                if (parseException29==null) {
                    WithSection29.setEndLine(current_token.getEndLine());
                    WithSection29.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(WithSection29, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException29: "+parseException29.getMessage());
                    WithSection29.setParseException(parseException29);
                    if (WithSection29forced) {
                        restoreCallStack(callStackSize95);
                        Token virtualToken=insertVirtualToken(TokenType.ABBREVIATED_END);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in WithSection\n";
                        message+=parseException29.getMessage();
                        addParsingProblem(new ParsingProblem(message, WithSection29));
                        closeNodeScope(WithSection29, true);
                    }
                    else {
                        closeNodeScope(WithSection29, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException29");
                        throw parseException29;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>UserSection_FIRST_SET=EnumSet.of(TokenType.START_SECTION);
    static private final EnumSet<TokenType>UserSection_FINAL_SET=EnumSet.of(TokenType.ABBREVIATED_END, TokenType.END_SECTION, TokenType.CLOSE_EMPTY);
    // QUTE.javacc, line 170
    final public void UserSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 170 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 172 of QUTE.javacc
        boolean UserSection30forced=this.tolerantParsing&&currentNTForced;
        UserSection UserSection30=null;
        if (buildTree) {
            UserSection30=new UserSection();
            Token start=getToken(1);
            UserSection30.setBeginLine(start.beginLine);
            UserSection30.setBeginColumn(start.beginColumn);
            UserSection30.setInputSource(this.getInputSource());
            openNodeScope(UserSection30);
        }
        ParseException parseException30=null;
        int callStackSize98=callStack.size();
        try {
            // Code for expansion specified on line 172 of QUTE.javacc
            consumeToken(TokenType.START_SECTION, false);
            // Code for expansion specified on line 172 of QUTE.javacc
            TokenType tokentype100=nextTokenType();
            if (tokentype100==TokenType.PLUS||tokentype100==TokenType.MINUS||tokentype100==TokenType.EXCLAM||tokentype100==TokenType.NULL||tokentype100==TokenType.TRUE||tokentype100==TokenType.FALSE||tokentype100==TokenType.INTEGER||tokentype100==TokenType.DECIMAL||tokentype100==TokenType.STRING_LITERAL||tokentype100==TokenType.RAW_STRING||tokentype100==TokenType.C_IDENTIFIER||tokentype100==TokenType.OPEN_PAREN) {
                // Code for expansion specified on line 172 of QUTE.javacc
                // Code for Expression specified on line 172 of QUTE.javacc
                pushOntoCallStack("UserSection", "QUTE.javacc", 172);
                boolean boolean99=currentNTForced;
                currentNTForced=false;
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean99;
                }
            }
            // Code for expansion specified on line 174 of QUTE.javacc
            switch(nextTokenType()) {
                case CLOSE_EMPTY:
                // Code for expansion specified on line 174 of QUTE.javacc
                // Code for expansion specified on line 174 of QUTE.javacc
                consumeToken(TokenType.CLOSE_EMPTY, true);
                break;
                case CLOSE_CURLY:
                // Code for expansion specified on line 176 of QUTE.javacc
                // Code for expansion specified on line 177 of QUTE.javacc
                // Code for expansion specified on line 177 of QUTE.javacc
                consumeToken(TokenType.CLOSE_CURLY, false);
                // Code for Block specified on line 178 of QUTE.javacc
                pushOntoCallStack("UserSection", "QUTE.javacc", 178);
                boolean boolean101=currentNTForced;
                currentNTForced=false;
                try {
                    Block();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean101;
                }
                // Code for expansion specified on line 180 of QUTE.javacc
                switch(nextTokenType()) {
                    case END_SECTION:
                    // Code for expansion specified on line 180 of QUTE.javacc
                    // Code for expansion specified on line 180 of QUTE.javacc
                    consumeToken(TokenType.END_SECTION, false);
                    break;
                    case ABBREVIATED_END:
                    // Code for expansion specified on line 180 of QUTE.javacc
                    // Code for expansion specified on line 180 of QUTE.javacc
                    consumeToken(TokenType.ABBREVIATED_END, false);
                    break;
                    default:
                    pushOntoCallStack("UserSection", "QUTE.javacc", 180);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.ABBREVIATED_END, TokenType.END_SECTION), callStack);
                }
                break;
                default:
                pushOntoCallStack("UserSection", "QUTE.javacc", 174);
                throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.CLOSE_CURLY, TokenType.CLOSE_EMPTY), callStack);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from UserSection");
        }
        catch(ParseException e) {
            parseException30=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException30==null) {
                restoreCallStack(callStackSize98);
            }
            if (buildTree) {
                if (parseException30==null) {
                    UserSection30.setEndLine(current_token.getEndLine());
                    UserSection30.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(UserSection30, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException30: "+parseException30.getMessage());
                    UserSection30.setParseException(parseException30);
                    if (UserSection30forced) {
                        restoreCallStack(callStackSize98);
                        Token virtualToken=insertVirtualToken(TokenType.ABBREVIATED_END);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in UserSection\n";
                        message+=parseException30.getMessage();
                        addParsingProblem(new ParsingProblem(message, UserSection30));
                        closeNodeScope(UserSection30, true);
                    }
                    else {
                        closeNodeScope(UserSection30, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException30");
                        throw parseException30;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>Block_FIRST_SET=EnumSet.of(TokenType.TEXT, TokenType.OPEN_CURLY, TokenType.EACH, TokenType.FOR, TokenType.IF, TokenType.QUTE_INCLUDE, TokenType.INSERT, TokenType.WITH, TokenType.START_SECTION, TokenType.START_PARAMETER_DECL);
    static private final EnumSet<TokenType>Block_FINAL_SET=EnumSet.of(TokenType.TEXT, TokenType.ABBREVIATED_END, TokenType.ENDEACH, TokenType.ENDFOR, TokenType.ENDIF, TokenType.ENDINCLUDE, TokenType.ENDINSERT, TokenType.ENDWITH, TokenType.END_SECTION, TokenType.CLOSE_CURLY, TokenType.CLOSE_EMPTY);
    // QUTE.javacc, line 186
    final public void Block() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 186 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 188 of QUTE.javacc
        boolean Block31forced=this.tolerantParsing&&currentNTForced;
        Block Block31=null;
        if (buildTree) {
            Block31=new Block();
            Token start=getToken(1);
            Block31.setBeginLine(start.beginLine);
            Block31.setBeginColumn(start.beginColumn);
            Block31.setInputSource(this.getInputSource());
            openNodeScope(Block31);
        }
        ParseException parseException31=null;
        int callStackSize102=callStack.size();
        try {
            // Code for expansion specified on line 208 of QUTE.javacc
            OneOrMore$QUTE_javacc$line_208$column_5:
            while (true) {
                // Code for expansion specified on line 189 of QUTE.javacc
                switch(nextTokenType()) {
                    case TEXT:
                    // Code for expansion specified on line 189 of QUTE.javacc
                    // Code for expansion specified on line 189 of QUTE.javacc
                    consumeToken(TokenType.TEXT, false);
                    break;
                    case START_PARAMETER_DECL:
                    // Code for expansion specified on line 191 of QUTE.javacc
                    // Code for ParameterDeclaration specified on line 191 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 191);
                    try {
                        ParameterDeclaration();
                    }
                    finally {
                        popCallStack();
                    }
                    break;
                    case OPEN_CURLY:
                    // Code for expansion specified on line 193 of QUTE.javacc
                    // Code for Interpolation specified on line 193 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 193);
                    try {
                        Interpolation();
                    }
                    finally {
                        popCallStack();
                    }
                    break;
                    case EACH:
                    // Code for expansion specified on line 195 of QUTE.javacc
                    // Code for EachSection specified on line 195 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 195);
                    try {
                        EachSection();
                    }
                    finally {
                        popCallStack();
                    }
                    break;
                    case FOR:
                    // Code for expansion specified on line 197 of QUTE.javacc
                    // Code for ForSection specified on line 197 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 197);
                    try {
                        ForSection();
                    }
                    finally {
                        popCallStack();
                    }
                    break;
                    case IF:
                    // Code for expansion specified on line 199 of QUTE.javacc
                    // Code for IfSection specified on line 199 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 199);
                    try {
                        IfSection();
                    }
                    finally {
                        popCallStack();
                    }
                    break;
                    case QUTE_INCLUDE:
                    // Code for expansion specified on line 201 of QUTE.javacc
                    // Code for IncludeSection specified on line 201 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 201);
                    try {
                        IncludeSection();
                    }
                    finally {
                        popCallStack();
                    }
                    break;
                    case INSERT:
                    // Code for expansion specified on line 203 of QUTE.javacc
                    // Code for InsertSection specified on line 203 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 203);
                    try {
                        InsertSection();
                    }
                    finally {
                        popCallStack();
                    }
                    break;
                    case WITH:
                    // Code for expansion specified on line 205 of QUTE.javacc
                    // Code for WithSection specified on line 205 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 205);
                    try {
                        WithSection();
                    }
                    finally {
                        popCallStack();
                    }
                    break;
                    case START_SECTION:
                    // Code for expansion specified on line 207 of QUTE.javacc
                    // Code for UserSection specified on line 207 of QUTE.javacc
                    pushOntoCallStack("Block", "QUTE.javacc", 207);
                    boolean boolean103=currentNTForced;
                    currentNTForced=false;
                    try {
                        UserSection();
                    }
                    finally {
                        popCallStack();
                        currentNTForced=boolean103;
                    }
                    break;
                    default:
                    pushOntoCallStack("Block", "QUTE.javacc", 189);
                    throw new ParseException(current_token.getNext(), EnumSet.of(TokenType.TEXT, TokenType.OPEN_CURLY, TokenType.EACH, TokenType.FOR, TokenType.IF, TokenType.QUTE_INCLUDE, TokenType.INSERT, TokenType.WITH, TokenType.START_SECTION, TokenType.START_PARAMETER_DECL), callStack);
                }
                TokenType tokentype104=nextTokenType();
                if (!(tokentype104==TokenType.TEXT||tokentype104==TokenType.OPEN_CURLY||tokentype104==TokenType.EACH||tokentype104==TokenType.FOR||tokentype104==TokenType.IF||tokentype104==TokenType.QUTE_INCLUDE||tokentype104==TokenType.INSERT||tokentype104==TokenType.WITH||tokentype104==TokenType.START_SECTION||tokentype104==TokenType.START_PARAMETER_DECL)) {
                    break OneOrMore$QUTE_javacc$line_208$column_5;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from Block");
        }
        catch(ParseException e) {
            parseException31=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException31==null) {
                restoreCallStack(callStackSize102);
            }
            if (buildTree) {
                if (parseException31==null) {
                    Block31.setEndLine(current_token.getEndLine());
                    Block31.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Block31, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException31: "+parseException31.getMessage());
                    Block31.setParseException(parseException31);
                    if (Block31forced) {
                        restoreCallStack(callStackSize102);
                        Token virtualToken=insertVirtualToken(TokenType.TEXT);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in Block\n";
                        message+=parseException31.getMessage();
                        addParsingProblem(new ParsingProblem(message, Block31));
                        closeNodeScope(Block31, true);
                    }
                    else {
                        closeNodeScope(Block31, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException31");
                        throw parseException31;
                    }
                }
            }
        }
    }

    static private final EnumSet<TokenType>Root_FIRST_SET=EnumSet.of(TokenType.EOF, TokenType.TEXT, TokenType.OPEN_CURLY, TokenType.EACH, TokenType.FOR, TokenType.IF, TokenType.QUTE_INCLUDE, TokenType.INSERT, TokenType.WITH, TokenType.START_SECTION, TokenType.START_PARAMETER_DECL);
    static private final EnumSet<TokenType>Root_FINAL_SET=EnumSet.of(TokenType.EOF);
    // QUTE.javacc, line 212
    final public void Root() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 212 of QUTE.javacc");
        if (cancelled) throw new CancellationException();
        // Code for expansion specified on line 214 of QUTE.javacc
        boolean Root32forced=this.tolerantParsing;
        Root Root32=null;
        if (buildTree) {
            Root32=new Root();
            Token start=getToken(1);
            Root32.setBeginLine(start.beginLine);
            Root32.setBeginColumn(start.beginColumn);
            Root32.setInputSource(this.getInputSource());
            openNodeScope(Root32);
        }
        ParseException parseException32=null;
        int callStackSize105=callStack.size();
        try {
            // Code for expansion specified on line 214 of QUTE.javacc
            TokenType tokentype107=nextTokenType();
            if (tokentype107==TokenType.TEXT||tokentype107==TokenType.OPEN_CURLY||tokentype107==TokenType.EACH||tokentype107==TokenType.FOR||tokentype107==TokenType.IF||tokentype107==TokenType.QUTE_INCLUDE||tokentype107==TokenType.INSERT||tokentype107==TokenType.WITH||tokentype107==TokenType.START_SECTION||tokentype107==TokenType.START_PARAMETER_DECL) {
                // Code for expansion specified on line 214 of QUTE.javacc
                // Code for Block specified on line 214 of QUTE.javacc
                pushOntoCallStack("Root", "QUTE.javacc", 214);
                boolean boolean106=currentNTForced;
                currentNTForced=false;
                try {
                    Block();
                }
                finally {
                    popCallStack();
                    currentNTForced=boolean106;
                }
            }
            // Code for expansion specified on line 215 of QUTE.javacc
            consumeToken(TokenType.EOF, false);
            if (trace_enabled) LOGGER.info("Exiting normally from Root");
        }
        catch(ParseException e) {
            parseException32=e;
            if (trace_enabled) LOGGER.info("We have a parse error but are in in fault-tolerant mode, so we try to handle it.");
        }
        finally {
            if (parseException32==null) {
                restoreCallStack(callStackSize105);
            }
            if (buildTree) {
                if (parseException32==null) {
                    Root32.setEndLine(current_token.getEndLine());
                    Root32.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Root32, nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException32: "+parseException32.getMessage());
                    Root32.setParseException(parseException32);
                    if (Root32forced) {
                        restoreCallStack(callStackSize105);
                        Token virtualToken=insertVirtualToken(TokenType.EOF);
                        resetNextToken();
                        if (tokensAreNodes) {
                            currentNodeScope.add(virtualToken);
                        }
                        String message="Inserted virtual token of type "+virtualToken.getType()+"\non line "+virtualToken.getBeginLine()+", column "+virtualToken.getBeginColumn()+" of "+token_source.getInputSource()+"\n to complete expansion in Root\n";
                        message+=parseException32.getMessage();
                        addParsingProblem(new ParsingProblem(message, Root32));
                        closeNodeScope(Root32, true);
                    }
                    else {
                        closeNodeScope(Root32, false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException32");
                        throw parseException32;
                    }
                }
            }
        }
    }

    static private final int INDEFINITE=Integer.MAX_VALUE;
    private Token currentLookaheadToken, lastScannedToken;
    private int remainingLookahead;
    private boolean indefiniteLookahead;
    private boolean semanticLookahead;
    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess LOOKAHEAD_SUCCESS=new LookaheadSuccess();
    private boolean scanToken(TokenType type) {
        if (currentLookaheadToken==lastScannedToken) {
            if (!indefiniteLookahead) {
                --remainingLookahead;
            }
            if (currentLookaheadToken.getNext()==null) {
                Token nextToken=token_source.getNextToken();
                currentLookaheadToken.setNext(nextToken);
                currentLookaheadToken=nextToken;
                lastScannedToken=nextToken;
            }
            else {
                lastScannedToken=currentLookaheadToken=currentLookaheadToken.getNext();
            }
        }
        else {
            currentLookaheadToken=currentLookaheadToken.getNext();
        }
        if (currentLookaheadToken.getType()!=type) return true;
        if (!indefiniteLookahead) {
            if (remainingLookahead==0&&currentLookaheadToken==lastScannedToken) throw LOOKAHEAD_SUCCESS;
        }
        return false;
    }

    //====================================
    // Start of methods for Phase 2 Lookaheads
    //====================================
    private boolean lookahead$QEL_javacc$line_175$column_20(int maxLookahead) {
        indefiniteLookahead=(maxLookahead==INDEFINITE);
        remainingLookahead=maxLookahead;
        lastScannedToken=currentLookaheadToken=current_token;
        try {
            return!scan$QEL_javacc$line_175$column_20();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean lookahead$QEL_javacc$line_185$column_19(int maxLookahead) {
        indefiniteLookahead=(maxLookahead==INDEFINITE);
        remainingLookahead=maxLookahead;
        lastScannedToken=currentLookaheadToken=current_token;
        try {
            return!scan$QEL_javacc$line_185$column_19();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean lookahead$QEL_javacc$line_224$column_19(int maxLookahead) {
        indefiniteLookahead=(maxLookahead==INDEFINITE);
        remainingLookahead=maxLookahead;
        lastScannedToken=currentLookaheadToken=current_token;
        try {
            return!scan$QEL_javacc$line_224$column_19();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean lookahead$QEL_javacc$line_237$column_15(int maxLookahead) {
        indefiniteLookahead=(maxLookahead==INDEFINITE);
        remainingLookahead=maxLookahead;
        lastScannedToken=currentLookaheadToken=current_token;
        try {
            return!scan$QEL_javacc$line_237$column_15();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    //====================================
    // Start of methods for Phase 3 Routines
    //====================================
    private boolean scan$QEL_javacc$line_175$column_20() {
        if (scan$QEL_javacc$line_183$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_185$column_19() {
        Token token108=currentLookaheadToken;
        if (scan$QEL_javacc$line_185$column_19$()) {
            currentLookaheadToken=token108;
            if (scan$QEL_javacc$line_185$column_26()) return true;
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_224$column_19() {
        if (scanToken(TokenType.EXCLAM)) return true;
        if (scan$QEL_javacc$line_250$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_237$column_15() {
        Token token109=currentLookaheadToken;
        if (scan$QEL_javacc$line_237$column_15$()) {
            currentLookaheadToken=token109;
            if (scan$QEL_javacc$line_237$column_21()) {
                currentLookaheadToken=token109;
                if (scan$QEL_javacc$line_237$column_36()) return true;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_183$column_5() {
        if (scan$QEL_javacc$line_193$column_5()) return true;
        while (true) {
            Token token110=currentLookaheadToken;
            if (scan$QEL_javacc$line_185$column_9()) {
                currentLookaheadToken=token110;
                break;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_185$column_19$() {
        if (scanToken(TokenType.PLUS)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_185$column_26() {
        if (scanToken(TokenType.MINUS)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_250$column_5() {
        Token token111=currentLookaheadToken;
        if (scan$QEL_javacc$line_250$column_5$()) {
            currentLookaheadToken=token111;
            if (scan$QEL_javacc$line_252$column_5()) {
                currentLookaheadToken=token111;
                if (scan$QEL_javacc$line_254$column_5()) {
                    currentLookaheadToken=token111;
                    if (scan$QEL_javacc$line_256$column_5()) {
                        currentLookaheadToken=token111;
                        if (scan$QEL_javacc$line_258$column_5()) {
                            currentLookaheadToken=token111;
                            if (scan$QEL_javacc$line_260$column_5()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_237$column_15$() {
        if (scanToken(TokenType.DOT)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_237$column_21() {
        if (scanToken(TokenType.OPEN_BRACKET)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_237$column_36() {
        if (scanToken(TokenType.OPEN_PAREN)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_193$column_5() {
        if (scan$QEL_javacc$line_202$column_5()) return true;
        while (true) {
            Token token112=currentLookaheadToken;
            if (scan$QEL_javacc$line_195$column_11()) {
                currentLookaheadToken=token112;
                break;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_185$column_9() {
        Token token113=currentLookaheadToken;
        if (scan$QEL_javacc$line_186$column_13()) {
            currentLookaheadToken=token113;
            if (scan$QEL_javacc$line_186$column_20()) return true;
        }
        if (scan$QEL_javacc$line_193$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_250$column_5$() {
        if (scanToken(TokenType.C_IDENTIFIER)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_252$column_5() {
        if (scan$QEL_javacc$line_310$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_254$column_5() {
        if (scan$QEL_javacc$line_298$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_256$column_5() {
        if (scan$QEL_javacc$line_315$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_258$column_5() {
        if (scan$QEL_javacc$line_320$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_260$column_5() {
        if (scan$QEL_javacc$line_303$column_4()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_202$column_5() {
        Token token114=currentLookaheadToken;
        if (scan$QEL_javacc$line_202$column_5$()) {
            currentLookaheadToken=token114;
            if (scan$QEL_javacc$line_204$column_5()) {
                currentLookaheadToken=token114;
                if (scan$QEL_javacc$line_206$column_5()) return true;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_195$column_11() {
        Token token115=currentLookaheadToken;
        if (scan$QEL_javacc$line_195$column_12()) {
            currentLookaheadToken=token115;
            if (scan$QEL_javacc$line_195$column_20()) return true;
        }
        if (scan$QEL_javacc$line_202$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_186$column_13() {
        if (scanToken(TokenType.PLUS)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_186$column_20() {
        if (scanToken(TokenType.MINUS)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_310$column_5() {
        Token token116=currentLookaheadToken;
        if (scan$QEL_javacc$line_310$column_5$()) {
            currentLookaheadToken=token116;
            if (scan$QEL_javacc$line_310$column_15()) return true;
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_298$column_5() {
        Token token117=currentLookaheadToken;
        if (scan$QEL_javacc$line_298$column_5$()) {
            currentLookaheadToken=token117;
            if (scan$QEL_javacc$line_298$column_22()) return true;
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_315$column_5() {
        Token token118=currentLookaheadToken;
        if (scan$QEL_javacc$line_315$column_5$()) {
            currentLookaheadToken=token118;
            if (scan$QEL_javacc$line_315$column_12()) return true;
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_320$column_5() {
        if (scanToken(TokenType.NULL)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_303$column_4() {
        if (scanToken(TokenType.OPEN_PAREN)) return true;
        if (scan$QEL_javacc$line_132$column_5()) return true;
        if (scanToken(TokenType.CLOSE_PAREN)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_202$column_5$() {
        if (scan$QEL_javacc$line_211$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_204$column_5() {
        if (scan$QEL_javacc$line_216$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_206$column_5() {
        if (scan$QEL_javacc$line_222$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_195$column_12() {
        if (scanToken(TokenType.TIMES)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_195$column_20() {
        if (scanToken(TokenType.DIVIDE)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_310$column_5$() {
        if (scanToken(TokenType.INTEGER)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_310$column_15() {
        if (scanToken(TokenType.DECIMAL)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_298$column_5$() {
        if (scanToken(TokenType.STRING_LITERAL)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_298$column_22() {
        if (scanToken(TokenType.RAW_STRING)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_315$column_5$() {
        if (scanToken(TokenType.TRUE)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_315$column_12() {
        if (scanToken(TokenType.FALSE)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_132$column_5() {
        if (scan$QEL_javacc$line_137$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_211$column_5() {
        Token token119=currentLookaheadToken;
        if (scan$QEL_javacc$line_211$column_6()) {
            currentLookaheadToken=token119;
            if (scan$QEL_javacc$line_211$column_13()) return true;
        }
        if (scan$QEL_javacc$line_222$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_216$column_5() {
        if (scanToken(TokenType.EXCLAM)) return true;
        if (scan$QEL_javacc$line_222$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_222$column_5() {
        if (scan$QEL_javacc$line_235$column_3()) return true;
        while (true) {
            Token token120=currentLookaheadToken;
            if (scan$QEL_javacc$line_224$column_9()) {
                currentLookaheadToken=token120;
                break;
            }
        }
        Token token121=currentLookaheadToken;
        if (scan$QEL_javacc$line_228$column_7()) currentLookaheadToken=token121;
        return false;
    }

    private boolean scan$QEL_javacc$line_137$column_5() {
        if (scan$QEL_javacc$line_145$column_5()) return true;
        while (true) {
            Token token122=currentLookaheadToken;
            if (scan$QEL_javacc$line_139$column_9()) {
                currentLookaheadToken=token122;
                break;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_211$column_6() {
        if (scanToken(TokenType.PLUS)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_211$column_13() {
        if (scanToken(TokenType.MINUS)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_235$column_3() {
        if (scan$QEL_javacc$line_250$column_5()) return true;
        while (true) {
            Token token123=currentLookaheadToken;
            if (scan$QEL_javacc$line_237$column_5()) {
                currentLookaheadToken=token123;
                break;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_224$column_9() {
        if (scanToken(TokenType.EXCLAM)) return true;
        if (scan$QEL_javacc$line_235$column_3()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_228$column_7() {
        if (scanToken(TokenType.EXCLAM)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_145$column_5() {
        if (scan$QEL_javacc$line_153$column_5()) return true;
        while (true) {
            Token token124=currentLookaheadToken;
            if (scan$QEL_javacc$line_147$column_9()) {
                currentLookaheadToken=token124;
                break;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_139$column_9() {
        Token token125=currentLookaheadToken;
        if (scan$QEL_javacc$line_139$column_10()) {
            currentLookaheadToken=token125;
            if (scan$QEL_javacc$line_139$column_15()) return true;
        }
        if (scan$QEL_javacc$line_145$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_237$column_5() {
        Token token126=currentLookaheadToken;
        if (scan$QEL_javacc$line_239$column_7()) {
            currentLookaheadToken=token126;
            if (scan$QEL_javacc$line_241$column_7()) {
                currentLookaheadToken=token126;
                if (scan$QEL_javacc$line_243$column_7()) return true;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_153$column_5() {
        if (scan$QEL_javacc$line_162$column_5()) return true;
        Token token127=currentLookaheadToken;
        if (scan$QEL_javacc$line_155$column_9()) currentLookaheadToken=token127;
        return false;
    }

    private boolean scan$QEL_javacc$line_147$column_9() {
        Token token128=currentLookaheadToken;
        if (scan$QEL_javacc$line_147$column_10()) {
            currentLookaheadToken=token128;
            if (scan$QEL_javacc$line_147$column_16()) return true;
        }
        if (scan$QEL_javacc$line_153$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_139$column_10() {
        if (scanToken(TokenType.OR)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_139$column_15() {
        if (scanToken(TokenType.OR2)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_239$column_7() {
        if (scan$QEL_javacc$line_266$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_241$column_7() {
        if (scan$QEL_javacc$line_272$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_243$column_7() {
        if (scan$QEL_javacc$line_277$column_3()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_162$column_5() {
        if (scan$QEL_javacc$line_171$column_5()) return true;
        Token token129=currentLookaheadToken;
        if (scan$QEL_javacc$line_164$column_9()) currentLookaheadToken=token129;
        return false;
    }

    private boolean scan$QEL_javacc$line_155$column_9() {
        Token token130=currentLookaheadToken;
        if (scan$QEL_javacc$line_155$column_10()) {
            currentLookaheadToken=token130;
            if (scan$QEL_javacc$line_155$column_19()) {
                currentLookaheadToken=token130;
                if (scan$QEL_javacc$line_155$column_29()) return true;
            }
        }
        if (scan$QEL_javacc$line_162$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_147$column_10() {
        if (scanToken(TokenType.AND)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_147$column_16() {
        if (scanToken(TokenType.AND2)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_266$column_5() {
        if (scanToken(TokenType.DOT)) return true;
        Token token131=currentLookaheadToken;
        if (scan$QEL_javacc$line_267$column_6()) {
            currentLookaheadToken=token131;
            if (scan$QEL_javacc$line_267$column_21()) return true;
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_272$column_5() {
        if (scanToken(TokenType.OPEN_BRACKET)) return true;
        if (scan$QEL_javacc$line_132$column_5()) return true;
        if (scanToken(TokenType.CLOSE_BRACKET)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_277$column_3() {
        if (scanToken(TokenType.OPEN_PAREN)) return true;
        Token token132=currentLookaheadToken;
        if (scan$QEL_javacc$line_277$column_16()) currentLookaheadToken=token132;
        if (scanToken(TokenType.CLOSE_PAREN)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_171$column_5() {
        if (scan$QEL_javacc$line_183$column_5()) return true;
        Token token133=currentLookaheadToken;
        if (scan$QEL_javacc$line_173$column_8()) currentLookaheadToken=token133;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_9() {
        Token token134=currentLookaheadToken;
        if (scan$QEL_javacc$line_164$column_10()) {
            currentLookaheadToken=token134;
            if (scan$QEL_javacc$line_164$column_15()) {
                currentLookaheadToken=token134;
                if (scan$QEL_javacc$line_164$column_20()) {
                    currentLookaheadToken=token134;
                    if (scan$QEL_javacc$line_164$column_25()) {
                        currentLookaheadToken=token134;
                        if (scan$QEL_javacc$line_164$column_30()) {
                            currentLookaheadToken=token134;
                            if (scan$QEL_javacc$line_164$column_39()) {
                                currentLookaheadToken=token134;
                                if (scan$QEL_javacc$line_164$column_48()) {
                                    currentLookaheadToken=token134;
                                    if (scan$QEL_javacc$line_164$column_57()) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (scan$QEL_javacc$line_171$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_155$column_10() {
        if (scanToken(TokenType.EQUALS)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_155$column_19() {
        if (scanToken(TokenType.EQUALS2)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_155$column_29() {
        if (scanToken(TokenType.EQUALS3)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_267$column_6() {
        if (scanToken(TokenType.C_IDENTIFIER)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_267$column_21() {
        if (scanToken(TokenType.TIMES)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_277$column_16() {
        if (scan$QEL_javacc$line_282$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_173$column_8() {
        if (scanToken(TokenType.DOT_DOT)) return true;
        Token token135=currentLookaheadToken;
        if (scan$QEL_javacc$line_175$column_10()) currentLookaheadToken=token135;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_10() {
        if (scanToken(TokenType.GT)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_15() {
        if (scanToken(TokenType.GE)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_20() {
        if (scanToken(TokenType.LT)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_25() {
        if (scanToken(TokenType.LE)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_30() {
        if (scanToken(TokenType.ALT_GT)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_39() {
        if (scanToken(TokenType.ALT_GE)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_48() {
        if (scanToken(TokenType.ALT_LE)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_164$column_57() {
        if (scanToken(TokenType.ALT_LT)) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_282$column_5() {
        if (scan$QEL_javacc$line_289$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_175$column_10() {
        if (scan$QEL_javacc$line_183$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_289$column_5() {
        if (scan$QEL_javacc$line_132$column_5()) return true;
        while (true) {
            Token token136=currentLookaheadToken;
            if (scan$QEL_javacc$line_291$column_8()) {
                currentLookaheadToken=token136;
                break;
            }
        }
        return false;
    }

    private boolean scan$QEL_javacc$line_291$column_8() {
        Token token137=currentLookaheadToken;
        if (scan$QEL_javacc$line_291$column_9()) currentLookaheadToken=token137;
        if (scan$QEL_javacc$line_132$column_5()) return true;
        return false;
    }

    private boolean scan$QEL_javacc$line_291$column_9() {
        if (scanToken(TokenType.COMMA)) return true;
        return false;
    }

    private boolean trace_enabled=false;
    public void setTracingEnabled(boolean tracingEnabled) {
        trace_enabled=tracingEnabled;
    }

    /**
 * @deprecated Use #setTracingEnabled
 */
    @Deprecated public void enable_tracing() {
        setTracingEnabled(true);
    }

    /**
 * @deprecated Use #setTracingEnabled
 */
    @Deprecated public void disable_tracing() {
        setTracingEnabled(false);
    }

    private ArrayList<StackTraceElement>callStack=new ArrayList<>();
    private void pushOntoCallStack(String methodName, String fileName, int line) {
        StackTraceElement item=new StackTraceElement(this.getClass().getName(), methodName, fileName, line);
        callStack.add(item);
    }

    private void popCallStack() {
        callStack.remove(callStack.size()-1);
    }

    private void restoreCallStack(int prevSize) {
        while (callStack.size()>prevSize) {
            popCallStack();
        }
    }

    private boolean tolerantParsing=true;
    private boolean currentNTForced=false;
    private List<ParsingProblem>parsingProblems;
    // This is the last "legit" token consumed by the parsing machinery, not
    // a virtual or invalid Token inserted to continue parsing.
    public void addParsingProblem(ParsingProblem problem) {
        if (parsingProblems==null) {
            parsingProblems=new ArrayList<>();
        }
        parsingProblems.add(problem);
    }

    public List<ParsingProblem>getParsingProblems() {
        return parsingProblems;
    }

    public boolean hasParsingProblems() {
        return parsingProblems!=null&&!parsingProblems.isEmpty();
    }

    private void resetNextToken() {
        current_token.setNext(null);
        //       token_source.reset(current_token);
        token_source.reset(lastParsedToken);
    }

    public boolean isParserTolerant() {
        return tolerantParsing;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        this.tolerantParsing=tolerantParsing;
    }

    private Token insertVirtualToken(TokenType tokenType) {
        Token virtualToken=Token.newToken(tokenType, "VIRTUAL "+tokenType, getInputSource());
        virtualToken.setLexicalState(token_source.lexicalState);
        virtualToken.setUnparsed(true);
        virtualToken.setVirtual(true);
        int line=lastParsedToken.getEndLine();
        int column=lastParsedToken.getEndColumn();
        virtualToken.setBeginLine(line);
        virtualToken.setEndLine(line);
        virtualToken.setBeginColumn(column);
        virtualToken.setEndColumn(column);
        token_source.doLexicalStateSwitch(tokenType);
        return virtualToken;
    }

    private Token consumeToken(TokenType expectedType) throws ParseException {
        return consumeToken(expectedType, false);
    }

    private Token consumeToken(TokenType expectedType, boolean forced) throws ParseException {
        InvalidToken invalidToken=null;
        Token oldToken=current_token;
        current_token=current_token.getNext();
        if (current_token==null) {
            current_token=token_source.getNextToken();
        }
        if (tolerantParsing&&current_token instanceof InvalidToken) {
            addParsingProblem(new ParsingProblem("Lexically invalid input", current_token));
            invalidToken=(InvalidToken) current_token;
            current_token=token_source.getNextToken();
        }
        if (current_token.getType()!=expectedType) {
            handleUnexpectedTokenType(expectedType, forced, oldToken);
        }
        else {
            this.lastParsedToken=current_token;
        }
        if (buildTree&&tokensAreNodes) {
            if (invalidToken!=null) {
                pushNode(invalidToken);
            }
            pushNode(current_token);
        }
        if (trace_enabled) LOGGER.info("Consumed token of type "+current_token.getType()+" from "+current_token.getLocation());
        return current_token;
    }

    private void handleUnexpectedTokenType(TokenType expectedType, boolean forced, Token oldToken) throws ParseException {
        if (forced&&tolerantParsing) {
            Token nextToken=current_token;
            current_token=oldToken;
            Token virtualToken=insertVirtualToken(expectedType);
            virtualToken.setNext(nextToken);
            current_token=virtualToken;
            String message="Expecting token type "+expectedType+" but encountered "+nextToken.getType();
            message+="\nInserting virtual token to continue parsing";
            addParsingProblem(new ParsingProblem(message, virtualToken));
        }
        else throw new ParseException(current_token, EnumSet.of(expectedType), callStack);
    }

    private class ParseState {
        Token lastParsed;
        NodeScope nodeScope;
        ParseState() {
            this.lastParsed=QUTEParser.this.lastParsedToken;
            this.nodeScope=(NodeScope) currentNodeScope.clone();
        }

    }
    private ArrayList<ParseState>parseStateStack=new ArrayList<>();
    void stashParseState() {
        parseStateStack.add(new ParseState());
    }

    ParseState popParseState() {
        return parseStateStack.remove(parseStateStack.size()-1);
    }

    void restoreStashedParseState() {
        ParseState state=popParseState();
        currentNodeScope=state.nodeScope;
        if (state.lastParsed!=null) {
            //REVISIT
            current_token=lastParsedToken=state.lastParsed;
        }
        token_source.switchTo(lastParsedToken.getLexicalState());
        if (token_source.doLexicalStateSwitch(lastParsedToken.getType())) {
            token_source.reset(lastParsedToken);
            lastParsedToken.setNext(null);
        }
    }

    private boolean buildTree=true;
    private boolean tokensAreNodes=true;
    private boolean specialTokensAreNodes=true;
    public void setSpecialTokensAreNodes(boolean specialTokensAreNodes) {
        this.specialTokensAreNodes=specialTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes=tokensAreNodes;
    }

    NodeScope currentNodeScope=new NodeScope();
    /** 
	 * Returns the root node of the AST.  It only makes sense to call
	 * this after a successful parse. 
	 */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
     * push a node onto the top of the node stack
     */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /** 
     * Returns the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /** 
     * Returns the node currently on the top of the stack. 
     */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /** Returns the number of children on the stack in the current node
	 * scope. 
	 */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    public void clearNodeScope() {
        currentNodeScope.clear();
    }

    public void openNodeScope(Node n) {
        new NodeScope();
        n.open();
        if (trace_enabled) LOGGER.info("Opened node scope for node of type: "+n.getClass().getName());
        if (trace_enabled) LOGGER.info("Scope nesting level is "+currentNodeScope.nestingLevel());
    }

    /* A definite node is constructed from a specified number of
	 * children.  That number of nodes are popped from the stack and
	 * made the children of the definite node.  Then the definite node
	 * is pushed on to the stack.
	 */
    public void closeNodeScope(Node n, int num) {
        if (trace_enabled) LOGGER.info("Closing node scope for node of type: "+n.getClass().getName()+", popping "+num+" nodes off the stack.");
        currentNodeScope.close();
        ArrayList<Node>nodes=new ArrayList<Node>();
        for (int i=0; i<num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            if (specialTokensAreNodes&&(child instanceof Token)) {
                Token token=(Token) child;
                Token specialToken=token;
                while (specialToken!=null) {
                    specialToken=specialToken.specialToken;
                }
                while (specialToken!=null&&specialToken!=token) {
                    n.addChild(specialToken);
                    specialToken=specialToken.getNext();
                }
            }
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
	 * A conditional node is constructed if the condition is true.  All
	 * the nodes that have been pushed since the node was opened are
	 * made children of the conditional node, which is then pushed
	 * on to the stack.  If the condition is false the node is not
	 * constructed and they are left on the stack. 
	 */
    public void closeNodeScope(Node n, boolean condition) {
        if (condition) {
            if (trace_enabled) LOGGER.finer("Closing node scope for node of type: "+n.getClass().getName()+", popping "+nodeArity()+" nodes off the stack.");
            int a=nodeArity();
            currentNodeScope.close();
            ArrayList<Node>nodes=new ArrayList<Node>();
            while (a-->0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (specialTokensAreNodes&&(child instanceof Token)) {
                    Token token=(Token) child;
                    Token specialToken=token;
                    while (specialToken.specialToken!=null) {
                        specialToken=specialToken.specialToken;
                    }
                    while (specialToken!=null&&specialToken!=token) {
                        n.addChild(specialToken);
                        specialToken=specialToken.getNext();
                    }
                }
                n.addChild(child);
            }
            n.close();
            if (trace_enabled) {
                LOGGER.info("Closing node scope for node of type: "+n.getClass().getName()+", leaving "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
            pushNode(n);
            if (trace_enabled) {
                LOGGER.info("Closed node scope for node of type: "+n.getClass().getName()+", there are now "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
        }
        else {
            currentNodeScope.close();
            if (trace_enabled) {
                LOGGER.info("Closed node scope for node of type: "+n.getClass().getName()+", leaving "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree=buildTree;
    }

    /**
     * Just a kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    QUTEParser jjtree=this;
    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;
        NodeScope() {
            this.parentScope=QUTEParser.this.currentNodeScope;
            QUTEParser.this.currentNodeScope=this;
        }

        boolean isRootScope() {
            return parentScope==null;
        }

        Node rootNode() {
            NodeScope ns=this;
            while (ns.parentScope!=null) {
                ns=ns.parentScope;
            }
            return ns.isEmpty()?null:
            ns.get(0);
        }

        Node peek() {
            return isEmpty()?parentScope.peek():
            get(size()-1);
        }

        Node pop() {
            return isEmpty()?parentScope.pop():
            remove(size()-1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            }
            else {
                set(size()-1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            QUTEParser.this.currentNodeScope=parentScope;
        }

        int nestingLevel() {
            int result=0;
            NodeScope parent=this;
            while (parent.parentScope!=null) {
                result++;
                parent=parent.parentScope;
            }
            return result;
        }

    }
}
