/* Generated by: JavaCC 21 Parser Generator. QUTEParser.java */
package qute;

import java.util.*;
import java.util.logging.*;
import java.io.*;
@SuppressWarnings("unused")
public class QUTEParser implements QUTEConstants {
    static final java.util.logging.Logger LOGGER=Logger.getLogger("QUTEParser");
    static public void setLogLevel(Level level) {
        LOGGER.setLevel(level);
        Logger.getGlobal().getParent().getHandlers()[0].setLevel(level);
    }

    private boolean tolerantParsing=true;
    public boolean isParserTolerant() {
        return tolerantParsing;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        this.tolerantParsing=tolerantParsing;
    }

    /** Generated Lexer. */
    public QUTELexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    private boolean buildTree=true;
    private boolean tokensAreNodes=true;
    private boolean specialTokensAreNodes=true;
    public void setSpecialTokensAreNodes(boolean specialTokensAreNodes) {
        this.specialTokensAreNodes=specialTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes=tokensAreNodes;
    }

    NodeScope currentNodeScope=new NodeScope();
    /** 
	 * Returns the root node of the AST.  It only makes sense to call
	 * this after a successful parse. 
	 */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
     * push a node onto the top of the node stack
     */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /** 
     * Returns the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /** 
     * Returns the node currently on the top of the stack. 
     */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /** Returns the number of children on the stack in the current node
	 * scope. 
	 */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    public void clearNodeScope() {
        currentNodeScope.clear();
    }

    public void openNodeScope(Node n) {
        new NodeScope();
        n.open();
        if (trace_enabled) LOGGER.info("Opened node scope for node of type: "+n.getClass().getName());
        if (trace_enabled) LOGGER.info("Scope nesting level is "+currentNodeScope.nestingLevel());
    }

    /* A definite node is constructed from a specified number of
	 * children.  That number of nodes are popped from the stack and
	 * made the children of the definite node.  Then the definite node
	 * is pushed on to the stack.
	 */
    public void closeNodeScope(Node n,int num) {
        if (trace_enabled) LOGGER.info("Closing node scope for node of type: "+n.getClass().getName()+", popping "+num+" nodes off the stack.");
        currentNodeScope.close();
        ArrayList<Node>nodes=new ArrayList<Node>();
        for (int i=0; i<num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            if (specialTokensAreNodes&&(child instanceof Token)) {
                Token token=(Token) child;
                Token specialToken=token;
                while (specialToken!=null) {
                    specialToken=specialToken.specialToken;
                }
                while (specialToken!=null&&specialToken!=token) {
                    n.addChild(specialToken);
                    specialToken=specialToken.getNext();
                }
            }
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
	 * A conditional node is constructed if the condition is true.  All
	 * the nodes that have been pushed since the node was opened are
	 * made children of the conditional node, which is then pushed
	 * on to the stack.  If the condition is false the node is not
	 * constructed and they are left on the stack. 
	 */
    public void closeNodeScope(Node n,boolean condition) {
        if (condition) {
            if (trace_enabled) LOGGER.finer("Closing node scope for node of type: "+n.getClass().getName()+", popping "+nodeArity()+" nodes off the stack.");
            int a=nodeArity();
            currentNodeScope.close();
            ArrayList<Node>nodes=new ArrayList<Node>();
            while (a-->0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (specialTokensAreNodes&&(child instanceof Token)) {
                    Token token=(Token) child;
                    Token specialToken=token;
                    while (specialToken.specialToken!=null) {
                        specialToken=specialToken.specialToken;
                    }
                    while (specialToken!=null&&specialToken!=token) {
                        n.addChild(specialToken);
                        specialToken=specialToken.getNext();
                    }
                }
                n.addChild(child);
            }
            n.close();
            if (trace_enabled) {
                LOGGER.info("Closing node scope for node of type: "+n.getClass().getName()+", leaving "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
            pushNode(n);
            if (trace_enabled) {
                LOGGER.info("Closed node scope for node of type: "+n.getClass().getName()+", there are now "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
        }
        else {
            currentNodeScope.close();
            if (trace_enabled) {
                LOGGER.info("Closed node scope for node of type: "+n.getClass().getName()+", leaving "+nodeArity()+" nodes on the stack.");
                LOGGER.info("Nesting level is : "+currentNodeScope.nestingLevel());
            }
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree=buildTree;
    }

    /**
     * Just a kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    QUTEParser jjtree=this;
    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node> {
        NodeScope parentScope;
        NodeScope() {
            this.parentScope=QUTEParser.this.currentNodeScope;
            QUTEParser.this.currentNodeScope=this;
        }

        boolean isRootScope() {
            return parentScope==null;
        }

        Node rootNode() {
            NodeScope ns=this;
            while (ns.parentScope!=null) {
                ns=ns.parentScope;
            }
            return ns.isEmpty()?null:
            ns.get(0);
        }

        Node peek() {
            return isEmpty()?parentScope.peek():
            get(size()-1);
        }

        Node pop() {
            return isEmpty()?parentScope.pop():
            remove(size()-1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            }
            else {
                set(size()-1,n);
            }
        }

        void close() {
            parentScope.addAll(this);
            QUTEParser.this.currentNodeScope=parentScope;
        }

        int nestingLevel() {
            int result=0;
            NodeScope parent=this;
            while (parent.parentScope!=null) {
                result++;
                parent=parent.parentScope;
            }
            return result;
        }

    }
    static private final int INFINITY=Integer.MAX_VALUE;
    //=================================
    // Start of methods for BNF Productions
    //=================================
    // QEL.javacc, line 130
    final public void Expression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 130 of QEL.javacc");
        // Code for expansion specified on line 132 of QEL.javacc
        boolean Expression1forced=false;
        Expression Expression1=null;
        if (buildTree) {
            Expression1=new Expression();
            Token start=getToken(1);
            Expression1.setBeginLine(start.beginLine);
            Expression1.setBeginColumn(start.beginColumn);
            Expression1.setInputSource(this.getInputSource());
            openNodeScope(Expression1);
        }
        ParseException parseException1=null;
        try {
            // Code for OrExpression specified on line 132 of QEL.javacc
            OrExpression();
            if (trace_enabled) LOGGER.info("Exiting normally from Expression");
        }
        catch(ParseException e) {
            parseException1=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException1==null) {
                    Expression1.setEndLine(current_token.getEndLine());
                    Expression1.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Expression1,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException1: "+parseException1.getMessage());
                    Expression1.setParseException(parseException1);
                    if (Expression1forced) {
                        //		                attemptRecovery(Expression1, DOT_DOT, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(DOT_DOT);
                        closeNodeScope(Expression1,true);
                    }
                    else {
                        closeNodeScope(Expression1,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException1");
                        throw parseException1;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 135
    final public void OrExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 135 of QEL.javacc");
        // Code for expansion specified on line 137 of QEL.javacc
        boolean OrExpression2forced=false;
        OrExpression OrExpression2=null;
        if (buildTree) {
            OrExpression2=new OrExpression();
            Token start=getToken(1);
            OrExpression2.setBeginLine(start.beginLine);
            OrExpression2.setBeginColumn(start.beginColumn);
            OrExpression2.setInputSource(this.getInputSource());
            openNodeScope(OrExpression2);
        }
        ParseException parseException2=null;
        try {
            // Code for AndExpression specified on line 137 of QEL.javacc
            AndExpression();
            // Code for expansion specified on line 140 of QEL.javacc
            label_1:
            while (true) {
                int int1=nextTokenKind();
                if (!(int1==OR||int1==OR2)) {
                    break label_1;
                }
                // Code for expansion specified on line 139 of QEL.javacc
                // Code for expansion specified on line 139 of QEL.javacc
                switch(nextTokenKind()) {
                    case OR:
                    // Code for expansion specified on line 139 of QEL.javacc
                    // Code for expansion specified on line 139 of QEL.javacc
                    consumeToken(OR,false);
                    break;
                    case OR2:
                    // Code for expansion specified on line 139 of QEL.javacc
                    // Code for expansion specified on line 139 of QEL.javacc
                    consumeToken(OR2,false);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for AndExpression specified on line 139 of QEL.javacc
                AndExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from OrExpression");
        }
        catch(ParseException e) {
            parseException2=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException2==null) {
                    OrExpression2.setEndLine(current_token.getEndLine());
                    OrExpression2.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(OrExpression2,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException2: "+parseException2.getMessage());
                    OrExpression2.setParseException(parseException2);
                    if (OrExpression2forced) {
                        //		                attemptRecovery(OrExpression2, DOT_DOT, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(DOT_DOT);
                        closeNodeScope(OrExpression2,true);
                    }
                    else {
                        closeNodeScope(OrExpression2,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException2");
                        throw parseException2;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 143
    final public void AndExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 143 of QEL.javacc");
        // Code for expansion specified on line 145 of QEL.javacc
        boolean AndExpression3forced=false;
        AndExpression AndExpression3=null;
        if (buildTree) {
            AndExpression3=new AndExpression();
            Token start=getToken(1);
            AndExpression3.setBeginLine(start.beginLine);
            AndExpression3.setBeginColumn(start.beginColumn);
            AndExpression3.setInputSource(this.getInputSource());
            openNodeScope(AndExpression3);
        }
        ParseException parseException3=null;
        try {
            // Code for EqualityExpression specified on line 145 of QEL.javacc
            EqualityExpression();
            // Code for expansion specified on line 148 of QEL.javacc
            label_2:
            while (true) {
                int int2=nextTokenKind();
                if (!(int2==AND||int2==AND2)) {
                    break label_2;
                }
                // Code for expansion specified on line 147 of QEL.javacc
                // Code for expansion specified on line 147 of QEL.javacc
                switch(nextTokenKind()) {
                    case AND:
                    // Code for expansion specified on line 147 of QEL.javacc
                    // Code for expansion specified on line 147 of QEL.javacc
                    consumeToken(AND,false);
                    break;
                    case AND2:
                    // Code for expansion specified on line 147 of QEL.javacc
                    // Code for expansion specified on line 147 of QEL.javacc
                    consumeToken(AND2,false);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for EqualityExpression specified on line 147 of QEL.javacc
                EqualityExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AndExpression");
        }
        catch(ParseException e) {
            parseException3=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException3==null) {
                    AndExpression3.setEndLine(current_token.getEndLine());
                    AndExpression3.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AndExpression3,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException3: "+parseException3.getMessage());
                    AndExpression3.setParseException(parseException3);
                    if (AndExpression3forced) {
                        //		                attemptRecovery(AndExpression3, DOT_DOT, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(DOT_DOT);
                        closeNodeScope(AndExpression3,true);
                    }
                    else {
                        closeNodeScope(AndExpression3,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException3");
                        throw parseException3;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 151
    final public void EqualityExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 151 of QEL.javacc");
        // Code for expansion specified on line 153 of QEL.javacc
        boolean EqualityExpression4forced=false;
        EqualityExpression EqualityExpression4=null;
        if (buildTree) {
            EqualityExpression4=new EqualityExpression();
            Token start=getToken(1);
            EqualityExpression4.setBeginLine(start.beginLine);
            EqualityExpression4.setBeginColumn(start.beginColumn);
            EqualityExpression4.setInputSource(this.getInputSource());
            openNodeScope(EqualityExpression4);
        }
        ParseException parseException4=null;
        try {
            // Code for RelationalExpression specified on line 153 of QEL.javacc
            RelationalExpression();
            // Code for expansion specified on line 154 of QEL.javacc
            int int3=nextTokenKind();
            if (int3==EQUALS||int3==EQUALS2||int3==EQUALS3) {
                // Code for expansion specified on line 155 of QEL.javacc
                // Code for expansion specified on line 155 of QEL.javacc
                switch(nextTokenKind()) {
                    case EQUALS:
                    // Code for expansion specified on line 155 of QEL.javacc
                    // Code for expansion specified on line 155 of QEL.javacc
                    consumeToken(EQUALS,false);
                    break;
                    case EQUALS2:
                    // Code for expansion specified on line 155 of QEL.javacc
                    // Code for expansion specified on line 155 of QEL.javacc
                    consumeToken(EQUALS2,false);
                    break;
                    case EQUALS3:
                    // Code for expansion specified on line 155 of QEL.javacc
                    // Code for expansion specified on line 155 of QEL.javacc
                    consumeToken(EQUALS3,false);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for RelationalExpression specified on line 156 of QEL.javacc
                RelationalExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from EqualityExpression");
        }
        catch(ParseException e) {
            parseException4=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException4==null) {
                    EqualityExpression4.setEndLine(current_token.getEndLine());
                    EqualityExpression4.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EqualityExpression4,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException4: "+parseException4.getMessage());
                    EqualityExpression4.setParseException(parseException4);
                    if (EqualityExpression4forced) {
                        //		                attemptRecovery(EqualityExpression4, DOT_DOT, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(DOT_DOT);
                        closeNodeScope(EqualityExpression4,true);
                    }
                    else {
                        closeNodeScope(EqualityExpression4,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException4");
                        throw parseException4;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 160
    final public void RelationalExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 160 of QEL.javacc");
        // Code for expansion specified on line 162 of QEL.javacc
        boolean RelationalExpression5forced=false;
        RelationalExpression RelationalExpression5=null;
        if (buildTree) {
            RelationalExpression5=new RelationalExpression();
            Token start=getToken(1);
            RelationalExpression5.setBeginLine(start.beginLine);
            RelationalExpression5.setBeginColumn(start.beginColumn);
            RelationalExpression5.setInputSource(this.getInputSource());
            openNodeScope(RelationalExpression5);
        }
        ParseException parseException5=null;
        try {
            // Code for RangeExpression specified on line 162 of QEL.javacc
            RangeExpression();
            // Code for expansion specified on line 163 of QEL.javacc
            int int4=nextTokenKind();
            if (int4==GT||int4==ALT_GT||int4==GE||int4==ALT_GE||int4==LT||int4==ALT_LT||int4==LE||int4==ALT_LE) {
                // Code for expansion specified on line 164 of QEL.javacc
                // Code for expansion specified on line 164 of QEL.javacc
                switch(nextTokenKind()) {
                    case GT:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(GT,false);
                    break;
                    case GE:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(GE,false);
                    break;
                    case LT:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(LT,false);
                    break;
                    case LE:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(LE,false);
                    break;
                    case ALT_GT:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(ALT_GT,false);
                    break;
                    case ALT_GE:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(ALT_GE,false);
                    break;
                    case ALT_LE:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(ALT_LE,false);
                    break;
                    case ALT_LT:
                    // Code for expansion specified on line 164 of QEL.javacc
                    // Code for expansion specified on line 164 of QEL.javacc
                    consumeToken(ALT_LT,false);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for RangeExpression specified on line 165 of QEL.javacc
                RangeExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from RelationalExpression");
        }
        catch(ParseException e) {
            parseException5=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException5==null) {
                    RelationalExpression5.setEndLine(current_token.getEndLine());
                    RelationalExpression5.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RelationalExpression5,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException5: "+parseException5.getMessage());
                    RelationalExpression5.setParseException(parseException5);
                    if (RelationalExpression5forced) {
                        //		                attemptRecovery(RelationalExpression5, DOT_DOT, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(DOT_DOT);
                        closeNodeScope(RelationalExpression5,true);
                    }
                    else {
                        closeNodeScope(RelationalExpression5,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException5");
                        throw parseException5;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 169
    final public void RangeExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 169 of QEL.javacc");
        // Code for expansion specified on line 171 of QEL.javacc
        boolean RangeExpression6forced=false;
        RangeExpression RangeExpression6=null;
        if (buildTree) {
            RangeExpression6=new RangeExpression();
            Token start=getToken(1);
            RangeExpression6.setBeginLine(start.beginLine);
            RangeExpression6.setBeginColumn(start.beginColumn);
            RangeExpression6.setInputSource(this.getInputSource());
            openNodeScope(RangeExpression6);
        }
        ParseException parseException6=null;
        try {
            // Code for AdditiveExpression specified on line 171 of QEL.javacc
            AdditiveExpression();
            // Code for expansion specified on line 172 of QEL.javacc
            int int5=nextTokenKind();
            if (int5==DOT_DOT) {
                // Code for expansion specified on line 173 of QEL.javacc
                // Code for expansion specified on line 173 of QEL.javacc
                consumeToken(DOT_DOT,false);
                // Code for expansion specified on line 174 of QEL.javacc
                if (phase2_6_QEL_javacc_line_175(INFINITY)) {
                    // Code for expansion specified on line 175 of QEL.javacc
                    // Code for AdditiveExpression specified on line 176 of QEL.javacc
                    AdditiveExpression();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from RangeExpression");
        }
        catch(ParseException e) {
            parseException6=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException6==null) {
                    RangeExpression6.setEndLine(current_token.getEndLine());
                    RangeExpression6.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(RangeExpression6,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException6: "+parseException6.getMessage());
                    RangeExpression6.setParseException(parseException6);
                    if (RangeExpression6forced) {
                        //		                attemptRecovery(RangeExpression6, DOT_DOT, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(DOT_DOT);
                        closeNodeScope(RangeExpression6,true);
                    }
                    else {
                        closeNodeScope(RangeExpression6,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException6");
                        throw parseException6;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 181
    final public void AdditiveExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 181 of QEL.javacc");
        // Code for expansion specified on line 183 of QEL.javacc
        boolean AdditiveExpression7forced=false;
        AdditiveExpression AdditiveExpression7=null;
        if (buildTree) {
            AdditiveExpression7=new AdditiveExpression();
            Token start=getToken(1);
            AdditiveExpression7.setBeginLine(start.beginLine);
            AdditiveExpression7.setBeginColumn(start.beginColumn);
            AdditiveExpression7.setInputSource(this.getInputSource());
            openNodeScope(AdditiveExpression7);
        }
        ParseException parseException7=null;
        try {
            // Code for MultiplicativeExpression specified on line 183 of QEL.javacc
            MultiplicativeExpression();
            // Code for expansion specified on line 188 of QEL.javacc
            label_8:
            while (true) {
                if (!(phase2_8_QEL_javacc_line_185(INFINITY))) {
                    break label_8;
                }
                // Code for expansion specified on line 185 of QEL.javacc
                // Code for expansion specified on line 186 of QEL.javacc
                switch(nextTokenKind()) {
                    case PLUS:
                    // Code for expansion specified on line 186 of QEL.javacc
                    // Code for expansion specified on line 186 of QEL.javacc
                    consumeToken(PLUS,false);
                    break;
                    case MINUS:
                    // Code for expansion specified on line 186 of QEL.javacc
                    // Code for expansion specified on line 186 of QEL.javacc
                    consumeToken(MINUS,false);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for MultiplicativeExpression specified on line 187 of QEL.javacc
                MultiplicativeExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from AdditiveExpression");
        }
        catch(ParseException e) {
            parseException7=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException7==null) {
                    AdditiveExpression7.setEndLine(current_token.getEndLine());
                    AdditiveExpression7.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(AdditiveExpression7,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException7: "+parseException7.getMessage());
                    AdditiveExpression7.setParseException(parseException7);
                    if (AdditiveExpression7forced) {
                        //		                attemptRecovery(AdditiveExpression7, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(TIMES);
                        closeNodeScope(AdditiveExpression7,true);
                    }
                    else {
                        closeNodeScope(AdditiveExpression7,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException7");
                        throw parseException7;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 191
    final public void MultiplicativeExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 191 of QEL.javacc");
        // Code for expansion specified on line 193 of QEL.javacc
        boolean MultiplicativeExpression8forced=false;
        MultiplicativeExpression MultiplicativeExpression8=null;
        if (buildTree) {
            MultiplicativeExpression8=new MultiplicativeExpression();
            Token start=getToken(1);
            MultiplicativeExpression8.setBeginLine(start.beginLine);
            MultiplicativeExpression8.setBeginColumn(start.beginColumn);
            MultiplicativeExpression8.setInputSource(this.getInputSource());
            openNodeScope(MultiplicativeExpression8);
        }
        ParseException parseException8=null;
        try {
            // Code for UnaryExpression specified on line 193 of QEL.javacc
            UnaryExpression();
            // Code for expansion specified on line 197 of QEL.javacc
            label_10:
            while (true) {
                int int6=nextTokenKind();
                if (!(int6==TIMES||int6==DIVIDE)) {
                    break label_10;
                }
                // Code for expansion specified on line 195 of QEL.javacc
                // Code for expansion specified on line 195 of QEL.javacc
                switch(nextTokenKind()) {
                    case TIMES:
                    // Code for expansion specified on line 195 of QEL.javacc
                    // Code for expansion specified on line 195 of QEL.javacc
                    consumeToken(TIMES,false);
                    break;
                    case DIVIDE:
                    // Code for expansion specified on line 195 of QEL.javacc
                    // Code for expansion specified on line 195 of QEL.javacc
                    consumeToken(DIVIDE,false);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                // Code for UnaryExpression specified on line 196 of QEL.javacc
                UnaryExpression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from MultiplicativeExpression");
        }
        catch(ParseException e) {
            parseException8=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException8==null) {
                    MultiplicativeExpression8.setEndLine(current_token.getEndLine());
                    MultiplicativeExpression8.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(MultiplicativeExpression8,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException8: "+parseException8.getMessage());
                    MultiplicativeExpression8.setParseException(parseException8);
                    if (MultiplicativeExpression8forced) {
                        //		                attemptRecovery(MultiplicativeExpression8, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(TIMES);
                        closeNodeScope(MultiplicativeExpression8,true);
                    }
                    else {
                        closeNodeScope(MultiplicativeExpression8,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException8");
                        throw parseException8;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 200
    final public void UnaryExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 200 of QEL.javacc");
        // Code for expansion specified on line 202 of QEL.javacc
        switch(nextTokenKind()) {
            case PLUS:
            case MINUS:
            // Code for expansion specified on line 202 of QEL.javacc
            // Code for UnaryPlusMinusExpression specified on line 202 of QEL.javacc
            UnaryPlusMinusExpression();
            break;
            case EXCLAM:
            // Code for expansion specified on line 204 of QEL.javacc
            // Code for NotExpression specified on line 204 of QEL.javacc
            NotExpression();
            break;
            case NULL:
            case TRUE:
            case FALSE:
            case INTEGER:
            case DECIMAL:
            case STRING_LITERAL:
            case RAW_STRING:
            case C_IDENTIFIER:
            case OPEN_PAREN:
            // Code for expansion specified on line 206 of QEL.javacc
            // Code for DefaultToExpression specified on line 206 of QEL.javacc
            DefaultToExpression();
            break;
            default:
            consumeToken(-1);
            throw new ParseException();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from UnaryExpression");
    }

    // QEL.javacc, line 209
    final public void UnaryPlusMinusExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 209 of QEL.javacc");
        // Code for expansion specified on line 211 of QEL.javacc
        boolean UnaryPlusMinusExpression9forced=false;
        UnaryPlusMinusExpression UnaryPlusMinusExpression9=null;
        if (buildTree) {
            UnaryPlusMinusExpression9=new UnaryPlusMinusExpression();
            Token start=getToken(1);
            UnaryPlusMinusExpression9.setBeginLine(start.beginLine);
            UnaryPlusMinusExpression9.setBeginColumn(start.beginColumn);
            UnaryPlusMinusExpression9.setInputSource(this.getInputSource());
            openNodeScope(UnaryPlusMinusExpression9);
        }
        ParseException parseException9=null;
        try {
            // Code for expansion specified on line 211 of QEL.javacc
            switch(nextTokenKind()) {
                case PLUS:
                // Code for expansion specified on line 211 of QEL.javacc
                // Code for expansion specified on line 211 of QEL.javacc
                consumeToken(PLUS,false);
                break;
                case MINUS:
                // Code for expansion specified on line 211 of QEL.javacc
                // Code for expansion specified on line 211 of QEL.javacc
                consumeToken(MINUS,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            // Code for DefaultToExpression specified on line 211 of QEL.javacc
            DefaultToExpression();
            if (trace_enabled) LOGGER.info("Exiting normally from UnaryPlusMinusExpression");
        }
        catch(ParseException e) {
            parseException9=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException9==null) {
                    UnaryPlusMinusExpression9.setEndLine(current_token.getEndLine());
                    UnaryPlusMinusExpression9.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(UnaryPlusMinusExpression9,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException9: "+parseException9.getMessage());
                    UnaryPlusMinusExpression9.setParseException(parseException9);
                    if (UnaryPlusMinusExpression9forced) {
                        //		                attemptRecovery(UnaryPlusMinusExpression9, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(TIMES);
                        closeNodeScope(UnaryPlusMinusExpression9,true);
                    }
                    else {
                        closeNodeScope(UnaryPlusMinusExpression9,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException9");
                        throw parseException9;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 214
    final public void NotExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 214 of QEL.javacc");
        // Code for expansion specified on line 216 of QEL.javacc
        boolean NotExpression10forced=false;
        NotExpression NotExpression10=null;
        if (buildTree) {
            NotExpression10=new NotExpression();
            Token start=getToken(1);
            NotExpression10.setBeginLine(start.beginLine);
            NotExpression10.setBeginColumn(start.beginColumn);
            NotExpression10.setInputSource(this.getInputSource());
            openNodeScope(NotExpression10);
        }
        ParseException parseException10=null;
        try {
            // Code for expansion specified on line 216 of QEL.javacc
            consumeToken(EXCLAM,false);
            // Code for DefaultToExpression specified on line 217 of QEL.javacc
            DefaultToExpression();
            if (trace_enabled) LOGGER.info("Exiting normally from NotExpression");
        }
        catch(ParseException e) {
            parseException10=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException10==null) {
                    NotExpression10.setEndLine(current_token.getEndLine());
                    NotExpression10.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(NotExpression10,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException10: "+parseException10.getMessage());
                    NotExpression10.setParseException(parseException10);
                    if (NotExpression10forced) {
                        //		                attemptRecovery(NotExpression10, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(TIMES);
                        closeNodeScope(NotExpression10,true);
                    }
                    else {
                        closeNodeScope(NotExpression10,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException10");
                        throw parseException10;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 220
    final public void DefaultToExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 220 of QEL.javacc");
        // Code for expansion specified on line 222 of QEL.javacc
        boolean DefaultToExpression11forced=false;
        DefaultToExpression DefaultToExpression11=null;
        if (buildTree) {
            DefaultToExpression11=new DefaultToExpression();
            Token start=getToken(1);
            DefaultToExpression11.setBeginLine(start.beginLine);
            DefaultToExpression11.setBeginColumn(start.beginColumn);
            DefaultToExpression11.setInputSource(this.getInputSource());
            openNodeScope(DefaultToExpression11);
        }
        ParseException parseException11=null;
        try {
            // Code for PrimaryExpression specified on line 222 of QEL.javacc
            PrimaryExpression();
            // Code for expansion specified on line 226 of QEL.javacc
            label_11:
            while (true) {
                if (!(phase2_11_QEL_javacc_line_224(INFINITY)&&(getToken(2).kind!=C_IDENTIFIER||getToken(3).kind!=SIMPLE_EQUALS))) {
                    break label_11;
                }
                // Code for expansion specified on line 224 of QEL.javacc
                // Code for expansion specified on line 225 of QEL.javacc
                consumeToken(EXCLAM,false);
                // Code for PrimaryExpression specified on line 225 of QEL.javacc
                PrimaryExpression();
            }
            // Code for expansion specified on line 227 of QEL.javacc
            int int7=nextTokenKind();
            if (int7==EXCLAM) {
                // Code for expansion specified on line 228 of QEL.javacc
                // Code for expansion specified on line 229 of QEL.javacc
                consumeToken(EXCLAM,false);
            }
            if (trace_enabled) LOGGER.info("Exiting normally from DefaultToExpression");
        }
        catch(ParseException e) {
            parseException11=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException11==null) {
                    DefaultToExpression11.setEndLine(current_token.getEndLine());
                    DefaultToExpression11.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(DefaultToExpression11,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException11: "+parseException11.getMessage());
                    DefaultToExpression11.setParseException(parseException11);
                    if (DefaultToExpression11forced) {
                        //		                attemptRecovery(DefaultToExpression11, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(TIMES);
                        closeNodeScope(DefaultToExpression11,true);
                    }
                    else {
                        closeNodeScope(DefaultToExpression11,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException11");
                        throw parseException11;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 233
    final public void PrimaryExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 233 of QEL.javacc");
        // Code for expansion specified on line 235 of QEL.javacc
        boolean PrimaryExpression12forced=false;
        PrimaryExpression PrimaryExpression12=null;
        if (buildTree) {
            PrimaryExpression12=new PrimaryExpression();
            Token start=getToken(1);
            PrimaryExpression12.setBeginLine(start.beginLine);
            PrimaryExpression12.setBeginColumn(start.beginColumn);
            PrimaryExpression12.setInputSource(this.getInputSource());
            openNodeScope(PrimaryExpression12);
        }
        ParseException parseException12=null;
        try {
            // Code for BaseExpression specified on line 235 of QEL.javacc
            BaseExpression();
            // Code for expansion specified on line 245 of QEL.javacc
            label_14:
            while (true) {
                if (!(phase2_14_QEL_javacc_line_237(INFINITY))) {
                    break label_14;
                }
                // Code for expansion specified on line 237 of QEL.javacc
                // Code for expansion specified on line 239 of QEL.javacc
                switch(nextTokenKind()) {
                    case DOT:
                    // Code for expansion specified on line 239 of QEL.javacc
                    // Code for DotKey specified on line 239 of QEL.javacc
                    DotKey();
                    break;
                    case OPEN_BRACKET:
                    // Code for expansion specified on line 241 of QEL.javacc
                    // Code for DynamicKey specified on line 241 of QEL.javacc
                    DynamicKey();
                    break;
                    case OPEN_PAREN:
                    // Code for expansion specified on line 243 of QEL.javacc
                    // Code for MethodInvoke specified on line 243 of QEL.javacc
                    MethodInvoke();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from PrimaryExpression");
        }
        catch(ParseException e) {
            parseException12=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException12==null) {
                    PrimaryExpression12.setEndLine(current_token.getEndLine());
                    PrimaryExpression12.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PrimaryExpression12,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException12: "+parseException12.getMessage());
                    PrimaryExpression12.setParseException(parseException12);
                    if (PrimaryExpression12forced) {
                        //		                attemptRecovery(PrimaryExpression12, TIMES, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(TIMES);
                        closeNodeScope(PrimaryExpression12,true);
                    }
                    else {
                        closeNodeScope(PrimaryExpression12,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException12");
                        throw parseException12;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 248
    final public void BaseExpression() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 248 of QEL.javacc");
        // Code for expansion specified on line 250 of QEL.javacc
        boolean BaseExpression13forced=false;
        BaseExpression BaseExpression13=null;
        if (buildTree) {
            BaseExpression13=new BaseExpression();
            Token start=getToken(1);
            BaseExpression13.setBeginLine(start.beginLine);
            BaseExpression13.setBeginColumn(start.beginColumn);
            BaseExpression13.setInputSource(this.getInputSource());
            openNodeScope(BaseExpression13);
        }
        ParseException parseException13=null;
        try {
            switch(nextTokenKind()) {
                case C_IDENTIFIER:
                // Code for expansion specified on line 250 of QEL.javacc
                // Code for expansion specified on line 250 of QEL.javacc
                consumeToken(C_IDENTIFIER,false);
                break;
                case INTEGER:
                case DECIMAL:
                // Code for expansion specified on line 252 of QEL.javacc
                // Code for NumberLiteral specified on line 252 of QEL.javacc
                NumberLiteral();
                break;
                case STRING_LITERAL:
                case RAW_STRING:
                // Code for expansion specified on line 254 of QEL.javacc
                // Code for StringLiteral specified on line 254 of QEL.javacc
                StringLiteral();
                break;
                case TRUE:
                case FALSE:
                // Code for expansion specified on line 256 of QEL.javacc
                // Code for BooleanLiteral specified on line 256 of QEL.javacc
                BooleanLiteral();
                break;
                case NULL:
                // Code for expansion specified on line 258 of QEL.javacc
                // Code for NullLiteral specified on line 258 of QEL.javacc
                NullLiteral();
                break;
                case OPEN_PAREN:
                // Code for expansion specified on line 260 of QEL.javacc
                // Code for Parenthesis specified on line 260 of QEL.javacc
                Parenthesis();
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from BaseExpression");
        }
        catch(ParseException e) {
            parseException13=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException13==null) {
                    BaseExpression13.setEndLine(current_token.getEndLine());
                    BaseExpression13.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(BaseExpression13,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException13: "+parseException13.getMessage());
                    BaseExpression13.setParseException(parseException13);
                    if (BaseExpression13forced) {
                        //		                attemptRecovery(BaseExpression13, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(NULL);
                        closeNodeScope(BaseExpression13,true);
                    }
                    else {
                        closeNodeScope(BaseExpression13,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException13");
                        throw parseException13;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 264
    final public void DotKey() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 264 of QEL.javacc");
        // Code for expansion specified on line 266 of QEL.javacc
        // Code for expansion specified on line 266 of QEL.javacc
        consumeToken(DOT,false);
        // Code for expansion specified on line 267 of QEL.javacc
        switch(nextTokenKind()) {
            case C_IDENTIFIER:
            // Code for expansion specified on line 267 of QEL.javacc
            // Code for expansion specified on line 267 of QEL.javacc
            consumeToken(C_IDENTIFIER,false);
            break;
            case TIMES:
            // Code for expansion specified on line 267 of QEL.javacc
            // Code for expansion specified on line 267 of QEL.javacc
            consumeToken(TIMES,false);
            break;
            default:
            consumeToken(-1);
            throw new ParseException();
        }
        if (trace_enabled) LOGGER.info("Exiting normally from DotKey");
    }

    // QEL.javacc, line 270
    final public void DynamicKey() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 270 of QEL.javacc");
        // Code for expansion specified on line 272 of QEL.javacc
        // Code for expansion specified on line 272 of QEL.javacc
        consumeToken(OPEN_BRACKET,false);
        // Code for Expression specified on line 272 of QEL.javacc
        Expression();
        // Code for expansion specified on line 272 of QEL.javacc
        consumeToken(CLOSE_BRACKET,false);
        if (trace_enabled) LOGGER.info("Exiting normally from DynamicKey");
    }

    // QEL.javacc, line 275
    final public void MethodInvoke() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 275 of QEL.javacc");
        // Code for expansion specified on line 277 of QEL.javacc
        // Code for expansion specified on line 277 of QEL.javacc
        consumeToken(OPEN_PAREN,false);
        // Code for expansion specified on line 277 of QEL.javacc
        int int8=nextTokenKind();
        if (int8==PLUS||int8==MINUS||int8==EXCLAM||int8==NULL||int8==TRUE||int8==FALSE||int8==INTEGER||int8==DECIMAL||int8==STRING_LITERAL||int8==RAW_STRING||int8==C_IDENTIFIER||int8==OPEN_PAREN) {
            // Code for expansion specified on line 277 of QEL.javacc
            // Code for ArgsList specified on line 277 of QEL.javacc
            ArgsList();
        }
        // Code for expansion specified on line 277 of QEL.javacc
        consumeToken(CLOSE_PAREN,false);
        if (trace_enabled) LOGGER.info("Exiting normally from MethodInvoke");
    }

    // QEL.javacc, line 280
    final public void ArgsList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 280 of QEL.javacc");
        // Code for expansion specified on line 282 of QEL.javacc
        // Code for expansion specified on line 283 of QEL.javacc
        // Code for PositionalArgsList specified on line 283 of QEL.javacc
        PositionalArgsList();
        if (trace_enabled) LOGGER.info("Exiting normally from ArgsList");
    }

    // QEL.javacc, line 287
    final public void PositionalArgsList() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 287 of QEL.javacc");
        // Code for expansion specified on line 289 of QEL.javacc
        boolean PositionalArgsList14forced=false;
        PositionalArgsList PositionalArgsList14=null;
        if (buildTree) {
            PositionalArgsList14=new PositionalArgsList();
            Token start=getToken(1);
            PositionalArgsList14.setBeginLine(start.beginLine);
            PositionalArgsList14.setBeginColumn(start.beginColumn);
            PositionalArgsList14.setInputSource(this.getInputSource());
            openNodeScope(PositionalArgsList14);
        }
        ParseException parseException14=null;
        try {
            // Code for Expression specified on line 289 of QEL.javacc
            Expression();
            // Code for expansion specified on line 293 of QEL.javacc
            label_17:
            while (true) {
                int int9=nextTokenKind();
                if (!(int9==COMMA||int9==PLUS||int9==MINUS||int9==EXCLAM||int9==NULL||int9==TRUE||int9==FALSE||int9==INTEGER||int9==DECIMAL||int9==STRING_LITERAL||int9==RAW_STRING||int9==C_IDENTIFIER||int9==OPEN_PAREN)) {
                    break label_17;
                }
                // Code for expansion specified on line 291 of QEL.javacc
                // Code for expansion specified on line 291 of QEL.javacc
                int int10=nextTokenKind();
                if (int10==COMMA) {
                    // Code for expansion specified on line 291 of QEL.javacc
                    // Code for expansion specified on line 291 of QEL.javacc
                    consumeToken(COMMA,false);
                }
                // Code for Expression specified on line 292 of QEL.javacc
                Expression();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from PositionalArgsList");
        }
        catch(ParseException e) {
            parseException14=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException14==null) {
                    PositionalArgsList14.setEndLine(current_token.getEndLine());
                    PositionalArgsList14.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(PositionalArgsList14,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException14: "+parseException14.getMessage());
                    PositionalArgsList14.setParseException(parseException14);
                    if (PositionalArgsList14forced) {
                        //		                attemptRecovery(PositionalArgsList14, DOT_DOT, TIMES, EXCLAM, CLOSE_BRACKET, NULL, TRUE, FALSE, INTEGER, DECIMAL, STRING_LITERAL, RAW_STRING, C_IDENTIFIER, CLOSE_PAREN);
                        insertVirtualToken(DOT_DOT);
                        closeNodeScope(PositionalArgsList14,true);
                    }
                    else {
                        closeNodeScope(PositionalArgsList14,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException14");
                        throw parseException14;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 296
    final public void StringLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 296 of QEL.javacc");
        // Code for expansion specified on line 298 of QEL.javacc
        boolean StringLiteral15forced=false;
        StringLiteral StringLiteral15=null;
        if (buildTree) {
            StringLiteral15=new StringLiteral();
            Token start=getToken(1);
            StringLiteral15.setBeginLine(start.beginLine);
            StringLiteral15.setBeginColumn(start.beginColumn);
            StringLiteral15.setInputSource(this.getInputSource());
            openNodeScope(StringLiteral15);
        }
        ParseException parseException15=null;
        try {
            switch(nextTokenKind()) {
                case STRING_LITERAL:
                // Code for expansion specified on line 298 of QEL.javacc
                // Code for expansion specified on line 298 of QEL.javacc
                consumeToken(STRING_LITERAL,false);
                break;
                case RAW_STRING:
                // Code for expansion specified on line 298 of QEL.javacc
                // Code for expansion specified on line 298 of QEL.javacc
                consumeToken(RAW_STRING,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from StringLiteral");
        }
        catch(ParseException e) {
            parseException15=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException15==null) {
                    StringLiteral15.setEndLine(current_token.getEndLine());
                    StringLiteral15.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(StringLiteral15,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException15: "+parseException15.getMessage());
                    StringLiteral15.setParseException(parseException15);
                    if (StringLiteral15forced) {
                        //		                attemptRecovery(StringLiteral15, STRING_LITERAL, RAW_STRING);
                        insertVirtualToken(STRING_LITERAL);
                        closeNodeScope(StringLiteral15,true);
                    }
                    else {
                        closeNodeScope(StringLiteral15,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException15");
                        throw parseException15;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 301
    final public void Parenthesis() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 301 of QEL.javacc");
        // Code for expansion specified on line 303 of QEL.javacc
        boolean Parenthesis16forced=false;
        Parenthesis Parenthesis16=null;
        if (buildTree) {
            Parenthesis16=new Parenthesis();
            Token start=getToken(1);
            Parenthesis16.setBeginLine(start.beginLine);
            Parenthesis16.setBeginColumn(start.beginColumn);
            Parenthesis16.setInputSource(this.getInputSource());
            openNodeScope(Parenthesis16);
        }
        ParseException parseException16=null;
        try {
            // Code for expansion specified on line 303 of QEL.javacc
            consumeToken(OPEN_PAREN,false);
            // Code for Expression specified on line 304 of QEL.javacc
            Expression();
            // Code for expansion specified on line 305 of QEL.javacc
            consumeToken(CLOSE_PAREN,true);
            if (trace_enabled) LOGGER.info("Exiting normally from Parenthesis");
        }
        catch(ParseException e) {
            parseException16=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException16==null) {
                    Parenthesis16.setEndLine(current_token.getEndLine());
                    Parenthesis16.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Parenthesis16,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException16: "+parseException16.getMessage());
                    Parenthesis16.setParseException(parseException16);
                    if (Parenthesis16forced) {
                        //		                attemptRecovery(Parenthesis16, CLOSE_PAREN);
                        insertVirtualToken(CLOSE_PAREN);
                        closeNodeScope(Parenthesis16,true);
                    }
                    else {
                        closeNodeScope(Parenthesis16,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException16");
                        throw parseException16;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 308
    final public void NumberLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 308 of QEL.javacc");
        // Code for expansion specified on line 310 of QEL.javacc
        boolean NumberLiteral17forced=false;
        NumberLiteral NumberLiteral17=null;
        if (buildTree) {
            NumberLiteral17=new NumberLiteral();
            Token start=getToken(1);
            NumberLiteral17.setBeginLine(start.beginLine);
            NumberLiteral17.setBeginColumn(start.beginColumn);
            NumberLiteral17.setInputSource(this.getInputSource());
            openNodeScope(NumberLiteral17);
        }
        ParseException parseException17=null;
        try {
            switch(nextTokenKind()) {
                case INTEGER:
                // Code for expansion specified on line 310 of QEL.javacc
                // Code for expansion specified on line 310 of QEL.javacc
                consumeToken(INTEGER,false);
                break;
                case DECIMAL:
                // Code for expansion specified on line 310 of QEL.javacc
                // Code for expansion specified on line 310 of QEL.javacc
                consumeToken(DECIMAL,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from NumberLiteral");
        }
        catch(ParseException e) {
            parseException17=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException17==null) {
                    NumberLiteral17.setEndLine(current_token.getEndLine());
                    NumberLiteral17.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(NumberLiteral17,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException17: "+parseException17.getMessage());
                    NumberLiteral17.setParseException(parseException17);
                    if (NumberLiteral17forced) {
                        //		                attemptRecovery(NumberLiteral17, INTEGER, DECIMAL);
                        insertVirtualToken(INTEGER);
                        closeNodeScope(NumberLiteral17,true);
                    }
                    else {
                        closeNodeScope(NumberLiteral17,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException17");
                        throw parseException17;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 313
    final public void BooleanLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 313 of QEL.javacc");
        // Code for expansion specified on line 315 of QEL.javacc
        boolean BooleanLiteral18forced=false;
        BooleanLiteral BooleanLiteral18=null;
        if (buildTree) {
            BooleanLiteral18=new BooleanLiteral();
            Token start=getToken(1);
            BooleanLiteral18.setBeginLine(start.beginLine);
            BooleanLiteral18.setBeginColumn(start.beginColumn);
            BooleanLiteral18.setInputSource(this.getInputSource());
            openNodeScope(BooleanLiteral18);
        }
        ParseException parseException18=null;
        try {
            switch(nextTokenKind()) {
                case TRUE:
                // Code for expansion specified on line 315 of QEL.javacc
                // Code for expansion specified on line 315 of QEL.javacc
                consumeToken(TRUE,false);
                break;
                case FALSE:
                // Code for expansion specified on line 315 of QEL.javacc
                // Code for expansion specified on line 315 of QEL.javacc
                consumeToken(FALSE,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from BooleanLiteral");
        }
        catch(ParseException e) {
            parseException18=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException18==null) {
                    BooleanLiteral18.setEndLine(current_token.getEndLine());
                    BooleanLiteral18.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(BooleanLiteral18,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException18: "+parseException18.getMessage());
                    BooleanLiteral18.setParseException(parseException18);
                    if (BooleanLiteral18forced) {
                        //		                attemptRecovery(BooleanLiteral18, TRUE, FALSE);
                        insertVirtualToken(TRUE);
                        closeNodeScope(BooleanLiteral18,true);
                    }
                    else {
                        closeNodeScope(BooleanLiteral18,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException18");
                        throw parseException18;
                    }
                }
            }
        }
    }

    // QEL.javacc, line 318
    final public void NullLiteral() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 318 of QEL.javacc");
        // Code for expansion specified on line 320 of QEL.javacc
        boolean NullLiteral19forced=false;
        NullLiteral NullLiteral19=null;
        if (buildTree) {
            NullLiteral19=new NullLiteral();
            Token start=getToken(1);
            NullLiteral19.setBeginLine(start.beginLine);
            NullLiteral19.setBeginColumn(start.beginColumn);
            NullLiteral19.setInputSource(this.getInputSource());
            openNodeScope(NullLiteral19);
        }
        ParseException parseException19=null;
        try {
            // Code for expansion specified on line 320 of QEL.javacc
            consumeToken(NULL,false);
            if (trace_enabled) LOGGER.info("Exiting normally from NullLiteral");
        }
        catch(ParseException e) {
            parseException19=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException19==null) {
                    NullLiteral19.setEndLine(current_token.getEndLine());
                    NullLiteral19.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(NullLiteral19,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException19: "+parseException19.getMessage());
                    NullLiteral19.setParseException(parseException19);
                    if (NullLiteral19forced) {
                        //		                attemptRecovery(NullLiteral19, NULL);
                        insertVirtualToken(NULL);
                        closeNodeScope(NullLiteral19,true);
                    }
                    else {
                        closeNodeScope(NullLiteral19,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException19");
                        throw parseException19;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 85
    final public void ParameterDeclaration() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 85 of QUTE.javacc");
        // Code for expansion specified on line 87 of QUTE.javacc
        boolean ParameterDeclaration20forced=false;
        ParameterDeclaration ParameterDeclaration20=null;
        if (buildTree) {
            ParameterDeclaration20=new ParameterDeclaration();
            Token start=getToken(1);
            ParameterDeclaration20.setBeginLine(start.beginLine);
            ParameterDeclaration20.setBeginColumn(start.beginColumn);
            ParameterDeclaration20.setInputSource(this.getInputSource());
            openNodeScope(ParameterDeclaration20);
        }
        ParseException parseException20=null;
        try {
            // Code for expansion specified on line 87 of QUTE.javacc
            consumeToken(START_PARAMETER_DECL,false);
            // Code for expansion specified on line 88 of QUTE.javacc
            consumeToken(C_IDENTIFIER,false);
            // Code for expansion specified on line 89 of QUTE.javacc
            consumeToken(CLOSE_CURLY,false);
            if (trace_enabled) LOGGER.info("Exiting normally from ParameterDeclaration");
        }
        catch(ParseException e) {
            parseException20=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException20==null) {
                    ParameterDeclaration20.setEndLine(current_token.getEndLine());
                    ParameterDeclaration20.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ParameterDeclaration20,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException20: "+parseException20.getMessage());
                    ParameterDeclaration20.setParseException(parseException20);
                    if (ParameterDeclaration20forced) {
                        //		                attemptRecovery(ParameterDeclaration20, CLOSE_CURLY);
                        insertVirtualToken(CLOSE_CURLY);
                        closeNodeScope(ParameterDeclaration20,true);
                    }
                    else {
                        closeNodeScope(ParameterDeclaration20,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException20");
                        throw parseException20;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 92
    final public void Interpolation() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 92 of QUTE.javacc");
        // Code for expansion specified on line 94 of QUTE.javacc
        boolean Interpolation21forced=this.tolerantParsing;
        Interpolation Interpolation21=null;
        if (buildTree) {
            Interpolation21=new Interpolation();
            Token start=getToken(1);
            Interpolation21.setBeginLine(start.beginLine);
            Interpolation21.setBeginColumn(start.beginColumn);
            Interpolation21.setInputSource(this.getInputSource());
            openNodeScope(Interpolation21);
        }
        ParseException parseException21=null;
        try {
            // Code for expansion specified on line 94 of QUTE.javacc
            consumeToken(OPEN_CURLY,false);
            // Code for Expression specified on line 94 of QUTE.javacc
            Expression();
            // Code for expansion specified on line 94 of QUTE.javacc
            consumeToken(CLOSE_CURLY,false);
            if (trace_enabled) LOGGER.info("Exiting normally from Interpolation");
        }
        catch(ParseException e) {
            parseException21=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException21==null) {
                    Interpolation21.setEndLine(current_token.getEndLine());
                    Interpolation21.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Interpolation21,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException21: "+parseException21.getMessage());
                    Interpolation21.setParseException(parseException21);
                    if (Interpolation21forced) {
                        //		                attemptRecovery(Interpolation21, CLOSE_CURLY);
                        insertVirtualToken(CLOSE_CURLY);
                        closeNodeScope(Interpolation21,true);
                    }
                    else {
                        closeNodeScope(Interpolation21,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException21");
                        throw parseException21;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 97
    final public void EachSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 97 of QUTE.javacc");
        // Code for expansion specified on line 99 of QUTE.javacc
        boolean EachSection22forced=false;
        EachSection EachSection22=null;
        if (buildTree) {
            EachSection22=new EachSection();
            Token start=getToken(1);
            EachSection22.setBeginLine(start.beginLine);
            EachSection22.setBeginColumn(start.beginColumn);
            EachSection22.setInputSource(this.getInputSource());
            openNodeScope(EachSection22);
        }
        ParseException parseException22=null;
        try {
            // Code for expansion specified on line 99 of QUTE.javacc
            consumeToken(EACH,false);
            // Code for Expression specified on line 100 of QUTE.javacc
            Expression();
            // Code for expansion specified on line 101 of QUTE.javacc
            consumeToken(CLOSE_CURLY,false);
            // Code for Block specified on line 102 of QUTE.javacc
            Block();
            // Code for expansion specified on line 103 of QUTE.javacc
            switch(nextTokenKind()) {
                case ENDEACH:
                // Code for expansion specified on line 103 of QUTE.javacc
                // Code for expansion specified on line 103 of QUTE.javacc
                consumeToken(ENDEACH,false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 103 of QUTE.javacc
                // Code for expansion specified on line 103 of QUTE.javacc
                consumeToken(ABBREVIATED_END,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from EachSection");
        }
        catch(ParseException e) {
            parseException22=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException22==null) {
                    EachSection22.setEndLine(current_token.getEndLine());
                    EachSection22.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(EachSection22,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException22: "+parseException22.getMessage());
                    EachSection22.setParseException(parseException22);
                    if (EachSection22forced) {
                        //		                attemptRecovery(EachSection22, ABBREVIATED_END, ENDEACH);
                        insertVirtualToken(ABBREVIATED_END);
                        closeNodeScope(EachSection22,true);
                    }
                    else {
                        closeNodeScope(EachSection22,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException22");
                        throw parseException22;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 106
    final public void ForSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 106 of QUTE.javacc");
        // Code for expansion specified on line 108 of QUTE.javacc
        boolean ForSection23forced=false;
        ForSection ForSection23=null;
        if (buildTree) {
            ForSection23=new ForSection();
            Token start=getToken(1);
            ForSection23.setBeginLine(start.beginLine);
            ForSection23.setBeginColumn(start.beginColumn);
            ForSection23.setInputSource(this.getInputSource());
            openNodeScope(ForSection23);
        }
        ParseException parseException23=null;
        try {
            // Code for expansion specified on line 108 of QUTE.javacc
            consumeToken(FOR,false);
            // Code for expansion specified on line 109 of QUTE.javacc
            consumeToken(C_IDENTIFIER,false);
            // Code for expansion specified on line 110 of QUTE.javacc
            consumeToken(IN,false);
            // Code for Expression specified on line 111 of QUTE.javacc
            Expression();
            // Code for expansion specified on line 112 of QUTE.javacc
            consumeToken(CLOSE_CURLY,false);
            // Code for expansion specified on line 113 of QUTE.javacc
            int int11=nextTokenKind();
            if (int11==TEXT||int11==OPEN_CURLY||int11==EACH||int11==FOR||int11==IF||int11==QUTE_INCLUDE||int11==INSERT||int11==WITH||int11==START_SECTION||int11==START_PARAMETER_DECL) {
                // Code for expansion specified on line 113 of QUTE.javacc
                // Code for Block specified on line 113 of QUTE.javacc
                Block();
            }
            // Code for expansion specified on line 114 of QUTE.javacc
            switch(nextTokenKind()) {
                case ENDFOR:
                // Code for expansion specified on line 114 of QUTE.javacc
                // Code for expansion specified on line 114 of QUTE.javacc
                consumeToken(ENDFOR,false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 114 of QUTE.javacc
                // Code for expansion specified on line 114 of QUTE.javacc
                consumeToken(ABBREVIATED_END,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from ForSection");
        }
        catch(ParseException e) {
            parseException23=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException23==null) {
                    ForSection23.setEndLine(current_token.getEndLine());
                    ForSection23.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ForSection23,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException23: "+parseException23.getMessage());
                    ForSection23.setParseException(parseException23);
                    if (ForSection23forced) {
                        //		                attemptRecovery(ForSection23, ABBREVIATED_END, ENDFOR);
                        insertVirtualToken(ABBREVIATED_END);
                        closeNodeScope(ForSection23,true);
                    }
                    else {
                        closeNodeScope(ForSection23,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException23");
                        throw parseException23;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 117
    final public void IfSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 117 of QUTE.javacc");
        // Code for expansion specified on line 119 of QUTE.javacc
        boolean IfSection24forced=false;
        IfSection IfSection24=null;
        if (buildTree) {
            IfSection24=new IfSection();
            Token start=getToken(1);
            IfSection24.setBeginLine(start.beginLine);
            IfSection24.setBeginColumn(start.beginColumn);
            IfSection24.setInputSource(this.getInputSource());
            openNodeScope(IfSection24);
        }
        ParseException parseException24=null;
        try {
            // Code for expansion specified on line 119 of QUTE.javacc
            consumeToken(IF,false);
            // Code for Expression specified on line 120 of QUTE.javacc
            Expression();
            // Code for expansion specified on line 121 of QUTE.javacc
            consumeToken(CLOSE_CURLY,false);
            // Code for Block specified on line 122 of QUTE.javacc
            Block();
            // Code for expansion specified on line 123 of QUTE.javacc
            label_20:
            while (true) {
                int int12=nextTokenKind();
                if (!(int12==ELSEIF)) {
                    break label_20;
                }
                // Code for expansion specified on line 123 of QUTE.javacc
                // Code for ElseIfSection specified on line 123 of QUTE.javacc
                ElseIfSection();
            }
            // Code for expansion specified on line 124 of QUTE.javacc
            int int13=nextTokenKind();
            if (int13==ELSE) {
                // Code for expansion specified on line 124 of QUTE.javacc
                // Code for ElseBlock specified on line 124 of QUTE.javacc
                ElseBlock();
            }
            // Code for expansion specified on line 125 of QUTE.javacc
            switch(nextTokenKind()) {
                case ENDIF:
                // Code for expansion specified on line 125 of QUTE.javacc
                // Code for expansion specified on line 125 of QUTE.javacc
                consumeToken(ENDIF,false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 125 of QUTE.javacc
                // Code for expansion specified on line 125 of QUTE.javacc
                consumeToken(ABBREVIATED_END,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from IfSection");
        }
        catch(ParseException e) {
            parseException24=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException24==null) {
                    IfSection24.setEndLine(current_token.getEndLine());
                    IfSection24.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(IfSection24,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException24: "+parseException24.getMessage());
                    IfSection24.setParseException(parseException24);
                    if (IfSection24forced) {
                        //		                attemptRecovery(IfSection24, ABBREVIATED_END, ENDIF);
                        insertVirtualToken(ABBREVIATED_END);
                        closeNodeScope(IfSection24,true);
                    }
                    else {
                        closeNodeScope(IfSection24,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException24");
                        throw parseException24;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 128
    final public void ElseIfSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 128 of QUTE.javacc");
        // Code for expansion specified on line 130 of QUTE.javacc
        boolean ElseIfSection25forced=false;
        ElseIfSection ElseIfSection25=null;
        if (buildTree) {
            ElseIfSection25=new ElseIfSection();
            Token start=getToken(1);
            ElseIfSection25.setBeginLine(start.beginLine);
            ElseIfSection25.setBeginColumn(start.beginColumn);
            ElseIfSection25.setInputSource(this.getInputSource());
            openNodeScope(ElseIfSection25);
        }
        ParseException parseException25=null;
        try {
            // Code for expansion specified on line 130 of QUTE.javacc
            consumeToken(ELSEIF,false);
            // Code for Expression specified on line 131 of QUTE.javacc
            Expression();
            // Code for expansion specified on line 132 of QUTE.javacc
            consumeToken(CLOSE_CURLY,true);
            // Code for Block specified on line 133 of QUTE.javacc
            Block();
            if (trace_enabled) LOGGER.info("Exiting normally from ElseIfSection");
        }
        catch(ParseException e) {
            parseException25=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException25==null) {
                    ElseIfSection25.setEndLine(current_token.getEndLine());
                    ElseIfSection25.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ElseIfSection25,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException25: "+parseException25.getMessage());
                    ElseIfSection25.setParseException(parseException25);
                    if (ElseIfSection25forced) {
                        //		                attemptRecovery(ElseIfSection25, TEXT, ABBREVIATED_END, ENDEACH, ENDFOR, ENDIF, ENDINCLUDE, ENDINSERT, ENDWITH, END_SECTION, CLOSE_CURLY, CLOSE_EMPTY);
                        insertVirtualToken(TEXT);
                        closeNodeScope(ElseIfSection25,true);
                    }
                    else {
                        closeNodeScope(ElseIfSection25,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException25");
                        throw parseException25;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 136
    final public void ElseBlock() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 136 of QUTE.javacc");
        // Code for expansion specified on line 138 of QUTE.javacc
        boolean ElseBlock26forced=false;
        ElseBlock ElseBlock26=null;
        if (buildTree) {
            ElseBlock26=new ElseBlock();
            Token start=getToken(1);
            ElseBlock26.setBeginLine(start.beginLine);
            ElseBlock26.setBeginColumn(start.beginColumn);
            ElseBlock26.setInputSource(this.getInputSource());
            openNodeScope(ElseBlock26);
        }
        ParseException parseException26=null;
        try {
            // Code for expansion specified on line 138 of QUTE.javacc
            consumeToken(ELSE,false);
            // Code for Block specified on line 139 of QUTE.javacc
            Block();
            if (trace_enabled) LOGGER.info("Exiting normally from ElseBlock");
        }
        catch(ParseException e) {
            parseException26=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException26==null) {
                    ElseBlock26.setEndLine(current_token.getEndLine());
                    ElseBlock26.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(ElseBlock26,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException26: "+parseException26.getMessage());
                    ElseBlock26.setParseException(parseException26);
                    if (ElseBlock26forced) {
                        //		                attemptRecovery(ElseBlock26, TEXT, ABBREVIATED_END, ENDEACH, ENDFOR, ENDIF, ENDINCLUDE, ENDINSERT, ENDWITH, END_SECTION, CLOSE_CURLY, CLOSE_EMPTY);
                        insertVirtualToken(TEXT);
                        closeNodeScope(ElseBlock26,true);
                    }
                    else {
                        closeNodeScope(ElseBlock26,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException26");
                        throw parseException26;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 142
    final public void IncludeSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 142 of QUTE.javacc");
        // Code for expansion specified on line 144 of QUTE.javacc
        boolean IncludeSection27forced=false;
        IncludeSection IncludeSection27=null;
        if (buildTree) {
            IncludeSection27=new IncludeSection();
            Token start=getToken(1);
            IncludeSection27.setBeginLine(start.beginLine);
            IncludeSection27.setBeginColumn(start.beginColumn);
            IncludeSection27.setInputSource(this.getInputSource());
            openNodeScope(IncludeSection27);
        }
        ParseException parseException27=null;
        try {
            // Code for expansion specified on line 144 of QUTE.javacc
            consumeToken(QUTE_INCLUDE,false);
            // Code for Expression specified on line 145 of QUTE.javacc
            Expression();
            // Code for expansion specified on line 146 of QUTE.javacc
            consumeToken(CLOSE_CURLY,false);
            // Code for Block specified on line 147 of QUTE.javacc
            Block();
            // Code for expansion specified on line 148 of QUTE.javacc
            switch(nextTokenKind()) {
                case ENDINCLUDE:
                // Code for expansion specified on line 148 of QUTE.javacc
                // Code for expansion specified on line 148 of QUTE.javacc
                consumeToken(ENDINCLUDE,false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 148 of QUTE.javacc
                // Code for expansion specified on line 148 of QUTE.javacc
                consumeToken(ABBREVIATED_END,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from IncludeSection");
        }
        catch(ParseException e) {
            parseException27=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException27==null) {
                    IncludeSection27.setEndLine(current_token.getEndLine());
                    IncludeSection27.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(IncludeSection27,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException27: "+parseException27.getMessage());
                    IncludeSection27.setParseException(parseException27);
                    if (IncludeSection27forced) {
                        //		                attemptRecovery(IncludeSection27, ABBREVIATED_END, ENDINCLUDE);
                        insertVirtualToken(ABBREVIATED_END);
                        closeNodeScope(IncludeSection27,true);
                    }
                    else {
                        closeNodeScope(IncludeSection27,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException27");
                        throw parseException27;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 151
    final public void InsertSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 151 of QUTE.javacc");
        // Code for expansion specified on line 153 of QUTE.javacc
        boolean InsertSection28forced=false;
        InsertSection InsertSection28=null;
        if (buildTree) {
            InsertSection28=new InsertSection();
            Token start=getToken(1);
            InsertSection28.setBeginLine(start.beginLine);
            InsertSection28.setBeginColumn(start.beginColumn);
            InsertSection28.setInputSource(this.getInputSource());
            openNodeScope(InsertSection28);
        }
        ParseException parseException28=null;
        try {
            // Code for expansion specified on line 153 of QUTE.javacc
            consumeToken(INSERT,false);
            // Code for Expression specified on line 154 of QUTE.javacc
            Expression();
            // Code for expansion specified on line 155 of QUTE.javacc
            consumeToken(CLOSE_CURLY,false);
            // Code for Block specified on line 156 of QUTE.javacc
            Block();
            // Code for expansion specified on line 157 of QUTE.javacc
            switch(nextTokenKind()) {
                case ENDINSERT:
                // Code for expansion specified on line 157 of QUTE.javacc
                // Code for expansion specified on line 157 of QUTE.javacc
                consumeToken(ENDINSERT,false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 157 of QUTE.javacc
                // Code for expansion specified on line 157 of QUTE.javacc
                consumeToken(ABBREVIATED_END,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from InsertSection");
        }
        catch(ParseException e) {
            parseException28=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException28==null) {
                    InsertSection28.setEndLine(current_token.getEndLine());
                    InsertSection28.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(InsertSection28,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException28: "+parseException28.getMessage());
                    InsertSection28.setParseException(parseException28);
                    if (InsertSection28forced) {
                        //		                attemptRecovery(InsertSection28, ABBREVIATED_END, ENDINSERT);
                        insertVirtualToken(ABBREVIATED_END);
                        closeNodeScope(InsertSection28,true);
                    }
                    else {
                        closeNodeScope(InsertSection28,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException28");
                        throw parseException28;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 160
    final public void WithSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 160 of QUTE.javacc");
        // Code for expansion specified on line 162 of QUTE.javacc
        boolean WithSection29forced=false;
        WithSection WithSection29=null;
        if (buildTree) {
            WithSection29=new WithSection();
            Token start=getToken(1);
            WithSection29.setBeginLine(start.beginLine);
            WithSection29.setBeginColumn(start.beginColumn);
            WithSection29.setInputSource(this.getInputSource());
            openNodeScope(WithSection29);
        }
        ParseException parseException29=null;
        try {
            // Code for expansion specified on line 162 of QUTE.javacc
            consumeToken(WITH,false);
            // Code for Expression specified on line 163 of QUTE.javacc
            Expression();
            // Code for expansion specified on line 164 of QUTE.javacc
            consumeToken(CLOSE_CURLY,false);
            // Code for Block specified on line 165 of QUTE.javacc
            Block();
            // Code for expansion specified on line 166 of QUTE.javacc
            switch(nextTokenKind()) {
                case ENDWITH:
                // Code for expansion specified on line 166 of QUTE.javacc
                // Code for expansion specified on line 166 of QUTE.javacc
                consumeToken(ENDWITH,false);
                break;
                case ABBREVIATED_END:
                // Code for expansion specified on line 166 of QUTE.javacc
                // Code for expansion specified on line 166 of QUTE.javacc
                consumeToken(ABBREVIATED_END,false);
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from WithSection");
        }
        catch(ParseException e) {
            parseException29=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException29==null) {
                    WithSection29.setEndLine(current_token.getEndLine());
                    WithSection29.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(WithSection29,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException29: "+parseException29.getMessage());
                    WithSection29.setParseException(parseException29);
                    if (WithSection29forced) {
                        //		                attemptRecovery(WithSection29, ABBREVIATED_END, ENDWITH);
                        insertVirtualToken(ABBREVIATED_END);
                        closeNodeScope(WithSection29,true);
                    }
                    else {
                        closeNodeScope(WithSection29,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException29");
                        throw parseException29;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 169
    final public void UserSection() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 169 of QUTE.javacc");
        // Code for expansion specified on line 171 of QUTE.javacc
        boolean UserSection30forced=false;
        UserSection UserSection30=null;
        if (buildTree) {
            UserSection30=new UserSection();
            Token start=getToken(1);
            UserSection30.setBeginLine(start.beginLine);
            UserSection30.setBeginColumn(start.beginColumn);
            UserSection30.setInputSource(this.getInputSource());
            openNodeScope(UserSection30);
        }
        ParseException parseException30=null;
        try {
            // Code for expansion specified on line 171 of QUTE.javacc
            consumeToken(START_SECTION,false);
            // Code for expansion specified on line 171 of QUTE.javacc
            int int14=nextTokenKind();
            if (int14==PLUS||int14==MINUS||int14==EXCLAM||int14==NULL||int14==TRUE||int14==FALSE||int14==INTEGER||int14==DECIMAL||int14==STRING_LITERAL||int14==RAW_STRING||int14==C_IDENTIFIER||int14==OPEN_PAREN) {
                // Code for expansion specified on line 171 of QUTE.javacc
                // Code for Expression specified on line 171 of QUTE.javacc
                Expression();
            }
            // Code for expansion specified on line 173 of QUTE.javacc
            switch(nextTokenKind()) {
                case CLOSE_EMPTY:
                // Code for expansion specified on line 173 of QUTE.javacc
                // Code for expansion specified on line 173 of QUTE.javacc
                consumeToken(CLOSE_EMPTY,true);
                break;
                case CLOSE_CURLY:
                // Code for expansion specified on line 175 of QUTE.javacc
                // Code for expansion specified on line 176 of QUTE.javacc
                // Code for expansion specified on line 176 of QUTE.javacc
                consumeToken(CLOSE_CURLY,false);
                // Code for Block specified on line 177 of QUTE.javacc
                Block();
                // Code for expansion specified on line 179 of QUTE.javacc
                switch(nextTokenKind()) {
                    case END_SECTION:
                    // Code for expansion specified on line 179 of QUTE.javacc
                    // Code for expansion specified on line 179 of QUTE.javacc
                    consumeToken(END_SECTION,false);
                    break;
                    case ABBREVIATED_END:
                    // Code for expansion specified on line 179 of QUTE.javacc
                    // Code for expansion specified on line 179 of QUTE.javacc
                    consumeToken(ABBREVIATED_END,false);
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                break;
                default:
                consumeToken(-1);
                throw new ParseException();
            }
            if (trace_enabled) LOGGER.info("Exiting normally from UserSection");
        }
        catch(ParseException e) {
            parseException30=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException30==null) {
                    UserSection30.setEndLine(current_token.getEndLine());
                    UserSection30.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(UserSection30,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException30: "+parseException30.getMessage());
                    UserSection30.setParseException(parseException30);
                    if (UserSection30forced) {
                        //		                attemptRecovery(UserSection30, ABBREVIATED_END, END_SECTION, CLOSE_EMPTY);
                        insertVirtualToken(ABBREVIATED_END);
                        closeNodeScope(UserSection30,true);
                    }
                    else {
                        closeNodeScope(UserSection30,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException30");
                        throw parseException30;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 185
    final public void Block() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 185 of QUTE.javacc");
        // Code for expansion specified on line 187 of QUTE.javacc
        boolean Block31forced=false;
        Block Block31=null;
        if (buildTree) {
            Block31=new Block();
            Token start=getToken(1);
            Block31.setBeginLine(start.beginLine);
            Block31.setBeginColumn(start.beginColumn);
            Block31.setInputSource(this.getInputSource());
            openNodeScope(Block31);
        }
        ParseException parseException31=null;
        try {
            // Code for expansion specified on line 207 of QUTE.javacc
            label_23:
            while (true) {
                // Code for expansion specified on line 188 of QUTE.javacc
                switch(nextTokenKind()) {
                    case TEXT:
                    // Code for expansion specified on line 188 of QUTE.javacc
                    // Code for expansion specified on line 188 of QUTE.javacc
                    consumeToken(TEXT,false);
                    break;
                    case START_PARAMETER_DECL:
                    // Code for expansion specified on line 190 of QUTE.javacc
                    // Code for ParameterDeclaration specified on line 190 of QUTE.javacc
                    ParameterDeclaration();
                    break;
                    case OPEN_CURLY:
                    // Code for expansion specified on line 192 of QUTE.javacc
                    // Code for Interpolation specified on line 192 of QUTE.javacc
                    Interpolation();
                    break;
                    case EACH:
                    // Code for expansion specified on line 194 of QUTE.javacc
                    // Code for EachSection specified on line 194 of QUTE.javacc
                    EachSection();
                    break;
                    case FOR:
                    // Code for expansion specified on line 196 of QUTE.javacc
                    // Code for ForSection specified on line 196 of QUTE.javacc
                    ForSection();
                    break;
                    case IF:
                    // Code for expansion specified on line 198 of QUTE.javacc
                    // Code for IfSection specified on line 198 of QUTE.javacc
                    IfSection();
                    break;
                    case QUTE_INCLUDE:
                    // Code for expansion specified on line 200 of QUTE.javacc
                    // Code for IncludeSection specified on line 200 of QUTE.javacc
                    IncludeSection();
                    break;
                    case INSERT:
                    // Code for expansion specified on line 202 of QUTE.javacc
                    // Code for InsertSection specified on line 202 of QUTE.javacc
                    InsertSection();
                    break;
                    case WITH:
                    // Code for expansion specified on line 204 of QUTE.javacc
                    // Code for WithSection specified on line 204 of QUTE.javacc
                    WithSection();
                    break;
                    case START_SECTION:
                    // Code for expansion specified on line 206 of QUTE.javacc
                    // Code for UserSection specified on line 206 of QUTE.javacc
                    UserSection();
                    break;
                    default:
                    consumeToken(-1);
                    throw new ParseException();
                }
                int int15=nextTokenKind();
                if (!(int15==TEXT||int15==OPEN_CURLY||int15==EACH||int15==FOR||int15==IF||int15==QUTE_INCLUDE||int15==INSERT||int15==WITH||int15==START_SECTION||int15==START_PARAMETER_DECL)) {
                    break label_23;
                }
            }
            if (trace_enabled) LOGGER.info("Exiting normally from Block");
        }
        catch(ParseException e) {
            parseException31=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException31==null) {
                    Block31.setEndLine(current_token.getEndLine());
                    Block31.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Block31,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException31: "+parseException31.getMessage());
                    Block31.setParseException(parseException31);
                    if (Block31forced) {
                        //		                attemptRecovery(Block31, TEXT, ABBREVIATED_END, ENDEACH, ENDFOR, ENDIF, ENDINCLUDE, ENDINSERT, ENDWITH, END_SECTION, CLOSE_CURLY, CLOSE_EMPTY);
                        insertVirtualToken(TEXT);
                        closeNodeScope(Block31,true);
                    }
                    else {
                        closeNodeScope(Block31,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException31");
                        throw parseException31;
                    }
                }
            }
        }
    }

    // QUTE.javacc, line 211
    final public void Root() throws ParseException {
        if (trace_enabled) LOGGER.info("Entering production defined on line 211 of QUTE.javacc");
        // Code for expansion specified on line 213 of QUTE.javacc
        boolean Root32forced=this.tolerantParsing;
        Root Root32=null;
        if (buildTree) {
            Root32=new Root();
            Token start=getToken(1);
            Root32.setBeginLine(start.beginLine);
            Root32.setBeginColumn(start.beginColumn);
            Root32.setInputSource(this.getInputSource());
            openNodeScope(Root32);
        }
        ParseException parseException32=null;
        try {
            // Code for expansion specified on line 213 of QUTE.javacc
            int int16=nextTokenKind();
            if (int16==TEXT||int16==OPEN_CURLY||int16==EACH||int16==FOR||int16==IF||int16==QUTE_INCLUDE||int16==INSERT||int16==WITH||int16==START_SECTION||int16==START_PARAMETER_DECL) {
                // Code for expansion specified on line 213 of QUTE.javacc
                // Code for Block specified on line 213 of QUTE.javacc
                Block();
            }
            // Code for expansion specified on line 214 of QUTE.javacc
            consumeToken(0,false);
            if (trace_enabled) LOGGER.info("Exiting normally from Root");
        }
        catch(ParseException e) {
            parseException32=e;
            if (trace_enabled) LOGGER.info("We have a parse error but somehow handled it. (Or did we?)");
        }
        finally {
            if (buildTree) {
                if (parseException32==null) {
                    Root32.setEndLine(current_token.getEndLine());
                    Root32.setEndColumn(current_token.getEndColumn());
                    closeNodeScope(Root32,nodeArity()>1);
                }
                else {
                    if (trace_enabled) LOGGER.warning("ParseException parseException32: "+parseException32.getMessage());
                    Root32.setParseException(parseException32);
                    if (Root32forced) {
                        //		                attemptRecovery(Root32, 0);
                        insertVirtualToken(0);
                        closeNodeScope(Root32,true);
                    }
                    else {
                        closeNodeScope(Root32,false);
                        if (trace_enabled) LOGGER.info("Rethrowing "+"parseException32");
                        throw parseException32;
                    }
                }
            }
        }
    }

    //====================================
    // Start of methods for Phase 2 Lookaheads
    //====================================
    private boolean phase2_6_QEL_javacc_line_175(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_6_QEL_javacc_line_175();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_8_QEL_javacc_line_185(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_8_QEL_javacc_line_185();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_11_QEL_javacc_line_224(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_11_QEL_javacc_line_224();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    private boolean phase2_14_QEL_javacc_line_237(int maxLookahead) {
        jj_la=maxLookahead;
        jj_lastpos=jj_scanpos=current_token;
        try {
            return!phase3_14_QEL_javacc_line_237();
        }
        catch(LookaheadSuccess ls) {
            return true;
        }
    }

    //====================================
    // Start of methods for Phase 3 Lookaheads
    //====================================
    private boolean phase3_6_QEL_javacc_line_175() {
        if (phase3R_173()) return true;
        return false;
    }

    private boolean phase3_8_QEL_javacc_line_185() {
        Token token17=jj_scanpos;
        if (phase3R_26()) {
            jj_scanpos=token17;
            if (phase3R_27()) return true;
        }
        return false;
    }

    private boolean phase3_11_QEL_javacc_line_224() {
        if (jj_scan_token(EXCLAM)) return true;
        if (phase3R_76()) return true;
        return false;
    }

    private boolean phase3_14_QEL_javacc_line_237() {
        Token token18=jj_scanpos;
        if (phase3R_29()) {
            jj_scanpos=token18;
            if (phase3R_30()) {
                jj_scanpos=token18;
                if (phase3R_31()) return true;
            }
        }
        return false;
    }

    private boolean phase3R_173() {
        if (phase3R_44()) return true;
        while (true) {
            Token token19=jj_scanpos;
            if (phase3R_33()) {
                jj_scanpos=token19;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_26() {
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean phase3R_27() {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean phase3R_76() {
        Token token20=jj_scanpos;
        if (phase3R_84()) {
            jj_scanpos=token20;
            if (phase3R_85()) {
                jj_scanpos=token20;
                if (phase3R_86()) {
                    jj_scanpos=token20;
                    if (phase3R_87()) {
                        jj_scanpos=token20;
                        if (phase3R_88()) {
                            jj_scanpos=token20;
                            if (phase3R_89()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean phase3R_29() {
        if (jj_scan_token(DOT)) return true;
        return false;
    }

    private boolean phase3R_30() {
        if (jj_scan_token(OPEN_BRACKET)) return true;
        return false;
    }

    private boolean phase3R_31() {
        if (jj_scan_token(OPEN_PAREN)) return true;
        return false;
    }

    private boolean phase3R_44() {
        if (phase3R_55()) return true;
        while (true) {
            Token token21=jj_scanpos;
            if (phase3R_41()) {
                jj_scanpos=token21;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_33() {
        Token token22=jj_scanpos;
        if (phase3R_42()) {
            jj_scanpos=token22;
            if (phase3R_43()) return true;
        }
        if (phase3R_44()) return true;
        return false;
    }

    private boolean phase3R_84() {
        if (jj_scan_token(C_IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3R_85() {
        if (phase3R_98()) return true;
        return false;
    }

    private boolean phase3R_86() {
        if (phase3R_99()) return true;
        return false;
    }

    private boolean phase3R_87() {
        if (phase3R_100()) return true;
        return false;
    }

    private boolean phase3R_88() {
        if (phase3R_101()) return true;
        return false;
    }

    private boolean phase3R_89() {
        if (phase3R_102()) return true;
        return false;
    }

    private boolean phase3R_55() {
        Token token23=jj_scanpos;
        if (phase3R_50()) {
            jj_scanpos=token23;
            if (phase3R_51()) {
                jj_scanpos=token23;
                if (phase3R_52()) return true;
            }
        }
        return false;
    }

    private boolean phase3R_41() {
        Token token24=jj_scanpos;
        if (phase3R_53()) {
            jj_scanpos=token24;
            if (phase3R_54()) return true;
        }
        if (phase3R_55()) return true;
        return false;
    }

    private boolean phase3R_42() {
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean phase3R_43() {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean phase3R_98() {
        Token token25=jj_scanpos;
        if (phase3R_112()) {
            jj_scanpos=token25;
            if (phase3R_113()) return true;
        }
        return false;
    }

    private boolean phase3R_99() {
        Token token26=jj_scanpos;
        if (phase3R_114()) {
            jj_scanpos=token26;
            if (phase3R_115()) return true;
        }
        return false;
    }

    private boolean phase3R_100() {
        Token token27=jj_scanpos;
        if (phase3R_116()) {
            jj_scanpos=token27;
            if (phase3R_117()) return true;
        }
        return false;
    }

    private boolean phase3R_101() {
        if (jj_scan_token(NULL)) return true;
        return false;
    }

    private boolean phase3R_102() {
        if (jj_scan_token(OPEN_PAREN)) return true;
        if (phase3R_154()) return true;
        if (jj_scan_token(CLOSE_PAREN)) return true;
        return false;
    }

    private boolean phase3R_50() {
        if (phase3R_63()) return true;
        return false;
    }

    private boolean phase3R_51() {
        if (phase3R_64()) return true;
        return false;
    }

    private boolean phase3R_52() {
        if (phase3R_70()) return true;
        return false;
    }

    private boolean phase3R_53() {
        if (jj_scan_token(TIMES)) return true;
        return false;
    }

    private boolean phase3R_54() {
        if (jj_scan_token(DIVIDE)) return true;
        return false;
    }

    private boolean phase3R_112() {
        if (jj_scan_token(INTEGER)) return true;
        return false;
    }

    private boolean phase3R_113() {
        if (jj_scan_token(DECIMAL)) return true;
        return false;
    }

    private boolean phase3R_114() {
        if (jj_scan_token(STRING_LITERAL)) return true;
        return false;
    }

    private boolean phase3R_115() {
        if (jj_scan_token(RAW_STRING)) return true;
        return false;
    }

    private boolean phase3R_116() {
        if (jj_scan_token(TRUE)) return true;
        return false;
    }

    private boolean phase3R_117() {
        if (jj_scan_token(FALSE)) return true;
        return false;
    }

    private boolean phase3R_154() {
        if (phase3R_134()) return true;
        return false;
    }

    private boolean phase3R_63() {
        Token token28=jj_scanpos;
        if (phase3R_67()) {
            jj_scanpos=token28;
            if (phase3R_68()) return true;
        }
        if (phase3R_70()) return true;
        return false;
    }

    private boolean phase3R_64() {
        if (jj_scan_token(EXCLAM)) return true;
        if (phase3R_70()) return true;
        return false;
    }

    private boolean phase3R_70() {
        if (phase3R_78()) return true;
        while (true) {
            Token token29=jj_scanpos;
            if (phase3R_72()) {
                jj_scanpos=token29;
                break;
            }
        }
        Token token30=jj_scanpos;
        if (phase3R_73()) jj_scanpos=token30;
        return false;
    }

    private boolean phase3R_134() {
        if (phase3R_145()) return true;
        while (true) {
            Token token31=jj_scanpos;
            if (phase3R_138()) {
                jj_scanpos=token31;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_67() {
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean phase3R_68() {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean phase3R_78() {
        if (phase3R_76()) return true;
        while (true) {
            Token token32=jj_scanpos;
            if (phase3R_77()) {
                jj_scanpos=token32;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_72() {
        if (jj_scan_token(EXCLAM)) return true;
        if (phase3R_78()) return true;
        return false;
    }

    private boolean phase3R_73() {
        if (jj_scan_token(EXCLAM)) return true;
        return false;
    }

    private boolean phase3R_145() {
        if (phase3R_152()) return true;
        while (true) {
            Token token33=jj_scanpos;
            if (phase3R_142()) {
                jj_scanpos=token33;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_138() {
        Token token34=jj_scanpos;
        if (phase3R_143()) {
            jj_scanpos=token34;
            if (phase3R_144()) return true;
        }
        if (phase3R_145()) return true;
        return false;
    }

    private boolean phase3R_77() {
        Token token35=jj_scanpos;
        if (phase3R_90()) {
            jj_scanpos=token35;
            if (phase3R_91()) {
                jj_scanpos=token35;
                if (phase3R_92()) return true;
            }
        }
        return false;
    }

    private boolean phase3R_152() {
        if (phase3R_160()) return true;
        Token token36=jj_scanpos;
        if (phase3R_149()) jj_scanpos=token36;
        return false;
    }

    private boolean phase3R_142() {
        Token token37=jj_scanpos;
        if (phase3R_150()) {
            jj_scanpos=token37;
            if (phase3R_151()) return true;
        }
        if (phase3R_152()) return true;
        return false;
    }

    private boolean phase3R_143() {
        if (jj_scan_token(OR)) return true;
        return false;
    }

    private boolean phase3R_144() {
        if (jj_scan_token(OR2)) return true;
        return false;
    }

    private boolean phase3R_90() {
        if (phase3R_103()) return true;
        return false;
    }

    private boolean phase3R_91() {
        if (phase3R_104()) return true;
        return false;
    }

    private boolean phase3R_92() {
        if (phase3R_105()) return true;
        return false;
    }

    private boolean phase3R_160() {
        if (phase3R_171()) return true;
        Token token38=jj_scanpos;
        if (phase3R_156()) jj_scanpos=token38;
        return false;
    }

    private boolean phase3R_149() {
        Token token39=jj_scanpos;
        if (phase3R_157()) {
            jj_scanpos=token39;
            if (phase3R_158()) {
                jj_scanpos=token39;
                if (phase3R_159()) return true;
            }
        }
        if (phase3R_160()) return true;
        return false;
    }

    private boolean phase3R_150() {
        if (jj_scan_token(AND)) return true;
        return false;
    }

    private boolean phase3R_151() {
        if (jj_scan_token(AND2)) return true;
        return false;
    }

    private boolean phase3R_103() {
        if (jj_scan_token(DOT)) return true;
        Token token40=jj_scanpos;
        if (phase3R_119()) {
            jj_scanpos=token40;
            if (phase3R_120()) return true;
        }
        return false;
    }

    private boolean phase3R_104() {
        if (jj_scan_token(OPEN_BRACKET)) return true;
        if (phase3R_154()) return true;
        if (jj_scan_token(CLOSE_BRACKET)) return true;
        return false;
    }

    private boolean phase3R_105() {
        if (jj_scan_token(OPEN_PAREN)) return true;
        Token token41=jj_scanpos;
        if (phase3R_122()) jj_scanpos=token41;
        if (jj_scan_token(CLOSE_PAREN)) return true;
        return false;
    }

    private boolean phase3R_171() {
        if (phase3R_173()) return true;
        Token token42=jj_scanpos;
        if (phase3R_162()) jj_scanpos=token42;
        return false;
    }

    private boolean phase3R_156() {
        Token token43=jj_scanpos;
        if (phase3R_163()) {
            jj_scanpos=token43;
            if (phase3R_164()) {
                jj_scanpos=token43;
                if (phase3R_165()) {
                    jj_scanpos=token43;
                    if (phase3R_166()) {
                        jj_scanpos=token43;
                        if (phase3R_167()) {
                            jj_scanpos=token43;
                            if (phase3R_168()) {
                                jj_scanpos=token43;
                                if (phase3R_169()) {
                                    jj_scanpos=token43;
                                    if (phase3R_170()) return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (phase3R_171()) return true;
        return false;
    }

    private boolean phase3R_157() {
        if (jj_scan_token(EQUALS)) return true;
        return false;
    }

    private boolean phase3R_158() {
        if (jj_scan_token(EQUALS2)) return true;
        return false;
    }

    private boolean phase3R_159() {
        if (jj_scan_token(EQUALS3)) return true;
        return false;
    }

    private boolean phase3R_119() {
        if (jj_scan_token(C_IDENTIFIER)) return true;
        return false;
    }

    private boolean phase3R_120() {
        if (jj_scan_token(TIMES)) return true;
        return false;
    }

    private boolean phase3R_122() {
        if (phase3R_135()) return true;
        return false;
    }

    private boolean phase3R_162() {
        if (jj_scan_token(DOT_DOT)) return true;
        Token token44=jj_scanpos;
        if (phase3R_172()) jj_scanpos=token44;
        return false;
    }

    private boolean phase3R_163() {
        if (jj_scan_token(GT)) return true;
        return false;
    }

    private boolean phase3R_164() {
        if (jj_scan_token(GE)) return true;
        return false;
    }

    private boolean phase3R_165() {
        if (jj_scan_token(LT)) return true;
        return false;
    }

    private boolean phase3R_166() {
        if (jj_scan_token(LE)) return true;
        return false;
    }

    private boolean phase3R_167() {
        if (jj_scan_token(ALT_GT)) return true;
        return false;
    }

    private boolean phase3R_168() {
        if (jj_scan_token(ALT_GE)) return true;
        return false;
    }

    private boolean phase3R_169() {
        if (jj_scan_token(ALT_LE)) return true;
        return false;
    }

    private boolean phase3R_170() {
        if (jj_scan_token(ALT_LT)) return true;
        return false;
    }

    private boolean phase3R_135() {
        if (phase3R_139()) return true;
        return false;
    }

    private boolean phase3R_172() {
        if (phase3R_173()) return true;
        return false;
    }

    private boolean phase3R_139() {
        if (phase3R_154()) return true;
        while (true) {
            Token token45=jj_scanpos;
            if (phase3R_147()) {
                jj_scanpos=token45;
                break;
            }
        }
        return false;
    }

    private boolean phase3R_147() {
        Token token46=jj_scanpos;
        if (phase3R_153()) jj_scanpos=token46;
        if (phase3R_154()) return true;
        return false;
    }

    private boolean phase3R_153() {
        if (jj_scan_token(COMMA)) return true;
        return false;
    }

    Token current_token;
    private Token jj_scanpos,jj_lastpos;
    private int jj_la;
    private boolean semanticLookahead;
    public QUTEParser(String inputSource,CharSequence chars) {
        token_source=new QUTELexer(inputSource,chars);
    }

    public QUTEParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    public QUTEParser(Reader reader) {
        token_source=new QUTELexer(reader);
        current_token=new Token();
    }

    /** Constructor with user supplied Lexer. */
    public QUTEParser(QUTELexer lexer) {
        token_source=lexer;
        current_token=new Token();
    }

    private void insertVirtualToken(int tokenType) {
        Token virtualToken=Token.newToken(tokenType,"VIRTUAL "+tokenImage[tokenType]);
        virtualToken.setUnparsed(true);
        int line=current_token.getEndLine();
        int column=current_token.getEndColumn();
        virtualToken.setBeginLine(line);
        virtualToken.setEndLine(line);
        virtualToken.setBeginColumn(column);
        virtualToken.setEndColumn(column);
        token_source.doLexicalStateSwitch(tokenType);
        if (tokensAreNodes&&buildTree) {
            currentNodeScope.add(virtualToken);
        }
    }

    /**
     * Based on the type of the node and the terminating token, we attempt to scan forward and recover. 
     */
    private void attemptRecovery(Node node,int...finalTokenTypes) {
        int finalTokenType=finalTokenTypes[0];
        List<Token>scanAhead=getTokensToEOL(finalTokenTypes);
        List<Token>unparsedTokens=null;
        Token terminalTokenFound=null;
        for (Token tok : scanAhead) {
            if (!intArrayContains(finalTokenTypes,tok.kind)) {
                tok.setUnparsed(true);
                tok.ignored=true;
                node.setEndLine(tok.getEndLine());
                node.setEndColumn(tok.getEndColumn());
                if (unparsedTokens==null) unparsedTokens=new ArrayList<Token>();
                tok.unparsed=true;
                unparsedTokens.add(tok);
            }
            else {
                terminalTokenFound=tok;
                tok.precedingUnparsedTokens=unparsedTokens;
                token_source.doLexicalStateSwitch(tok.kind);
            }
        }
        if (terminalTokenFound!=null) {
            Token lastScanned=scanAhead.get(scanAhead.size()-1);
            Token virtualToken=Token.newToken(finalTokenType,"VIRTUAL "+nodeNames[finalTokenType]);
            virtualToken.setUnparsed(true);
            virtualToken.setBeginLine(lastScanned.getEndLine());
            virtualToken.setBeginColumn(lastScanned.getEndColumn());
            virtualToken.setEndLine(lastScanned.getEndLine());
            virtualToken.setEndColumn(lastScanned.getEndColumn());
            if (tokensAreNodes) {
                currentNodeScope.add(virtualToken);
            }
            node.setEndLine(virtualToken.getEndLine());
            node.setEndColumn(virtualToken.getEndColumn());
        }
        token_source.doLexicalStateSwitch(finalTokenType);
    }

    private Token consumeToken(int expectedType) throws ParseException {
        return consumeToken(expectedType,false);
    }

    private Token consumeToken(int expectedType,boolean forced) throws ParseException {
        Token oldToken=current_token;
        current_token=current_token.getNext();
        if (current_token==null) {
            current_token=token_source.getNextToken();
        }
        if (!tolerantParsing&&current_token.invalidToken!=null) {
            throw new ParseException(current_token);
        }
        if (current_token.kind!=expectedType) {
            handleUnexpectedTokenType(expectedType,forced,oldToken);
        }
        if (buildTree&&tokensAreNodes) {
            pushNode(current_token);
        }
        if (trace_enabled) LOGGER.info("Consumed token of type "+tokenImage[current_token.kind]+" from "+current_token.getLocation());
        return current_token;
    }

    private void handleUnexpectedTokenType(int expectedType,boolean forced,Token oldToken) throws ParseException {
        if (!tolerantParsing) {
            //	    current_token = oldToken;
            throw new ParseException(current_token);
        }
        if (forced&&tolerantParsing) {
            Token virtualToken=Token.newToken(expectedType,"");
            virtualToken.setVirtual(true);
            virtualToken.setBeginLine(oldToken.getEndLine());
            virtualToken.setBeginColumn(oldToken.getEndColumn());
            virtualToken.setEndLine(current_token.getBeginLine());
            virtualToken.setEndColumn(current_token.getBeginColumn());
            virtualToken.setNext(current_token);
            current_token=virtualToken;
        }
        else {
            //	      current_token = oldToken;
            throw new ParseException(current_token);
            //	      throw new ParseException(generateErrorMessage(current_token));
        }
    }

    private String generateErrorMessage(Token t) {
        if (t.invalidToken!=null) {
            Token iv=t.invalidToken;
            return"Encountered invalid input: "+iv.image+" on "+iv.getLocation();
        }
        return"Encountered an error on (or somewhere around) line "+t.getBeginLine()+", column "+t.getBeginColumn()+" of "+t.getInputSource();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }
    final private LookaheadSuccess LOOKAHEAD_SUCCESS=new LookaheadSuccess();
    private boolean jj_scan_token(int kind) {
        if (jj_scanpos==jj_lastpos) {
            jj_la--;
            if (jj_scanpos.getNext()==null) {
                Token nextToken=token_source.getNextToken();
                jj_scanpos.setNext(nextToken);
                jj_scanpos=nextToken;
                jj_lastpos=nextToken;
            }
            else {
                jj_lastpos=jj_scanpos=jj_scanpos.getNext();
            }
        }
        else {
            jj_scanpos=jj_scanpos.getNext();
        }
        if (jj_scanpos.kind!=kind) return true;
        if (jj_la==0&&jj_scanpos==jj_lastpos) throw LOOKAHEAD_SUCCESS;
        return false;
    }

    final public Token getNextToken() {
        if (current_token.getNext()!=null) current_token=current_token.getNext();
        else {
            Token nextToken=token_source.getNextToken();
            current_token.setNext(nextToken);
            current_token=nextToken;
        }
        return current_token;
    }

    /** Get the specific Token index ahead in the stream. */
    final public Token getToken(int index) {
        Token t=current_token;
        for (int i=0; i<index; i++) {
            if (t.getNext()!=null) t=t.getNext();
            else {
                Token nextToken=token_source.getNextToken();
                t.setNext(nextToken);
                t=nextToken;
            }
        }
        return t;
    }

    private int nextTokenKind() {
        if (current_token.getNext()==null) {
            Token nextToken=token_source.getNextToken();
            current_token.setNext(nextToken);
        }
        return current_token.getNext().kind;
    }

    private List<Token>getTokensToEOL(int...desiredTokenTypes) {
        ArrayList<Token>result=new ArrayList<>();
        int currentLine=current_token.getBeginLine();
        Token tok=current_token;
        do {
            Token prevToken=tok;
            if (tok.getNext()!=null) {
                tok=tok.getNext();
            }
            else {
                tok=token_source.getNextToken();
                prevToken.setNext(tok);
            }
            result.add(tok);
        }
        while (tok.getBeginLine()==currentLine&&!intArrayContains(desiredTokenTypes,tok.kind)&&tok.kind!=EOF);
        return result;
    }

    static private boolean intArrayContains(int[] array,int elem) {
        for (int i=0; i<array.length; i++) {
            if (array[i]==elem) {
                return true;
            }
        }
        return false;
    }

    private boolean trace_enabled=false;
    public void setTracingEnabled(boolean tracingEnabled) {
        trace_enabled=tracingEnabled;
    }

    /**
 * @deprecated Use #setTracingEnabled
 */
    @Deprecated public void enable_tracing() {
        setTracingEnabled(true);
    }

    /**
 * @deprecated Use #setTracingEnabled
 */
    @Deprecated public void disable_tracing() {
        setTracingEnabled(false);
    }

}
